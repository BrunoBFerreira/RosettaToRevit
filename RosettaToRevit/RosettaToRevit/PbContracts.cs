// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class PbContracts {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_namestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::namestrc, global::namestrc.Builder> internal__static_namestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_boxstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::boxstrc, global::boxstrc.Builder> internal__static_boxstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_cylinderstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::cylinderstrc, global::cylinderstrc.Builder> internal__static_cylinderstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_cylinderbstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::cylinderbstrc, global::cylinderbstrc.Builder> internal__static_cylinderbstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_spherestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::spherestrc, global::spherestrc.Builder> internal__static_spherestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_familyelementstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::familyelementstrc, global::familyelementstrc.Builder> internal__static_familyelementstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_wallstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::wallstrc, global::wallstrc.Builder> internal__static_wallstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_wallheightstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::wallheightstrc, global::wallheightstrc.Builder> internal__static_wallheightstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_walllevelstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::walllevelstrc, global::walllevelstrc.Builder> internal__static_walllevelstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_polywallstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::polywallstrc, global::polywallstrc.Builder> internal__static_polywallstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_curtainwallstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::curtainwallstrc, global::curtainwallstrc.Builder> internal__static_curtainwallstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_wallinfostrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::wallinfostrc, global::wallinfostrc.Builder> internal__static_wallinfostrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_beaminfostrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::beaminfostrc, global::beaminfostrc.Builder> internal__static_beaminfostrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_polywallinfostrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::polywallinfostrc, global::polywallinfostrc.Builder> internal__static_polywallinfostrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_idstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::idstrc, global::idstrc.Builder> internal__static_idstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_doublestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::doublestrc, global::doublestrc.Builder> internal__static_doublestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_boolstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::boolstrc, global::boolstrc.Builder> internal__static_boolstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_doublevolumestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::doublevolumestrc, global::doublevolumestrc.Builder> internal__static_doublevolumestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_polyidstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::polyidstrc, global::polyidstrc.Builder> internal__static_polyidstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_polylevelstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::polylevelstrc, global::polylevelstrc.Builder> internal__static_polylevelstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_levelstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::levelstrc, global::levelstrc.Builder> internal__static_levelstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_upperlevelstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::upperlevelstrc, global::upperlevelstrc.Builder> internal__static_upperlevelstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_insertdoorstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::insertdoorstrc, global::insertdoorstrc.Builder> internal__static_insertdoorstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_insertdoorbstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::insertdoorbstrc, global::insertdoorbstrc.Builder> internal__static_insertdoorbstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_insertwindowstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::insertwindowstrc, global::insertwindowstrc.Builder> internal__static_insertwindowstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_roundfloorstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::roundfloorstrc, global::roundfloorstrc.Builder> internal__static_roundfloorstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_floorstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::floorstrc, global::floorstrc.Builder> internal__static_floorstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_columnstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::columnstrc, global::columnstrc.Builder> internal__static_columnstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_columnpointsstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::columnpointsstrc, global::columnpointsstrc.Builder> internal__static_columnpointsstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_flooropeningstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::flooropeningstrc, global::flooropeningstrc.Builder> internal__static_flooropeningstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_polylinefloorstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::polylinefloorstrc, global::polylinefloorstrc.Builder> internal__static_polylinefloorstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_linestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::linestrc, global::linestrc.Builder> internal__static_linestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_matrixstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::matrixstrc, global::matrixstrc.Builder> internal__static_matrixstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_intersectstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::intersectstrc, global::intersectstrc.Builder> internal__static_intersectstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_stairrunstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::stairrunstrc, global::stairrunstrc.Builder> internal__static_stairrunstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_stairstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::stairstrc, global::stairstrc.Builder> internal__static_stairstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_landingstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::landingstrc, global::landingstrc.Builder> internal__static_landingstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_slabwallstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::slabwallstrc, global::slabwallstrc.Builder> internal__static_slabwallstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_masswallstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::masswallstrc, global::masswallstrc.Builder> internal__static_masswallstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_masssweepstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::masssweepstrc, global::masssweepstrc.Builder> internal__static_masssweepstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_wallsfromslabsstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::wallsfromslabsstrc, global::wallsfromslabsstrc.Builder> internal__static_wallsfromslabsstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_holeslabstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::holeslabstrc, global::holeslabstrc.Builder> internal__static_holeslabstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_railingsstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::railingsstrc, global::railingsstrc.Builder> internal__static_railingsstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_toposurfacestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::toposurfacestrc, global::toposurfacestrc.Builder> internal__static_toposurfacestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_buildingpadstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::buildingpadstrc, global::buildingpadstrc.Builder> internal__static_buildingpadstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_extrusionstrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::extrusionstrc, global::extrusionstrc.Builder> internal__static_extrusionstrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_movestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::movestrc, global::movestrc.Builder> internal__static_movestrc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_rotatestrc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::rotatestrc, global::rotatestrc.Builder> internal__static_rotatestrc__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static PbContracts() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFwYkNvbnRyYWN0cy5wcm90byIYCghuYW1lc3RyYxIMCgRuYW1lGAEgAigJ", 
          "IvEBCgdib3hzdHJjEhAKCHAwY29vcmR4GAEgAigBEhAKCHAwY29vcmR5GAIg", 
          "AigBEhAKCHAwY29vcmR6GAMgAigBEhAKCHAxY29vcmR4GAQgAigBEhAKCHAx", 
          "Y29vcmR5GAUgAigBEhAKCHAxY29vcmR6GAYgAigBEhAKCHAyY29vcmR4GAcg", 
          "AigBEhAKCHAyY29vcmR5GAggAigBEhAKCHAyY29vcmR6GAkgAigBEhAKCHAz", 
          "Y29vcmR4GAogAigBEhAKCHAzY29vcmR5GAsgAigBEhAKCHAzY29vcmR6GAwg", 
          "AigBEg4KBmhlaWdodBgNIAIoASJkCgxjeWxpbmRlcnN0cmMSEAoIcDBjb29y", 
          "ZHgYASACKAESEAoIcDBjb29yZHkYAiACKAESEAoIcDBjb29yZHoYAyACKAES", 
          "DgoGcmFkaXVzGAQgAigBEg4KBmhlaWdodBgFIAIoASKLAQoNY3lsaW5kZXJi", 
          "c3RyYxIQCghwMGNvb3JkeBgBIAIoARIQCghwMGNvb3JkeRgCIAIoARIQCghw", 
          "MGNvb3JkehgDIAIoARIOCgZyYWRpdXMYBCACKAESEAoIcDFjb29yZHgYBSAC", 
          "KAESEAoIcDFjb29yZHkYBiACKAESEAoIcDFjb29yZHoYByACKAEirgEKCnNw", 
          "aGVyZXN0cmMSEAoIcDBjb29yZHgYASACKAESEAoIcDBjb29yZHkYAiACKAES", 
          "EAoIcDBjb29yZHoYAyACKAESEAoIcDFjb29yZHgYBCACKAESEAoIcDFjb29y", 
          "ZHkYBSACKAESEAoIcDFjb29yZHoYBiACKAESEAoIcDJjb29yZHgYByACKAES", 
          "EAoIcDJjb29yZHkYCCACKAESEAoIcDJjb29yZHoYCSACKAEiWwoRZmFtaWx5", 
          "ZWxlbWVudHN0cmMSGQoIZmFtaWx5aWQYASACKAsyBy5pZHN0cmMSDAoEZmxh", 
          "ZxgCIAIoCBINCgVuYW1lcxgDIAMoCRIOCgZ2YWx1ZXMYBCADKAEijgEKCHdh", 
          "bGxzdHJjEhAKCHAwY29vcmR4GAEgAigBEhAKCHAwY29vcmR5GAIgAigBEhAK", 
          "CHAwY29vcmR6GAMgAigBEhAKCHAxY29vcmR4GAQgAigBEhAKCHAxY29vcmR5", 
          "GAUgAigBEhAKCHAxY29vcmR6GAYgAigBEhYKBWxldmVsGAcgAigLMgcuaWRz", 
          "dHJjIqQBCg53YWxsaGVpZ2h0c3RyYxIQCghwMGNvb3JkeBgBIAIoARIQCghw", 
          "MGNvb3JkeRgCIAIoARIQCghwMGNvb3JkehgDIAIoARIQCghwMWNvb3JkeBgE", 
          "IAIoARIQCghwMWNvb3JkeRgFIAIoARIQCghwMWNvb3JkehgGIAIoARIOCgZo", 
          "ZWlnaHQYByACKAESFgoFbGV2ZWwYCCACKAsyBy5pZHN0cmMirQEKDXdhbGxs", 
          "ZXZlbHN0cmMSEAoIcDBjb29yZHgYASACKAESEAoIcDBjb29yZHkYAiACKAES", 
          "EAoIcDBjb29yZHoYAyACKAESEAoIcDFjb29yZHgYBCACKAESEAoIcDFjb29y", 
          "ZHkYBSACKAESEAoIcDFjb29yZHoYBiACKAESFwoGbGV2ZWxiGAcgAigLMgcu", 
          "aWRzdHJjEhcKBmxldmVsdBgIIAIoCzIHLmlkc3RyYyJoCgxwb2x5d2FsbHN0", 
          "cmMSCwoDcHRzGAEgAygBEhcKBmxldmVsYhgCIAIoCzIHLmlkc3RyYxIXCgZs", 
          "ZXZlbHQYAyACKAsyBy5pZHN0cmMSGQoIZmFtaWx5aWQYBCACKAsyBy5pZHN0", 
          "cmMi3AEKD2N1cnRhaW53YWxsc3RyYxIQCghwMGNvb3JkeBgBIAIoARIQCghw", 
          "MGNvb3JkeRgCIAIoARIQCghwMGNvb3JkehgDIAIoARIQCghwMWNvb3JkeBgE", 
          "IAIoARIQCghwMWNvb3JkeRgFIAIoARIQCghwMWNvb3JkehgGIAIoARISCgp1", 
          "bGluZWNvb3JkGAcgAygBEhIKCnZsaW5lY29vcmQYCCADKAESGgoJYmFzZWxl", 
          "dmVsGAkgAigLMgcuaWRzdHJjEhkKCHRvcGxldmVsGAogAigLMgcuaWRzdHJj", 
          "IuYBCgx3YWxsaW5mb3N0cmMSEAoIcDBjb29yZHgYASACKAESEAoIcDBjb29y", 
          "ZHkYAiACKAESEAoIcDBjb29yZHoYAyACKAESEAoIcDFjb29yZHgYBCACKAES", 
          "EAoIcDFjb29yZHkYBSACKAESEAoIcDFjb29yZHoYBiACKAESFQoNYmFzZWVs", 
          "ZXZhdGlvbhgHIAIoARIVCg1iYXNlbGV2ZWxuYW1lGAggAigJEhQKDHRvcGVs", 
          "ZXZhdGlvbhgJIAIoARIUCgx0b3BsZXZlbG5hbWUYCiACKAkSEAoId2FsbHR5", 
          "cGUYCyACKAkikwEKDGJlYW1pbmZvc3RyYxIQCghwMGNvb3JkeBgBIAIoARIQ", 
          "CghwMGNvb3JkeRgCIAIoARIQCghwMGNvb3JkehgDIAIoARIQCghwMWNvb3Jk", 
          "eBgEIAIoARIQCghwMWNvb3JkeRgFIAIoARIQCghwMWNvb3JkehgGIAIoARIX", 
          "CgZmYW1pbHkYByACKAsyBy5pZHN0cmMiMAoQcG9seXdhbGxpbmZvc3RyYxIc", 
          "CgV3YWxscxgBIAMoCzINLndhbGxpbmZvc3RyYyIUCgZpZHN0cmMSCgoCaWQY", 
          "ASACKAUiHAoKZG91Ymxlc3RyYxIOCgZoZWlnaHQYASACKAEiGgoIYm9vbHN0", 
          "cmMSDgoGYW5zd2VyGAEgAigIIiIKEGRvdWJsZXZvbHVtZXN0cmMSDgoGdm9s", 
          "dW1lGAEgAigBIiIKCnBvbHlpZHN0cmMSFAoDaWRzGAEgAygLMgcuaWRzdHJj", 
          "IisKDXBvbHlsZXZlbHN0cmMSGgoGbGV2ZWxzGAEgAygLMgoubGV2ZWxzdHJj", 
          "IiQKCWxldmVsc3RyYxIJCgFoGAEgAigBEgwKBG5hbWUYAiACKAkiPQoOdXBw", 
          "ZXJsZXZlbHN0cmMSGAoHY3VycmVudBgBIAIoCzIHLmlkc3RyYxIRCgllbGV2", 
          "YXRpb24YAiACKAEibwoOaW5zZXJ0ZG9vcnN0cmMSDgoGaG9zdGlkGAEgAigF", 
          "EhAKCHAwY29vcmR4GAIgAigBEhAKCHAwY29vcmR5GAMgAigBEhAKCHAwY29v", 
          "cmR6GAQgAigBEhcKBmZhbWlseRgFIAIoCzIHLmlkc3RyYyJaCg9pbnNlcnRk", 
          "b29yYnN0cmMSDgoGaG9zdGlkGAEgAigFEg4KBmRlbHRheBgCIAIoARIOCgZk", 
          "ZWx0YXkYAyACKAESFwoGZmFtaWx5GAQgAigLMgcuaWRzdHJjIkIKEGluc2Vy", 
          "dHdpbmRvd3N0cmMSDgoGaG9zdGlkGAEgAigFEg4KBmRlbHRheBgCIAIoARIO", 
          "CgZkZWx0YXkYAyACKAEiawoOcm91bmRmbG9vcnN0cmMSDgoGcmFkaXVzGAEg", 
          "AigBEg8KB2NlbnRlclgYAiACKAESDwoHY2VudGVyWRgDIAIoARIPCgdjZW50", 
          "ZXJaGAQgAigBEhYKBWxldmVsGAUgAigLMgcuaWRzdHJjIo8BCglmbG9vcnN0", 
          "cmMSEAoIcDBjb29yZHgYASACKAESEAoIcDBjb29yZHkYAiACKAESEAoIcDBj", 
          "b29yZHoYAyACKAESEAoIcDFjb29yZHgYBCACKAESEAoIcDFjb29yZHkYBSAC", 
          "KAESEAoIcDFjb29yZHoYBiACKAESFgoFbGV2ZWwYByACKAsyBy5pZHN0cmMi", 
          "owEKCmNvbHVtbnN0cmMSEAoIcDBjb29yZHgYASACKAESEAoIcDBjb29yZHkY", 
          "AiACKAESEAoIcDBjb29yZHoYAyACKAESGgoJYmFzZWxldmVsGAQgAigLMgcu", 
          "aWRzdHJjEhkKCHRvcGxldmVsGAUgAigLMgcuaWRzdHJjEg0KBXdpZHRoGAYg", 
          "AigBEhkKCGZhbWlseWlkGAcgAigLMgcuaWRzdHJjIt8BChBjb2x1bW5wb2lu", 
          "dHNzdHJjEhAKCHAwY29vcmR4GAEgAigBEhAKCHAwY29vcmR5GAIgAigBEhAK", 
          "CHAwY29vcmR6GAMgAigBEhAKCHAxY29vcmR4GAQgAigBEhAKCHAxY29vcmR5", 
          "GAUgAigBEhAKCHAxY29vcmR6GAYgAigBEhoKCWJhc2VsZXZlbBgHIAIoCzIH", 
          "Lmlkc3RyYxIZCgh0b3BsZXZlbBgIIAIoCzIHLmlkc3RyYxINCgV3aWR0aBgJ", 
          "IAIoARIZCghmYW1pbHlpZBgKIAIoCzIHLmlkc3RyYyKPAQoQZmxvb3JvcGVu", 
          "aW5nc3RyYxIQCghwMGNvb3JkeBgBIAIoARIQCghwMGNvb3JkeRgCIAIoARIQ", 
          "CghwMGNvb3JkehgDIAIoARIQCghwMWNvb3JkeBgEIAIoARIQCghwMWNvb3Jk", 
          "eRgFIAIoARIQCghwMWNvb3JkehgGIAIoARIPCgdmbG9vcmlkGAcgAigFIlYK", 
          "EXBvbHlsaW5lZmxvb3JzdHJjEhYKBWZsb29yGAEgAigLMgcuaWRzdHJjEg4K", 
          "BnBvaW50cxgCIAMoARIZCghmYW1pbHlpZBgDIAIoCzIHLmlkc3RyYyIaCghs", 
          "aW5lc3RyYxIOCgZwb2ludHMYASADKAEiJgoKbWF0cml4c3RyYxIYCgVsaW5l", 
          "cxgBIAMoCzIJLmxpbmVzdHJjIkIKDWludGVyc2VjdHN0cmMSFwoGd2FsbElk", 
          "GAEgAigLMgcuaWRzdHJjEhgKB2Zsb29ySWQYAiACKAsyBy5pZHN0cmMi2wEK", 
          "DHN0YWlycnVuc3RyYxIcCgtib3R0b21MZXZlbBgBIAIoCzIHLmlkc3RyYxIZ", 
          "Cgh0b3BMZXZlbBgCIAIoCzIHLmlkc3RyYxIQCghwMGNvb3JkeBgDIAIoARIQ", 
          "CghwMGNvb3JkeRgEIAIoARIQCghwMGNvb3JkehgFIAIoARIQCghwMWNvb3Jk", 
          "eBgGIAIoARIQCghwMWNvb3JkeRgHIAIoARIQCghwMWNvb3JkehgIIAIoARIN", 
          "CgV3aWR0aBgJIAIoARIXCgZmYW1pbHkYCiACKAsyBy5pZHN0cmMiywEKCXN0", 
          "YWlyc3RyYxIcCgtib3R0b21MZXZlbBgBIAIoCzIHLmlkc3RyYxIZCgh0b3BM", 
          "ZXZlbBgCIAIoCzIHLmlkc3RyYxIWCg5ib3R0b21wMGNvb3JkeBgDIAIoARIW", 
          "Cg5ib3R0b21wMGNvb3JkeRgEIAIoARIWCg5ib3R0b21wMGNvb3JkehgFIAIo", 
          "ARITCgt0b3BwMGNvb3JkeBgGIAIoARITCgt0b3BwMGNvb3JkeRgHIAIoARIT", 
          "Cgt0b3BwMGNvb3JkehgIIAIoASLjAgoLbGFuZGluZ3N0cmMSGQoRYm90dG9t", 
          "bGVmdGNvcm5lcngYASACKAESGQoRYm90dG9tbGVmdGNvcm5lcnkYAiACKAES", 
          "GQoRYm90dG9tbGVmdGNvcm5lcnoYAyACKAESFgoOdG9wbGVmdGNvcm5lcngY", 
          "BCACKAESFgoOdG9wbGVmdGNvcm5lcnkYBSACKAESFgoOdG9wbGVmdGNvcm5l", 
          "cnoYBiACKAESGgoSYm90dG9tcmlnaHRjb3JuZXJ4GAcgAigBEhoKEmJvdHRv", 
          "bXJpZ2h0Y29ybmVyeRgIIAIoARIaChJib3R0b21yaWdodGNvcm5lcnoYCSAC", 
          "KAESFwoPdG9wcmlnaHRjb3JuZXJ4GAogAigBEhcKD3RvcHJpZ2h0Y29ybmVy", 
          "eRgLIAIoARIXCg90b3ByaWdodGNvcm5lcnoYDCACKAESHAoLc3RhaXJzcnVu", 
          "aWQYDSACKAsyBy5pZHN0cmMi4AIKDHNsYWJ3YWxsc3RyYxIZChFib3R0b21s", 
          "ZWZ0Y29ybmVyeBgBIAIoARIZChFib3R0b21sZWZ0Y29ybmVyeRgCIAIoARIZ", 
          "ChFib3R0b21sZWZ0Y29ybmVyehgDIAIoARIWCg50b3BsZWZ0Y29ybmVyeBgE", 
          "IAIoARIWCg50b3BsZWZ0Y29ybmVyeRgFIAIoARIWCg50b3BsZWZ0Y29ybmVy", 
          "ehgGIAIoARIaChJib3R0b21yaWdodGNvcm5lcngYByACKAESGgoSYm90dG9t", 
          "cmlnaHRjb3JuZXJ5GAggAigBEhoKEmJvdHRvbXJpZ2h0Y29ybmVyehgJIAIo", 
          "ARIXCg90b3ByaWdodGNvcm5lcngYCiACKAESFwoPdG9wcmlnaHRjb3JuZXJ5", 
          "GAsgAigBEhcKD3RvcHJpZ2h0Y29ybmVyehgMIAIoARIYCgdsZXZlbElkGA0g", 
          "AigLMgcuaWRzdHJjIvACCgxtYXNzd2FsbHN0cmMSGQoRYm90dG9tbGVmdGNv", 
          "cm5lcngYASACKAESGQoRYm90dG9tbGVmdGNvcm5lcnkYAiACKAESGQoRYm90", 
          "dG9tbGVmdGNvcm5lcnoYAyACKAESFgoOdG9wbGVmdGNvcm5lcngYBCACKAES", 
          "FgoOdG9wbGVmdGNvcm5lcnkYBSACKAESFgoOdG9wbGVmdGNvcm5lcnoYBiAC", 
          "KAESGgoSYm90dG9tcmlnaHRjb3JuZXJ4GAcgAigBEhoKEmJvdHRvbXJpZ2h0", 
          "Y29ybmVyeRgIIAIoARIaChJib3R0b21yaWdodGNvcm5lcnoYCSACKAESFwoP", 
          "dG9wcmlnaHRjb3JuZXJ4GAogAigBEhcKD3RvcHJpZ2h0Y29ybmVyeRgLIAIo", 
          "ARIXCg90b3ByaWdodGNvcm5lcnoYDCACKAESDgoGaGVpZ2h0GA0gAigBEhgK", 
          "B2xldmVsSWQYDiACKAsyBy5pZHN0cmMiQQoNbWFzc3N3ZWVwc3RyYxIQCghw", 
          "cm9maWxlMRgBIAMoARIMCgRwYXRoGAIgAygBEhAKCHByb2ZpbGUyGAMgAygB", 
          "IlYKEndhbGxzZnJvbXNsYWJzc3RyYxIXCgZzbGFiaWQYASACKAsyBy5pZHN0", 
          "cmMSFwoGYmxldmVsGAIgAigLMgcuaWRzdHJjEg4KBmhlaWdodBgDIAIoASI0", 
          "Cgxob2xlc2xhYnN0cmMSFwoGc2xhYmlkGAEgAigLMgcuaWRzdHJjEgsKA3B0", 
          "cxgCIAMoASInCgxyYWlsaW5nc3N0cmMSFwoGc2xhYmlkGAEgAigLMgcuaWRz", 
          "dHJjIh4KD3RvcG9zdXJmYWNlc3RyYxILCgNwdHMYASADKAEiOAoPYnVpbGRp", 
          "bmdwYWRzdHJjEgsKA3B0cxgBIAMoARIYCgdsZXZlbElEGAIgAigLMgcuaWRz", 
          "dHJjIi8KDWV4dHJ1c2lvbnN0cmMSCwoDcHRzGAEgAygBEhEKCWVsZXZhdGlv", 
          "bhgCIAIoASJXCghtb3Zlc3RyYxIYCgdlbGVtZW50GAEgAigLMgcuaWRzdHJj", 
          "Eg8KB3ZlY3RvcngYAiACKAESDwoHdmVjdG9yeRgDIAIoARIPCgd2ZWN0b3J6", 
          "GAQgAigBIoMBCgpyb3RhdGVzdHJjEhgKB2VsZW1lbnQYASACKAsyBy5pZHN0", 
          "cmMSDQoFYW5nbGUYAiACKAESCwoDcDB4GAMgAigBEgsKA3AweRgEIAIoARIL", 
          "CgNwMHoYBSACKAESCwoDcDF4GAYgAigBEgsKA3AxeRgHIAIoARILCgNwMXoY", 
        "CCACKAE="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_namestrc__Descriptor = Descriptor.MessageTypes[0];
      internal__static_namestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::namestrc, global::namestrc.Builder>(internal__static_namestrc__Descriptor,
              new string[] { "Name", });
      internal__static_boxstrc__Descriptor = Descriptor.MessageTypes[1];
      internal__static_boxstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::boxstrc, global::boxstrc.Builder>(internal__static_boxstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "P2Coordx", "P2Coordy", "P2Coordz", "P3Coordx", "P3Coordy", "P3Coordz", "Height", });
      internal__static_cylinderstrc__Descriptor = Descriptor.MessageTypes[2];
      internal__static_cylinderstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::cylinderstrc, global::cylinderstrc.Builder>(internal__static_cylinderstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "Radius", "Height", });
      internal__static_cylinderbstrc__Descriptor = Descriptor.MessageTypes[3];
      internal__static_cylinderbstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::cylinderbstrc, global::cylinderbstrc.Builder>(internal__static_cylinderbstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "Radius", "P1Coordx", "P1Coordy", "P1Coordz", });
      internal__static_spherestrc__Descriptor = Descriptor.MessageTypes[4];
      internal__static_spherestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::spherestrc, global::spherestrc.Builder>(internal__static_spherestrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "P2Coordx", "P2Coordy", "P2Coordz", });
      internal__static_familyelementstrc__Descriptor = Descriptor.MessageTypes[5];
      internal__static_familyelementstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::familyelementstrc, global::familyelementstrc.Builder>(internal__static_familyelementstrc__Descriptor,
              new string[] { "Familyid", "Flag", "Names", "Values", });
      internal__static_wallstrc__Descriptor = Descriptor.MessageTypes[6];
      internal__static_wallstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::wallstrc, global::wallstrc.Builder>(internal__static_wallstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Level", });
      internal__static_wallheightstrc__Descriptor = Descriptor.MessageTypes[7];
      internal__static_wallheightstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::wallheightstrc, global::wallheightstrc.Builder>(internal__static_wallheightstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Height", "Level", });
      internal__static_walllevelstrc__Descriptor = Descriptor.MessageTypes[8];
      internal__static_walllevelstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::walllevelstrc, global::walllevelstrc.Builder>(internal__static_walllevelstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Levelb", "Levelt", });
      internal__static_polywallstrc__Descriptor = Descriptor.MessageTypes[9];
      internal__static_polywallstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::polywallstrc, global::polywallstrc.Builder>(internal__static_polywallstrc__Descriptor,
              new string[] { "Pts", "Levelb", "Levelt", "Familyid", });
      internal__static_curtainwallstrc__Descriptor = Descriptor.MessageTypes[10];
      internal__static_curtainwallstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::curtainwallstrc, global::curtainwallstrc.Builder>(internal__static_curtainwallstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Ulinecoord", "Vlinecoord", "Baselevel", "Toplevel", });
      internal__static_wallinfostrc__Descriptor = Descriptor.MessageTypes[11];
      internal__static_wallinfostrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::wallinfostrc, global::wallinfostrc.Builder>(internal__static_wallinfostrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Baseelevation", "Baselevelname", "Topelevation", "Toplevelname", "Walltype", });
      internal__static_beaminfostrc__Descriptor = Descriptor.MessageTypes[12];
      internal__static_beaminfostrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::beaminfostrc, global::beaminfostrc.Builder>(internal__static_beaminfostrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Family", });
      internal__static_polywallinfostrc__Descriptor = Descriptor.MessageTypes[13];
      internal__static_polywallinfostrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::polywallinfostrc, global::polywallinfostrc.Builder>(internal__static_polywallinfostrc__Descriptor,
              new string[] { "Walls", });
      internal__static_idstrc__Descriptor = Descriptor.MessageTypes[14];
      internal__static_idstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::idstrc, global::idstrc.Builder>(internal__static_idstrc__Descriptor,
              new string[] { "Id", });
      internal__static_doublestrc__Descriptor = Descriptor.MessageTypes[15];
      internal__static_doublestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::doublestrc, global::doublestrc.Builder>(internal__static_doublestrc__Descriptor,
              new string[] { "Height", });
      internal__static_boolstrc__Descriptor = Descriptor.MessageTypes[16];
      internal__static_boolstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::boolstrc, global::boolstrc.Builder>(internal__static_boolstrc__Descriptor,
              new string[] { "Answer", });
      internal__static_doublevolumestrc__Descriptor = Descriptor.MessageTypes[17];
      internal__static_doublevolumestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::doublevolumestrc, global::doublevolumestrc.Builder>(internal__static_doublevolumestrc__Descriptor,
              new string[] { "Volume", });
      internal__static_polyidstrc__Descriptor = Descriptor.MessageTypes[18];
      internal__static_polyidstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::polyidstrc, global::polyidstrc.Builder>(internal__static_polyidstrc__Descriptor,
              new string[] { "Ids", });
      internal__static_polylevelstrc__Descriptor = Descriptor.MessageTypes[19];
      internal__static_polylevelstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::polylevelstrc, global::polylevelstrc.Builder>(internal__static_polylevelstrc__Descriptor,
              new string[] { "Levels", });
      internal__static_levelstrc__Descriptor = Descriptor.MessageTypes[20];
      internal__static_levelstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::levelstrc, global::levelstrc.Builder>(internal__static_levelstrc__Descriptor,
              new string[] { "H", "Name", });
      internal__static_upperlevelstrc__Descriptor = Descriptor.MessageTypes[21];
      internal__static_upperlevelstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::upperlevelstrc, global::upperlevelstrc.Builder>(internal__static_upperlevelstrc__Descriptor,
              new string[] { "Current", "Elevation", });
      internal__static_insertdoorstrc__Descriptor = Descriptor.MessageTypes[22];
      internal__static_insertdoorstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::insertdoorstrc, global::insertdoorstrc.Builder>(internal__static_insertdoorstrc__Descriptor,
              new string[] { "Hostid", "P0Coordx", "P0Coordy", "P0Coordz", "Family", });
      internal__static_insertdoorbstrc__Descriptor = Descriptor.MessageTypes[23];
      internal__static_insertdoorbstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::insertdoorbstrc, global::insertdoorbstrc.Builder>(internal__static_insertdoorbstrc__Descriptor,
              new string[] { "Hostid", "Deltax", "Deltay", "Family", });
      internal__static_insertwindowstrc__Descriptor = Descriptor.MessageTypes[24];
      internal__static_insertwindowstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::insertwindowstrc, global::insertwindowstrc.Builder>(internal__static_insertwindowstrc__Descriptor,
              new string[] { "Hostid", "Deltax", "Deltay", });
      internal__static_roundfloorstrc__Descriptor = Descriptor.MessageTypes[25];
      internal__static_roundfloorstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::roundfloorstrc, global::roundfloorstrc.Builder>(internal__static_roundfloorstrc__Descriptor,
              new string[] { "Radius", "CenterX", "CenterY", "CenterZ", "Level", });
      internal__static_floorstrc__Descriptor = Descriptor.MessageTypes[26];
      internal__static_floorstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::floorstrc, global::floorstrc.Builder>(internal__static_floorstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Level", });
      internal__static_columnstrc__Descriptor = Descriptor.MessageTypes[27];
      internal__static_columnstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::columnstrc, global::columnstrc.Builder>(internal__static_columnstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "Baselevel", "Toplevel", "Width", "Familyid", });
      internal__static_columnpointsstrc__Descriptor = Descriptor.MessageTypes[28];
      internal__static_columnpointsstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::columnpointsstrc, global::columnpointsstrc.Builder>(internal__static_columnpointsstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Baselevel", "Toplevel", "Width", "Familyid", });
      internal__static_flooropeningstrc__Descriptor = Descriptor.MessageTypes[29];
      internal__static_flooropeningstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::flooropeningstrc, global::flooropeningstrc.Builder>(internal__static_flooropeningstrc__Descriptor,
              new string[] { "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Floorid", });
      internal__static_polylinefloorstrc__Descriptor = Descriptor.MessageTypes[30];
      internal__static_polylinefloorstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::polylinefloorstrc, global::polylinefloorstrc.Builder>(internal__static_polylinefloorstrc__Descriptor,
              new string[] { "Floor", "Points", "Familyid", });
      internal__static_linestrc__Descriptor = Descriptor.MessageTypes[31];
      internal__static_linestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::linestrc, global::linestrc.Builder>(internal__static_linestrc__Descriptor,
              new string[] { "Points", });
      internal__static_matrixstrc__Descriptor = Descriptor.MessageTypes[32];
      internal__static_matrixstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::matrixstrc, global::matrixstrc.Builder>(internal__static_matrixstrc__Descriptor,
              new string[] { "Lines", });
      internal__static_intersectstrc__Descriptor = Descriptor.MessageTypes[33];
      internal__static_intersectstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::intersectstrc, global::intersectstrc.Builder>(internal__static_intersectstrc__Descriptor,
              new string[] { "WallId", "FloorId", });
      internal__static_stairrunstrc__Descriptor = Descriptor.MessageTypes[34];
      internal__static_stairrunstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::stairrunstrc, global::stairrunstrc.Builder>(internal__static_stairrunstrc__Descriptor,
              new string[] { "BottomLevel", "TopLevel", "P0Coordx", "P0Coordy", "P0Coordz", "P1Coordx", "P1Coordy", "P1Coordz", "Width", "Family", });
      internal__static_stairstrc__Descriptor = Descriptor.MessageTypes[35];
      internal__static_stairstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::stairstrc, global::stairstrc.Builder>(internal__static_stairstrc__Descriptor,
              new string[] { "BottomLevel", "TopLevel", "Bottomp0Coordx", "Bottomp0Coordy", "Bottomp0Coordz", "Topp0Coordx", "Topp0Coordy", "Topp0Coordz", });
      internal__static_landingstrc__Descriptor = Descriptor.MessageTypes[36];
      internal__static_landingstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::landingstrc, global::landingstrc.Builder>(internal__static_landingstrc__Descriptor,
              new string[] { "Bottomleftcornerx", "Bottomleftcornery", "Bottomleftcornerz", "Topleftcornerx", "Topleftcornery", "Topleftcornerz", "Bottomrightcornerx", "Bottomrightcornery", "Bottomrightcornerz", "Toprightcornerx", "Toprightcornery", "Toprightcornerz", "Stairsrunid", });
      internal__static_slabwallstrc__Descriptor = Descriptor.MessageTypes[37];
      internal__static_slabwallstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::slabwallstrc, global::slabwallstrc.Builder>(internal__static_slabwallstrc__Descriptor,
              new string[] { "Bottomleftcornerx", "Bottomleftcornery", "Bottomleftcornerz", "Topleftcornerx", "Topleftcornery", "Topleftcornerz", "Bottomrightcornerx", "Bottomrightcornery", "Bottomrightcornerz", "Toprightcornerx", "Toprightcornery", "Toprightcornerz", "LevelId", });
      internal__static_masswallstrc__Descriptor = Descriptor.MessageTypes[38];
      internal__static_masswallstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::masswallstrc, global::masswallstrc.Builder>(internal__static_masswallstrc__Descriptor,
              new string[] { "Bottomleftcornerx", "Bottomleftcornery", "Bottomleftcornerz", "Topleftcornerx", "Topleftcornery", "Topleftcornerz", "Bottomrightcornerx", "Bottomrightcornery", "Bottomrightcornerz", "Toprightcornerx", "Toprightcornery", "Toprightcornerz", "Height", "LevelId", });
      internal__static_masssweepstrc__Descriptor = Descriptor.MessageTypes[39];
      internal__static_masssweepstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::masssweepstrc, global::masssweepstrc.Builder>(internal__static_masssweepstrc__Descriptor,
              new string[] { "Profile1", "Path", "Profile2", });
      internal__static_wallsfromslabsstrc__Descriptor = Descriptor.MessageTypes[40];
      internal__static_wallsfromslabsstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::wallsfromslabsstrc, global::wallsfromslabsstrc.Builder>(internal__static_wallsfromslabsstrc__Descriptor,
              new string[] { "Slabid", "Blevel", "Height", });
      internal__static_holeslabstrc__Descriptor = Descriptor.MessageTypes[41];
      internal__static_holeslabstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::holeslabstrc, global::holeslabstrc.Builder>(internal__static_holeslabstrc__Descriptor,
              new string[] { "Slabid", "Pts", });
      internal__static_railingsstrc__Descriptor = Descriptor.MessageTypes[42];
      internal__static_railingsstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::railingsstrc, global::railingsstrc.Builder>(internal__static_railingsstrc__Descriptor,
              new string[] { "Slabid", });
      internal__static_toposurfacestrc__Descriptor = Descriptor.MessageTypes[43];
      internal__static_toposurfacestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::toposurfacestrc, global::toposurfacestrc.Builder>(internal__static_toposurfacestrc__Descriptor,
              new string[] { "Pts", });
      internal__static_buildingpadstrc__Descriptor = Descriptor.MessageTypes[44];
      internal__static_buildingpadstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::buildingpadstrc, global::buildingpadstrc.Builder>(internal__static_buildingpadstrc__Descriptor,
              new string[] { "Pts", "LevelID", });
      internal__static_extrusionstrc__Descriptor = Descriptor.MessageTypes[45];
      internal__static_extrusionstrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::extrusionstrc, global::extrusionstrc.Builder>(internal__static_extrusionstrc__Descriptor,
              new string[] { "Pts", "Elevation", });
      internal__static_movestrc__Descriptor = Descriptor.MessageTypes[46];
      internal__static_movestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::movestrc, global::movestrc.Builder>(internal__static_movestrc__Descriptor,
              new string[] { "Element", "Vectorx", "Vectory", "Vectorz", });
      internal__static_rotatestrc__Descriptor = Descriptor.MessageTypes[47];
      internal__static_rotatestrc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::rotatestrc, global::rotatestrc.Builder>(internal__static_rotatestrc__Descriptor,
              new string[] { "Element", "Angle", "P0X", "P0Y", "P0Z", "P1X", "P1Y", "P1Z", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class namestrc : pb::GeneratedMessage<namestrc, namestrc.Builder> {
  private namestrc() { }
  private static readonly namestrc defaultInstance = new namestrc().MakeReadOnly();
  private static readonly string[] _namestrcFieldNames = new string[] { "name" };
  private static readonly uint[] _namestrcFieldTags = new uint[] { 10 };
  public static namestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override namestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override namestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_namestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<namestrc, namestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_namestrc__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _namestrcFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static namestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static namestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static namestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static namestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static namestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static namestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static namestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static namestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static namestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static namestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private namestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(namestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<namestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(namestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private namestrc result;
    
    private namestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        namestrc original = result;
        result = new namestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override namestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::namestrc.Descriptor; }
    }
    
    public override namestrc DefaultInstanceForType {
      get { return global::namestrc.DefaultInstance; }
    }
    
    public override namestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is namestrc) {
        return MergeFrom((namestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(namestrc other) {
      if (other == global::namestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_namestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _namestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static namestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class boxstrc : pb::GeneratedMessage<boxstrc, boxstrc.Builder> {
  private boxstrc() { }
  private static readonly boxstrc defaultInstance = new boxstrc().MakeReadOnly();
  private static readonly string[] _boxstrcFieldNames = new string[] { "height", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "p2coordx", "p2coordy", "p2coordz", "p3coordx", "p3coordy", "p3coordz" };
  private static readonly uint[] _boxstrcFieldTags = new uint[] { 105, 9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89, 97 };
  public static boxstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override boxstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override boxstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_boxstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<boxstrc, boxstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_boxstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int P2CoordxFieldNumber = 7;
  private bool hasP2Coordx;
  private double p2Coordx_;
  public bool HasP2Coordx {
    get { return hasP2Coordx; }
  }
  public double P2Coordx {
    get { return p2Coordx_; }
  }
  
  public const int P2CoordyFieldNumber = 8;
  private bool hasP2Coordy;
  private double p2Coordy_;
  public bool HasP2Coordy {
    get { return hasP2Coordy; }
  }
  public double P2Coordy {
    get { return p2Coordy_; }
  }
  
  public const int P2CoordzFieldNumber = 9;
  private bool hasP2Coordz;
  private double p2Coordz_;
  public bool HasP2Coordz {
    get { return hasP2Coordz; }
  }
  public double P2Coordz {
    get { return p2Coordz_; }
  }
  
  public const int P3CoordxFieldNumber = 10;
  private bool hasP3Coordx;
  private double p3Coordx_;
  public bool HasP3Coordx {
    get { return hasP3Coordx; }
  }
  public double P3Coordx {
    get { return p3Coordx_; }
  }
  
  public const int P3CoordyFieldNumber = 11;
  private bool hasP3Coordy;
  private double p3Coordy_;
  public bool HasP3Coordy {
    get { return hasP3Coordy; }
  }
  public double P3Coordy {
    get { return p3Coordy_; }
  }
  
  public const int P3CoordzFieldNumber = 12;
  private bool hasP3Coordz;
  private double p3Coordz_;
  public bool HasP3Coordz {
    get { return hasP3Coordz; }
  }
  public double P3Coordz {
    get { return p3Coordz_; }
  }
  
  public const int HeightFieldNumber = 13;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasP2Coordx) return false;
      if (!hasP2Coordy) return false;
      if (!hasP2Coordz) return false;
      if (!hasP3Coordx) return false;
      if (!hasP3Coordy) return false;
      if (!hasP3Coordz) return false;
      if (!hasHeight) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _boxstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (hasP2Coordx) {
      output.WriteDouble(7, field_names[7], P2Coordx);
    }
    if (hasP2Coordy) {
      output.WriteDouble(8, field_names[8], P2Coordy);
    }
    if (hasP2Coordz) {
      output.WriteDouble(9, field_names[9], P2Coordz);
    }
    if (hasP3Coordx) {
      output.WriteDouble(10, field_names[10], P3Coordx);
    }
    if (hasP3Coordy) {
      output.WriteDouble(11, field_names[11], P3Coordy);
    }
    if (hasP3Coordz) {
      output.WriteDouble(12, field_names[12], P3Coordz);
    }
    if (hasHeight) {
      output.WriteDouble(13, field_names[0], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasP2Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, P2Coordx);
    }
    if (hasP2Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, P2Coordy);
    }
    if (hasP2Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, P2Coordz);
    }
    if (hasP3Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(10, P3Coordx);
    }
    if (hasP3Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(11, P3Coordy);
    }
    if (hasP3Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(12, P3Coordz);
    }
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(13, Height);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static boxstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static boxstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static boxstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static boxstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static boxstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static boxstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static boxstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static boxstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static boxstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static boxstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private boxstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(boxstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<boxstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(boxstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private boxstrc result;
    
    private boxstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        boxstrc original = result;
        result = new boxstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override boxstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::boxstrc.Descriptor; }
    }
    
    public override boxstrc DefaultInstanceForType {
      get { return global::boxstrc.DefaultInstance; }
    }
    
    public override boxstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is boxstrc) {
        return MergeFrom((boxstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(boxstrc other) {
      if (other == global::boxstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasP2Coordx) {
        P2Coordx = other.P2Coordx;
      }
      if (other.HasP2Coordy) {
        P2Coordy = other.P2Coordy;
      }
      if (other.HasP2Coordz) {
        P2Coordz = other.P2Coordz;
      }
      if (other.HasP3Coordx) {
        P3Coordx = other.P3Coordx;
      }
      if (other.HasP3Coordy) {
        P3Coordy = other.P3Coordy;
      }
      if (other.HasP3Coordz) {
        P3Coordz = other.P3Coordz;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_boxstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _boxstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 57: {
            result.hasP2Coordx = input.ReadDouble(ref result.p2Coordx_);
            break;
          }
          case 65: {
            result.hasP2Coordy = input.ReadDouble(ref result.p2Coordy_);
            break;
          }
          case 73: {
            result.hasP2Coordz = input.ReadDouble(ref result.p2Coordz_);
            break;
          }
          case 81: {
            result.hasP3Coordx = input.ReadDouble(ref result.p3Coordx_);
            break;
          }
          case 89: {
            result.hasP3Coordy = input.ReadDouble(ref result.p3Coordy_);
            break;
          }
          case 97: {
            result.hasP3Coordz = input.ReadDouble(ref result.p3Coordz_);
            break;
          }
          case 105: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasP2Coordx {
      get { return result.hasP2Coordx; }
    }
    public double P2Coordx {
      get { return result.P2Coordx; }
      set { SetP2Coordx(value); }
    }
    public Builder SetP2Coordx(double value) {
      PrepareBuilder();
      result.hasP2Coordx = true;
      result.p2Coordx_ = value;
      return this;
    }
    public Builder ClearP2Coordx() {
      PrepareBuilder();
      result.hasP2Coordx = false;
      result.p2Coordx_ = 0D;
      return this;
    }
    
    public bool HasP2Coordy {
      get { return result.hasP2Coordy; }
    }
    public double P2Coordy {
      get { return result.P2Coordy; }
      set { SetP2Coordy(value); }
    }
    public Builder SetP2Coordy(double value) {
      PrepareBuilder();
      result.hasP2Coordy = true;
      result.p2Coordy_ = value;
      return this;
    }
    public Builder ClearP2Coordy() {
      PrepareBuilder();
      result.hasP2Coordy = false;
      result.p2Coordy_ = 0D;
      return this;
    }
    
    public bool HasP2Coordz {
      get { return result.hasP2Coordz; }
    }
    public double P2Coordz {
      get { return result.P2Coordz; }
      set { SetP2Coordz(value); }
    }
    public Builder SetP2Coordz(double value) {
      PrepareBuilder();
      result.hasP2Coordz = true;
      result.p2Coordz_ = value;
      return this;
    }
    public Builder ClearP2Coordz() {
      PrepareBuilder();
      result.hasP2Coordz = false;
      result.p2Coordz_ = 0D;
      return this;
    }
    
    public bool HasP3Coordx {
      get { return result.hasP3Coordx; }
    }
    public double P3Coordx {
      get { return result.P3Coordx; }
      set { SetP3Coordx(value); }
    }
    public Builder SetP3Coordx(double value) {
      PrepareBuilder();
      result.hasP3Coordx = true;
      result.p3Coordx_ = value;
      return this;
    }
    public Builder ClearP3Coordx() {
      PrepareBuilder();
      result.hasP3Coordx = false;
      result.p3Coordx_ = 0D;
      return this;
    }
    
    public bool HasP3Coordy {
      get { return result.hasP3Coordy; }
    }
    public double P3Coordy {
      get { return result.P3Coordy; }
      set { SetP3Coordy(value); }
    }
    public Builder SetP3Coordy(double value) {
      PrepareBuilder();
      result.hasP3Coordy = true;
      result.p3Coordy_ = value;
      return this;
    }
    public Builder ClearP3Coordy() {
      PrepareBuilder();
      result.hasP3Coordy = false;
      result.p3Coordy_ = 0D;
      return this;
    }
    
    public bool HasP3Coordz {
      get { return result.hasP3Coordz; }
    }
    public double P3Coordz {
      get { return result.P3Coordz; }
      set { SetP3Coordz(value); }
    }
    public Builder SetP3Coordz(double value) {
      PrepareBuilder();
      result.hasP3Coordz = true;
      result.p3Coordz_ = value;
      return this;
    }
    public Builder ClearP3Coordz() {
      PrepareBuilder();
      result.hasP3Coordz = false;
      result.p3Coordz_ = 0D;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
  }
  static boxstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class cylinderstrc : pb::GeneratedMessage<cylinderstrc, cylinderstrc.Builder> {
  private cylinderstrc() { }
  private static readonly cylinderstrc defaultInstance = new cylinderstrc().MakeReadOnly();
  private static readonly string[] _cylinderstrcFieldNames = new string[] { "height", "p0coordx", "p0coordy", "p0coordz", "radius" };
  private static readonly uint[] _cylinderstrcFieldTags = new uint[] { 41, 9, 17, 25, 33 };
  public static cylinderstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override cylinderstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override cylinderstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_cylinderstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<cylinderstrc, cylinderstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_cylinderstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int RadiusFieldNumber = 4;
  private bool hasRadius;
  private double radius_;
  public bool HasRadius {
    get { return hasRadius; }
  }
  public double Radius {
    get { return radius_; }
  }
  
  public const int HeightFieldNumber = 5;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasRadius) return false;
      if (!hasHeight) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cylinderstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasRadius) {
      output.WriteDouble(4, field_names[4], Radius);
    }
    if (hasHeight) {
      output.WriteDouble(5, field_names[0], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasRadius) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Radius);
    }
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, Height);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static cylinderstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static cylinderstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static cylinderstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static cylinderstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static cylinderstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private cylinderstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(cylinderstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<cylinderstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(cylinderstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private cylinderstrc result;
    
    private cylinderstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        cylinderstrc original = result;
        result = new cylinderstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override cylinderstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::cylinderstrc.Descriptor; }
    }
    
    public override cylinderstrc DefaultInstanceForType {
      get { return global::cylinderstrc.DefaultInstance; }
    }
    
    public override cylinderstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is cylinderstrc) {
        return MergeFrom((cylinderstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(cylinderstrc other) {
      if (other == global::cylinderstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cylinderstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cylinderstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasRadius = input.ReadDouble(ref result.radius_);
            break;
          }
          case 41: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasRadius {
      get { return result.hasRadius; }
    }
    public double Radius {
      get { return result.Radius; }
      set { SetRadius(value); }
    }
    public Builder SetRadius(double value) {
      PrepareBuilder();
      result.hasRadius = true;
      result.radius_ = value;
      return this;
    }
    public Builder ClearRadius() {
      PrepareBuilder();
      result.hasRadius = false;
      result.radius_ = 0D;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
  }
  static cylinderstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class cylinderbstrc : pb::GeneratedMessage<cylinderbstrc, cylinderbstrc.Builder> {
  private cylinderbstrc() { }
  private static readonly cylinderbstrc defaultInstance = new cylinderbstrc().MakeReadOnly();
  private static readonly string[] _cylinderbstrcFieldNames = new string[] { "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "radius" };
  private static readonly uint[] _cylinderbstrcFieldTags = new uint[] { 9, 17, 25, 41, 49, 57, 33 };
  public static cylinderbstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override cylinderbstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override cylinderbstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_cylinderbstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<cylinderbstrc, cylinderbstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_cylinderbstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int RadiusFieldNumber = 4;
  private bool hasRadius;
  private double radius_;
  public bool HasRadius {
    get { return hasRadius; }
  }
  public double Radius {
    get { return radius_; }
  }
  
  public const int P1CoordxFieldNumber = 5;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 6;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 7;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasRadius) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cylinderbstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[0], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[1], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[2], P0Coordz);
    }
    if (hasRadius) {
      output.WriteDouble(4, field_names[6], Radius);
    }
    if (hasP1Coordx) {
      output.WriteDouble(5, field_names[3], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(6, field_names[4], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(7, field_names[5], P1Coordz);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasRadius) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Radius);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, P1Coordz);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static cylinderbstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static cylinderbstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static cylinderbstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static cylinderbstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private cylinderbstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(cylinderbstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<cylinderbstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(cylinderbstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private cylinderbstrc result;
    
    private cylinderbstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        cylinderbstrc original = result;
        result = new cylinderbstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override cylinderbstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::cylinderbstrc.Descriptor; }
    }
    
    public override cylinderbstrc DefaultInstanceForType {
      get { return global::cylinderbstrc.DefaultInstance; }
    }
    
    public override cylinderbstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is cylinderbstrc) {
        return MergeFrom((cylinderbstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(cylinderbstrc other) {
      if (other == global::cylinderbstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cylinderbstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cylinderbstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasRadius = input.ReadDouble(ref result.radius_);
            break;
          }
          case 41: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 49: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 57: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasRadius {
      get { return result.hasRadius; }
    }
    public double Radius {
      get { return result.Radius; }
      set { SetRadius(value); }
    }
    public Builder SetRadius(double value) {
      PrepareBuilder();
      result.hasRadius = true;
      result.radius_ = value;
      return this;
    }
    public Builder ClearRadius() {
      PrepareBuilder();
      result.hasRadius = false;
      result.radius_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
  }
  static cylinderbstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class spherestrc : pb::GeneratedMessage<spherestrc, spherestrc.Builder> {
  private spherestrc() { }
  private static readonly spherestrc defaultInstance = new spherestrc().MakeReadOnly();
  private static readonly string[] _spherestrcFieldNames = new string[] { "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "p2coordx", "p2coordy", "p2coordz" };
  private static readonly uint[] _spherestrcFieldTags = new uint[] { 9, 17, 25, 33, 41, 49, 57, 65, 73 };
  public static spherestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override spherestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override spherestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_spherestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<spherestrc, spherestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_spherestrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int P2CoordxFieldNumber = 7;
  private bool hasP2Coordx;
  private double p2Coordx_;
  public bool HasP2Coordx {
    get { return hasP2Coordx; }
  }
  public double P2Coordx {
    get { return p2Coordx_; }
  }
  
  public const int P2CoordyFieldNumber = 8;
  private bool hasP2Coordy;
  private double p2Coordy_;
  public bool HasP2Coordy {
    get { return hasP2Coordy; }
  }
  public double P2Coordy {
    get { return p2Coordy_; }
  }
  
  public const int P2CoordzFieldNumber = 9;
  private bool hasP2Coordz;
  private double p2Coordz_;
  public bool HasP2Coordz {
    get { return hasP2Coordz; }
  }
  public double P2Coordz {
    get { return p2Coordz_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasP2Coordx) return false;
      if (!hasP2Coordy) return false;
      if (!hasP2Coordz) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _spherestrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[0], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[1], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[2], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[3], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[4], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[5], P1Coordz);
    }
    if (hasP2Coordx) {
      output.WriteDouble(7, field_names[6], P2Coordx);
    }
    if (hasP2Coordy) {
      output.WriteDouble(8, field_names[7], P2Coordy);
    }
    if (hasP2Coordz) {
      output.WriteDouble(9, field_names[8], P2Coordz);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasP2Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, P2Coordx);
    }
    if (hasP2Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, P2Coordy);
    }
    if (hasP2Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, P2Coordz);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static spherestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static spherestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static spherestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static spherestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static spherestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static spherestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static spherestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static spherestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static spherestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static spherestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private spherestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(spherestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<spherestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(spherestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private spherestrc result;
    
    private spherestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        spherestrc original = result;
        result = new spherestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override spherestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::spherestrc.Descriptor; }
    }
    
    public override spherestrc DefaultInstanceForType {
      get { return global::spherestrc.DefaultInstance; }
    }
    
    public override spherestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is spherestrc) {
        return MergeFrom((spherestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(spherestrc other) {
      if (other == global::spherestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasP2Coordx) {
        P2Coordx = other.P2Coordx;
      }
      if (other.HasP2Coordy) {
        P2Coordy = other.P2Coordy;
      }
      if (other.HasP2Coordz) {
        P2Coordz = other.P2Coordz;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_spherestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _spherestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 57: {
            result.hasP2Coordx = input.ReadDouble(ref result.p2Coordx_);
            break;
          }
          case 65: {
            result.hasP2Coordy = input.ReadDouble(ref result.p2Coordy_);
            break;
          }
          case 73: {
            result.hasP2Coordz = input.ReadDouble(ref result.p2Coordz_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasP2Coordx {
      get { return result.hasP2Coordx; }
    }
    public double P2Coordx {
      get { return result.P2Coordx; }
      set { SetP2Coordx(value); }
    }
    public Builder SetP2Coordx(double value) {
      PrepareBuilder();
      result.hasP2Coordx = true;
      result.p2Coordx_ = value;
      return this;
    }
    public Builder ClearP2Coordx() {
      PrepareBuilder();
      result.hasP2Coordx = false;
      result.p2Coordx_ = 0D;
      return this;
    }
    
    public bool HasP2Coordy {
      get { return result.hasP2Coordy; }
    }
    public double P2Coordy {
      get { return result.P2Coordy; }
      set { SetP2Coordy(value); }
    }
    public Builder SetP2Coordy(double value) {
      PrepareBuilder();
      result.hasP2Coordy = true;
      result.p2Coordy_ = value;
      return this;
    }
    public Builder ClearP2Coordy() {
      PrepareBuilder();
      result.hasP2Coordy = false;
      result.p2Coordy_ = 0D;
      return this;
    }
    
    public bool HasP2Coordz {
      get { return result.hasP2Coordz; }
    }
    public double P2Coordz {
      get { return result.P2Coordz; }
      set { SetP2Coordz(value); }
    }
    public Builder SetP2Coordz(double value) {
      PrepareBuilder();
      result.hasP2Coordz = true;
      result.p2Coordz_ = value;
      return this;
    }
    public Builder ClearP2Coordz() {
      PrepareBuilder();
      result.hasP2Coordz = false;
      result.p2Coordz_ = 0D;
      return this;
    }
  }
  static spherestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class familyelementstrc : pb::GeneratedMessage<familyelementstrc, familyelementstrc.Builder> {
  private familyelementstrc() { }
  private static readonly familyelementstrc defaultInstance = new familyelementstrc().MakeReadOnly();
  private static readonly string[] _familyelementstrcFieldNames = new string[] { "familyid", "flag", "names", "values" };
  private static readonly uint[] _familyelementstrcFieldTags = new uint[] { 10, 16, 26, 33 };
  public static familyelementstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override familyelementstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override familyelementstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_familyelementstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<familyelementstrc, familyelementstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_familyelementstrc__FieldAccessorTable; }
  }
  
  public const int FamilyidFieldNumber = 1;
  private bool hasFamilyid;
  private global::idstrc familyid_;
  public bool HasFamilyid {
    get { return hasFamilyid; }
  }
  public global::idstrc Familyid {
    get { return familyid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int FlagFieldNumber = 2;
  private bool hasFlag;
  private bool flag_;
  public bool HasFlag {
    get { return hasFlag; }
  }
  public bool Flag {
    get { return flag_; }
  }
  
  public const int NamesFieldNumber = 3;
  private pbc::PopsicleList<string> names_ = new pbc::PopsicleList<string>();
  public scg::IList<string> NamesList {
    get { return pbc::Lists.AsReadOnly(names_); }
  }
  public int NamesCount {
    get { return names_.Count; }
  }
  public string GetNames(int index) {
    return names_[index];
  }
  
  public const int ValuesFieldNumber = 4;
  private pbc::PopsicleList<double> values_ = new pbc::PopsicleList<double>();
  public scg::IList<double> ValuesList {
    get { return pbc::Lists.AsReadOnly(values_); }
  }
  public int ValuesCount {
    get { return values_.Count; }
  }
  public double GetValues(int index) {
    return values_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFamilyid) return false;
      if (!hasFlag) return false;
      if (!Familyid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _familyelementstrcFieldNames;
    if (hasFamilyid) {
      output.WriteMessage(1, field_names[0], Familyid);
    }
    if (hasFlag) {
      output.WriteBool(2, field_names[1], Flag);
    }
    if (names_.Count > 0) {
      output.WriteStringArray(3, field_names[2], names_);
    }
    if (values_.Count > 0) {
      output.WriteDoubleArray(4, field_names[3], values_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFamilyid) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Familyid);
    }
    if (hasFlag) {
      size += pb::CodedOutputStream.ComputeBoolSize(2, Flag);
    }
    {
      int dataSize = 0;
      foreach (string element in NamesList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * names_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 8 * values_.Count;
      size += dataSize;
      size += 1 * values_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static familyelementstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static familyelementstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static familyelementstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static familyelementstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static familyelementstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private familyelementstrc MakeReadOnly() {
    names_.MakeReadOnly();
    values_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(familyelementstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<familyelementstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(familyelementstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private familyelementstrc result;
    
    private familyelementstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        familyelementstrc original = result;
        result = new familyelementstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override familyelementstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::familyelementstrc.Descriptor; }
    }
    
    public override familyelementstrc DefaultInstanceForType {
      get { return global::familyelementstrc.DefaultInstance; }
    }
    
    public override familyelementstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is familyelementstrc) {
        return MergeFrom((familyelementstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(familyelementstrc other) {
      if (other == global::familyelementstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFamilyid) {
        MergeFamilyid(other.Familyid);
      }
      if (other.HasFlag) {
        Flag = other.Flag;
      }
      if (other.names_.Count != 0) {
        result.names_.Add(other.names_);
      }
      if (other.values_.Count != 0) {
        result.values_.Add(other.values_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_familyelementstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _familyelementstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamilyid) {
              subBuilder.MergeFrom(Familyid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Familyid = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasFlag = input.ReadBool(ref result.flag_);
            break;
          }
          case 26: {
            input.ReadStringArray(tag, field_name, result.names_);
            break;
          }
          case 34:
          case 33: {
            input.ReadDoubleArray(tag, field_name, result.values_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFamilyid {
     get { return result.hasFamilyid; }
    }
    public global::idstrc Familyid {
      get { return result.Familyid; }
      set { SetFamilyid(value); }
    }
    public Builder SetFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = value;
      return this;
    }
    public Builder SetFamilyid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamilyid &&
          result.familyid_ != global::idstrc.DefaultInstance) {
          result.familyid_ = global::idstrc.CreateBuilder(result.familyid_).MergeFrom(value).BuildPartial();
      } else {
        result.familyid_ = value;
      }
      result.hasFamilyid = true;
      return this;
    }
    public Builder ClearFamilyid() {
      PrepareBuilder();
      result.hasFamilyid = false;
      result.familyid_ = null;
      return this;
    }
    
    public bool HasFlag {
      get { return result.hasFlag; }
    }
    public bool Flag {
      get { return result.Flag; }
      set { SetFlag(value); }
    }
    public Builder SetFlag(bool value) {
      PrepareBuilder();
      result.hasFlag = true;
      result.flag_ = value;
      return this;
    }
    public Builder ClearFlag() {
      PrepareBuilder();
      result.hasFlag = false;
      result.flag_ = false;
      return this;
    }
    
    public pbc::IPopsicleList<string> NamesList {
      get { return PrepareBuilder().names_; }
    }
    public int NamesCount {
      get { return result.NamesCount; }
    }
    public string GetNames(int index) {
      return result.GetNames(index);
    }
    public Builder SetNames(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.names_[index] = value;
      return this;
    }
    public Builder AddNames(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.names_.Add(value);
      return this;
    }
    public Builder AddRangeNames(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.names_.Add(values);
      return this;
    }
    public Builder ClearNames() {
      PrepareBuilder();
      result.names_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<double> ValuesList {
      get { return PrepareBuilder().values_; }
    }
    public int ValuesCount {
      get { return result.ValuesCount; }
    }
    public double GetValues(int index) {
      return result.GetValues(index);
    }
    public Builder SetValues(int index, double value) {
      PrepareBuilder();
      result.values_[index] = value;
      return this;
    }
    public Builder AddValues(double value) {
      PrepareBuilder();
      result.values_.Add(value);
      return this;
    }
    public Builder AddRangeValues(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.values_.Add(values);
      return this;
    }
    public Builder ClearValues() {
      PrepareBuilder();
      result.values_.Clear();
      return this;
    }
  }
  static familyelementstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class wallstrc : pb::GeneratedMessage<wallstrc, wallstrc.Builder> {
  private wallstrc() { }
  private static readonly wallstrc defaultInstance = new wallstrc().MakeReadOnly();
  private static readonly string[] _wallstrcFieldNames = new string[] { "level", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _wallstrcFieldTags = new uint[] { 58, 9, 17, 25, 33, 41, 49 };
  public static wallstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override wallstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override wallstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_wallstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<wallstrc, wallstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_wallstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int LevelFieldNumber = 7;
  private bool hasLevel;
  private global::idstrc level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public global::idstrc Level {
    get { return level_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasLevel) return false;
      if (!Level.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _wallstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (hasLevel) {
      output.WriteMessage(7, field_names[0], Level);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Level);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static wallstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static wallstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static wallstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static wallstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private wallstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(wallstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<wallstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(wallstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private wallstrc result;
    
    private wallstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        wallstrc original = result;
        result = new wallstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override wallstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::wallstrc.Descriptor; }
    }
    
    public override wallstrc DefaultInstanceForType {
      get { return global::wallstrc.DefaultInstance; }
    }
    
    public override wallstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is wallstrc) {
        return MergeFrom((wallstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(wallstrc other) {
      if (other == global::wallstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasLevel) {
        MergeLevel(other.Level);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_wallstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _wallstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevel) {
              subBuilder.MergeFrom(Level);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Level = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasLevel {
     get { return result.hasLevel; }
    }
    public global::idstrc Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder SetLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevel &&
          result.level_ != global::idstrc.DefaultInstance) {
          result.level_ = global::idstrc.CreateBuilder(result.level_).MergeFrom(value).BuildPartial();
      } else {
        result.level_ = value;
      }
      result.hasLevel = true;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = null;
      return this;
    }
  }
  static wallstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class wallheightstrc : pb::GeneratedMessage<wallheightstrc, wallheightstrc.Builder> {
  private wallheightstrc() { }
  private static readonly wallheightstrc defaultInstance = new wallheightstrc().MakeReadOnly();
  private static readonly string[] _wallheightstrcFieldNames = new string[] { "height", "level", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _wallheightstrcFieldTags = new uint[] { 57, 66, 9, 17, 25, 33, 41, 49 };
  public static wallheightstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override wallheightstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override wallheightstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_wallheightstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<wallheightstrc, wallheightstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_wallheightstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int HeightFieldNumber = 7;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public const int LevelFieldNumber = 8;
  private bool hasLevel;
  private global::idstrc level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public global::idstrc Level {
    get { return level_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasHeight) return false;
      if (!hasLevel) return false;
      if (!Level.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _wallheightstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[4], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[5], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[6], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[7], P1Coordz);
    }
    if (hasHeight) {
      output.WriteDouble(7, field_names[0], Height);
    }
    if (hasLevel) {
      output.WriteMessage(8, field_names[1], Level);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Height);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, Level);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static wallheightstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static wallheightstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static wallheightstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static wallheightstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallheightstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private wallheightstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(wallheightstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<wallheightstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(wallheightstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private wallheightstrc result;
    
    private wallheightstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        wallheightstrc original = result;
        result = new wallheightstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override wallheightstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::wallheightstrc.Descriptor; }
    }
    
    public override wallheightstrc DefaultInstanceForType {
      get { return global::wallheightstrc.DefaultInstance; }
    }
    
    public override wallheightstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is wallheightstrc) {
        return MergeFrom((wallheightstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(wallheightstrc other) {
      if (other == global::wallheightstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLevel) {
        MergeLevel(other.Level);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_wallheightstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _wallheightstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 57: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
          case 66: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevel) {
              subBuilder.MergeFrom(Level);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Level = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
    
    public bool HasLevel {
     get { return result.hasLevel; }
    }
    public global::idstrc Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder SetLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevel &&
          result.level_ != global::idstrc.DefaultInstance) {
          result.level_ = global::idstrc.CreateBuilder(result.level_).MergeFrom(value).BuildPartial();
      } else {
        result.level_ = value;
      }
      result.hasLevel = true;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = null;
      return this;
    }
  }
  static wallheightstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class walllevelstrc : pb::GeneratedMessage<walllevelstrc, walllevelstrc.Builder> {
  private walllevelstrc() { }
  private static readonly walllevelstrc defaultInstance = new walllevelstrc().MakeReadOnly();
  private static readonly string[] _walllevelstrcFieldNames = new string[] { "levelb", "levelt", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _walllevelstrcFieldTags = new uint[] { 58, 66, 9, 17, 25, 33, 41, 49 };
  public static walllevelstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override walllevelstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override walllevelstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_walllevelstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<walllevelstrc, walllevelstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_walllevelstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int LevelbFieldNumber = 7;
  private bool hasLevelb;
  private global::idstrc levelb_;
  public bool HasLevelb {
    get { return hasLevelb; }
  }
  public global::idstrc Levelb {
    get { return levelb_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int LeveltFieldNumber = 8;
  private bool hasLevelt;
  private global::idstrc levelt_;
  public bool HasLevelt {
    get { return hasLevelt; }
  }
  public global::idstrc Levelt {
    get { return levelt_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasLevelb) return false;
      if (!hasLevelt) return false;
      if (!Levelb.IsInitialized) return false;
      if (!Levelt.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _walllevelstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[4], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[5], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[6], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[7], P1Coordz);
    }
    if (hasLevelb) {
      output.WriteMessage(7, field_names[0], Levelb);
    }
    if (hasLevelt) {
      output.WriteMessage(8, field_names[1], Levelt);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasLevelb) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Levelb);
    }
    if (hasLevelt) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, Levelt);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static walllevelstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static walllevelstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static walllevelstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static walllevelstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static walllevelstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private walllevelstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(walllevelstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<walllevelstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(walllevelstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private walllevelstrc result;
    
    private walllevelstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        walllevelstrc original = result;
        result = new walllevelstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override walllevelstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::walllevelstrc.Descriptor; }
    }
    
    public override walllevelstrc DefaultInstanceForType {
      get { return global::walllevelstrc.DefaultInstance; }
    }
    
    public override walllevelstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is walllevelstrc) {
        return MergeFrom((walllevelstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(walllevelstrc other) {
      if (other == global::walllevelstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasLevelb) {
        MergeLevelb(other.Levelb);
      }
      if (other.HasLevelt) {
        MergeLevelt(other.Levelt);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_walllevelstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _walllevelstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelb) {
              subBuilder.MergeFrom(Levelb);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Levelb = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelt) {
              subBuilder.MergeFrom(Levelt);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Levelt = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasLevelb {
     get { return result.hasLevelb; }
    }
    public global::idstrc Levelb {
      get { return result.Levelb; }
      set { SetLevelb(value); }
    }
    public Builder SetLevelb(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelb = true;
      result.levelb_ = value;
      return this;
    }
    public Builder SetLevelb(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelb = true;
      result.levelb_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelb(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelb &&
          result.levelb_ != global::idstrc.DefaultInstance) {
          result.levelb_ = global::idstrc.CreateBuilder(result.levelb_).MergeFrom(value).BuildPartial();
      } else {
        result.levelb_ = value;
      }
      result.hasLevelb = true;
      return this;
    }
    public Builder ClearLevelb() {
      PrepareBuilder();
      result.hasLevelb = false;
      result.levelb_ = null;
      return this;
    }
    
    public bool HasLevelt {
     get { return result.hasLevelt; }
    }
    public global::idstrc Levelt {
      get { return result.Levelt; }
      set { SetLevelt(value); }
    }
    public Builder SetLevelt(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelt = true;
      result.levelt_ = value;
      return this;
    }
    public Builder SetLevelt(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelt = true;
      result.levelt_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelt(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelt &&
          result.levelt_ != global::idstrc.DefaultInstance) {
          result.levelt_ = global::idstrc.CreateBuilder(result.levelt_).MergeFrom(value).BuildPartial();
      } else {
        result.levelt_ = value;
      }
      result.hasLevelt = true;
      return this;
    }
    public Builder ClearLevelt() {
      PrepareBuilder();
      result.hasLevelt = false;
      result.levelt_ = null;
      return this;
    }
  }
  static walllevelstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class polywallstrc : pb::GeneratedMessage<polywallstrc, polywallstrc.Builder> {
  private polywallstrc() { }
  private static readonly polywallstrc defaultInstance = new polywallstrc().MakeReadOnly();
  private static readonly string[] _polywallstrcFieldNames = new string[] { "familyid", "levelb", "levelt", "pts" };
  private static readonly uint[] _polywallstrcFieldTags = new uint[] { 34, 18, 26, 9 };
  public static polywallstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override polywallstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override polywallstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_polywallstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<polywallstrc, polywallstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_polywallstrc__FieldAccessorTable; }
  }
  
  public const int PtsFieldNumber = 1;
  private pbc::PopsicleList<double> pts_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PtsList {
    get { return pbc::Lists.AsReadOnly(pts_); }
  }
  public int PtsCount {
    get { return pts_.Count; }
  }
  public double GetPts(int index) {
    return pts_[index];
  }
  
  public const int LevelbFieldNumber = 2;
  private bool hasLevelb;
  private global::idstrc levelb_;
  public bool HasLevelb {
    get { return hasLevelb; }
  }
  public global::idstrc Levelb {
    get { return levelb_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int LeveltFieldNumber = 3;
  private bool hasLevelt;
  private global::idstrc levelt_;
  public bool HasLevelt {
    get { return hasLevelt; }
  }
  public global::idstrc Levelt {
    get { return levelt_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int FamilyidFieldNumber = 4;
  private bool hasFamilyid;
  private global::idstrc familyid_;
  public bool HasFamilyid {
    get { return hasFamilyid; }
  }
  public global::idstrc Familyid {
    get { return familyid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasLevelb) return false;
      if (!hasLevelt) return false;
      if (!hasFamilyid) return false;
      if (!Levelb.IsInitialized) return false;
      if (!Levelt.IsInitialized) return false;
      if (!Familyid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _polywallstrcFieldNames;
    if (pts_.Count > 0) {
      output.WriteDoubleArray(1, field_names[3], pts_);
    }
    if (hasLevelb) {
      output.WriteMessage(2, field_names[1], Levelb);
    }
    if (hasLevelt) {
      output.WriteMessage(3, field_names[2], Levelt);
    }
    if (hasFamilyid) {
      output.WriteMessage(4, field_names[0], Familyid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * pts_.Count;
      size += dataSize;
      size += 1 * pts_.Count;
    }
    if (hasLevelb) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Levelb);
    }
    if (hasLevelt) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, Levelt);
    }
    if (hasFamilyid) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Familyid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static polywallstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polywallstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polywallstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polywallstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polywallstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polywallstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static polywallstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static polywallstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static polywallstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polywallstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private polywallstrc MakeReadOnly() {
    pts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(polywallstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<polywallstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(polywallstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private polywallstrc result;
    
    private polywallstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        polywallstrc original = result;
        result = new polywallstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override polywallstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::polywallstrc.Descriptor; }
    }
    
    public override polywallstrc DefaultInstanceForType {
      get { return global::polywallstrc.DefaultInstance; }
    }
    
    public override polywallstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is polywallstrc) {
        return MergeFrom((polywallstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(polywallstrc other) {
      if (other == global::polywallstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.pts_.Count != 0) {
        result.pts_.Add(other.pts_);
      }
      if (other.HasLevelb) {
        MergeLevelb(other.Levelb);
      }
      if (other.HasLevelt) {
        MergeLevelt(other.Levelt);
      }
      if (other.HasFamilyid) {
        MergeFamilyid(other.Familyid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_polywallstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _polywallstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.pts_);
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelb) {
              subBuilder.MergeFrom(Levelb);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Levelb = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelt) {
              subBuilder.MergeFrom(Levelt);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Levelt = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamilyid) {
              subBuilder.MergeFrom(Familyid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Familyid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> PtsList {
      get { return PrepareBuilder().pts_; }
    }
    public int PtsCount {
      get { return result.PtsCount; }
    }
    public double GetPts(int index) {
      return result.GetPts(index);
    }
    public Builder SetPts(int index, double value) {
      PrepareBuilder();
      result.pts_[index] = value;
      return this;
    }
    public Builder AddPts(double value) {
      PrepareBuilder();
      result.pts_.Add(value);
      return this;
    }
    public Builder AddRangePts(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.pts_.Add(values);
      return this;
    }
    public Builder ClearPts() {
      PrepareBuilder();
      result.pts_.Clear();
      return this;
    }
    
    public bool HasLevelb {
     get { return result.hasLevelb; }
    }
    public global::idstrc Levelb {
      get { return result.Levelb; }
      set { SetLevelb(value); }
    }
    public Builder SetLevelb(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelb = true;
      result.levelb_ = value;
      return this;
    }
    public Builder SetLevelb(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelb = true;
      result.levelb_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelb(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelb &&
          result.levelb_ != global::idstrc.DefaultInstance) {
          result.levelb_ = global::idstrc.CreateBuilder(result.levelb_).MergeFrom(value).BuildPartial();
      } else {
        result.levelb_ = value;
      }
      result.hasLevelb = true;
      return this;
    }
    public Builder ClearLevelb() {
      PrepareBuilder();
      result.hasLevelb = false;
      result.levelb_ = null;
      return this;
    }
    
    public bool HasLevelt {
     get { return result.hasLevelt; }
    }
    public global::idstrc Levelt {
      get { return result.Levelt; }
      set { SetLevelt(value); }
    }
    public Builder SetLevelt(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelt = true;
      result.levelt_ = value;
      return this;
    }
    public Builder SetLevelt(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelt = true;
      result.levelt_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelt(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelt &&
          result.levelt_ != global::idstrc.DefaultInstance) {
          result.levelt_ = global::idstrc.CreateBuilder(result.levelt_).MergeFrom(value).BuildPartial();
      } else {
        result.levelt_ = value;
      }
      result.hasLevelt = true;
      return this;
    }
    public Builder ClearLevelt() {
      PrepareBuilder();
      result.hasLevelt = false;
      result.levelt_ = null;
      return this;
    }
    
    public bool HasFamilyid {
     get { return result.hasFamilyid; }
    }
    public global::idstrc Familyid {
      get { return result.Familyid; }
      set { SetFamilyid(value); }
    }
    public Builder SetFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = value;
      return this;
    }
    public Builder SetFamilyid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamilyid &&
          result.familyid_ != global::idstrc.DefaultInstance) {
          result.familyid_ = global::idstrc.CreateBuilder(result.familyid_).MergeFrom(value).BuildPartial();
      } else {
        result.familyid_ = value;
      }
      result.hasFamilyid = true;
      return this;
    }
    public Builder ClearFamilyid() {
      PrepareBuilder();
      result.hasFamilyid = false;
      result.familyid_ = null;
      return this;
    }
  }
  static polywallstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class curtainwallstrc : pb::GeneratedMessage<curtainwallstrc, curtainwallstrc.Builder> {
  private curtainwallstrc() { }
  private static readonly curtainwallstrc defaultInstance = new curtainwallstrc().MakeReadOnly();
  private static readonly string[] _curtainwallstrcFieldNames = new string[] { "baselevel", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "toplevel", "ulinecoord", "vlinecoord" };
  private static readonly uint[] _curtainwallstrcFieldTags = new uint[] { 74, 9, 17, 25, 33, 41, 49, 82, 57, 65 };
  public static curtainwallstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override curtainwallstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override curtainwallstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_curtainwallstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<curtainwallstrc, curtainwallstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_curtainwallstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int UlinecoordFieldNumber = 7;
  private pbc::PopsicleList<double> ulinecoord_ = new pbc::PopsicleList<double>();
  public scg::IList<double> UlinecoordList {
    get { return pbc::Lists.AsReadOnly(ulinecoord_); }
  }
  public int UlinecoordCount {
    get { return ulinecoord_.Count; }
  }
  public double GetUlinecoord(int index) {
    return ulinecoord_[index];
  }
  
  public const int VlinecoordFieldNumber = 8;
  private pbc::PopsicleList<double> vlinecoord_ = new pbc::PopsicleList<double>();
  public scg::IList<double> VlinecoordList {
    get { return pbc::Lists.AsReadOnly(vlinecoord_); }
  }
  public int VlinecoordCount {
    get { return vlinecoord_.Count; }
  }
  public double GetVlinecoord(int index) {
    return vlinecoord_[index];
  }
  
  public const int BaselevelFieldNumber = 9;
  private bool hasBaselevel;
  private global::idstrc baselevel_;
  public bool HasBaselevel {
    get { return hasBaselevel; }
  }
  public global::idstrc Baselevel {
    get { return baselevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int ToplevelFieldNumber = 10;
  private bool hasToplevel;
  private global::idstrc toplevel_;
  public bool HasToplevel {
    get { return hasToplevel; }
  }
  public global::idstrc Toplevel {
    get { return toplevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasBaselevel) return false;
      if (!hasToplevel) return false;
      if (!Baselevel.IsInitialized) return false;
      if (!Toplevel.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _curtainwallstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (ulinecoord_.Count > 0) {
      output.WriteDoubleArray(7, field_names[8], ulinecoord_);
    }
    if (vlinecoord_.Count > 0) {
      output.WriteDoubleArray(8, field_names[9], vlinecoord_);
    }
    if (hasBaselevel) {
      output.WriteMessage(9, field_names[0], Baselevel);
    }
    if (hasToplevel) {
      output.WriteMessage(10, field_names[7], Toplevel);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    {
      int dataSize = 0;
      dataSize = 8 * ulinecoord_.Count;
      size += dataSize;
      size += 1 * ulinecoord_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 8 * vlinecoord_.Count;
      size += dataSize;
      size += 1 * vlinecoord_.Count;
    }
    if (hasBaselevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, Baselevel);
    }
    if (hasToplevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, Toplevel);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static curtainwallstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static curtainwallstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static curtainwallstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static curtainwallstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private curtainwallstrc MakeReadOnly() {
    ulinecoord_.MakeReadOnly();
    vlinecoord_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(curtainwallstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<curtainwallstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(curtainwallstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private curtainwallstrc result;
    
    private curtainwallstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        curtainwallstrc original = result;
        result = new curtainwallstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override curtainwallstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::curtainwallstrc.Descriptor; }
    }
    
    public override curtainwallstrc DefaultInstanceForType {
      get { return global::curtainwallstrc.DefaultInstance; }
    }
    
    public override curtainwallstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is curtainwallstrc) {
        return MergeFrom((curtainwallstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(curtainwallstrc other) {
      if (other == global::curtainwallstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.ulinecoord_.Count != 0) {
        result.ulinecoord_.Add(other.ulinecoord_);
      }
      if (other.vlinecoord_.Count != 0) {
        result.vlinecoord_.Add(other.vlinecoord_);
      }
      if (other.HasBaselevel) {
        MergeBaselevel(other.Baselevel);
      }
      if (other.HasToplevel) {
        MergeToplevel(other.Toplevel);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_curtainwallstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _curtainwallstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58:
          case 57: {
            input.ReadDoubleArray(tag, field_name, result.ulinecoord_);
            break;
          }
          case 66:
          case 65: {
            input.ReadDoubleArray(tag, field_name, result.vlinecoord_);
            break;
          }
          case 74: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBaselevel) {
              subBuilder.MergeFrom(Baselevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Baselevel = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasToplevel) {
              subBuilder.MergeFrom(Toplevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Toplevel = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public pbc::IPopsicleList<double> UlinecoordList {
      get { return PrepareBuilder().ulinecoord_; }
    }
    public int UlinecoordCount {
      get { return result.UlinecoordCount; }
    }
    public double GetUlinecoord(int index) {
      return result.GetUlinecoord(index);
    }
    public Builder SetUlinecoord(int index, double value) {
      PrepareBuilder();
      result.ulinecoord_[index] = value;
      return this;
    }
    public Builder AddUlinecoord(double value) {
      PrepareBuilder();
      result.ulinecoord_.Add(value);
      return this;
    }
    public Builder AddRangeUlinecoord(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.ulinecoord_.Add(values);
      return this;
    }
    public Builder ClearUlinecoord() {
      PrepareBuilder();
      result.ulinecoord_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<double> VlinecoordList {
      get { return PrepareBuilder().vlinecoord_; }
    }
    public int VlinecoordCount {
      get { return result.VlinecoordCount; }
    }
    public double GetVlinecoord(int index) {
      return result.GetVlinecoord(index);
    }
    public Builder SetVlinecoord(int index, double value) {
      PrepareBuilder();
      result.vlinecoord_[index] = value;
      return this;
    }
    public Builder AddVlinecoord(double value) {
      PrepareBuilder();
      result.vlinecoord_.Add(value);
      return this;
    }
    public Builder AddRangeVlinecoord(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.vlinecoord_.Add(values);
      return this;
    }
    public Builder ClearVlinecoord() {
      PrepareBuilder();
      result.vlinecoord_.Clear();
      return this;
    }
    
    public bool HasBaselevel {
     get { return result.hasBaselevel; }
    }
    public global::idstrc Baselevel {
      get { return result.Baselevel; }
      set { SetBaselevel(value); }
    }
    public Builder SetBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = value;
      return this;
    }
    public Builder SetBaselevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBaselevel &&
          result.baselevel_ != global::idstrc.DefaultInstance) {
          result.baselevel_ = global::idstrc.CreateBuilder(result.baselevel_).MergeFrom(value).BuildPartial();
      } else {
        result.baselevel_ = value;
      }
      result.hasBaselevel = true;
      return this;
    }
    public Builder ClearBaselevel() {
      PrepareBuilder();
      result.hasBaselevel = false;
      result.baselevel_ = null;
      return this;
    }
    
    public bool HasToplevel {
     get { return result.hasToplevel; }
    }
    public global::idstrc Toplevel {
      get { return result.Toplevel; }
      set { SetToplevel(value); }
    }
    public Builder SetToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = value;
      return this;
    }
    public Builder SetToplevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasToplevel &&
          result.toplevel_ != global::idstrc.DefaultInstance) {
          result.toplevel_ = global::idstrc.CreateBuilder(result.toplevel_).MergeFrom(value).BuildPartial();
      } else {
        result.toplevel_ = value;
      }
      result.hasToplevel = true;
      return this;
    }
    public Builder ClearToplevel() {
      PrepareBuilder();
      result.hasToplevel = false;
      result.toplevel_ = null;
      return this;
    }
  }
  static curtainwallstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class wallinfostrc : pb::GeneratedMessage<wallinfostrc, wallinfostrc.Builder> {
  private wallinfostrc() { }
  private static readonly wallinfostrc defaultInstance = new wallinfostrc().MakeReadOnly();
  private static readonly string[] _wallinfostrcFieldNames = new string[] { "baseelevation", "baselevelname", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "topelevation", "toplevelname", "walltype" };
  private static readonly uint[] _wallinfostrcFieldTags = new uint[] { 57, 66, 9, 17, 25, 33, 41, 49, 73, 82, 90 };
  public static wallinfostrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override wallinfostrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override wallinfostrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_wallinfostrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<wallinfostrc, wallinfostrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_wallinfostrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int BaseelevationFieldNumber = 7;
  private bool hasBaseelevation;
  private double baseelevation_;
  public bool HasBaseelevation {
    get { return hasBaseelevation; }
  }
  public double Baseelevation {
    get { return baseelevation_; }
  }
  
  public const int BaselevelnameFieldNumber = 8;
  private bool hasBaselevelname;
  private string baselevelname_ = "";
  public bool HasBaselevelname {
    get { return hasBaselevelname; }
  }
  public string Baselevelname {
    get { return baselevelname_; }
  }
  
  public const int TopelevationFieldNumber = 9;
  private bool hasTopelevation;
  private double topelevation_;
  public bool HasTopelevation {
    get { return hasTopelevation; }
  }
  public double Topelevation {
    get { return topelevation_; }
  }
  
  public const int ToplevelnameFieldNumber = 10;
  private bool hasToplevelname;
  private string toplevelname_ = "";
  public bool HasToplevelname {
    get { return hasToplevelname; }
  }
  public string Toplevelname {
    get { return toplevelname_; }
  }
  
  public const int WalltypeFieldNumber = 11;
  private bool hasWalltype;
  private string walltype_ = "";
  public bool HasWalltype {
    get { return hasWalltype; }
  }
  public string Walltype {
    get { return walltype_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasBaseelevation) return false;
      if (!hasBaselevelname) return false;
      if (!hasTopelevation) return false;
      if (!hasToplevelname) return false;
      if (!hasWalltype) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _wallinfostrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[4], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[5], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[6], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[7], P1Coordz);
    }
    if (hasBaseelevation) {
      output.WriteDouble(7, field_names[0], Baseelevation);
    }
    if (hasBaselevelname) {
      output.WriteString(8, field_names[1], Baselevelname);
    }
    if (hasTopelevation) {
      output.WriteDouble(9, field_names[8], Topelevation);
    }
    if (hasToplevelname) {
      output.WriteString(10, field_names[9], Toplevelname);
    }
    if (hasWalltype) {
      output.WriteString(11, field_names[10], Walltype);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasBaseelevation) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Baseelevation);
    }
    if (hasBaselevelname) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Baselevelname);
    }
    if (hasTopelevation) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Topelevation);
    }
    if (hasToplevelname) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Toplevelname);
    }
    if (hasWalltype) {
      size += pb::CodedOutputStream.ComputeStringSize(11, Walltype);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static wallinfostrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static wallinfostrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static wallinfostrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static wallinfostrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallinfostrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private wallinfostrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(wallinfostrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<wallinfostrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(wallinfostrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private wallinfostrc result;
    
    private wallinfostrc PrepareBuilder() {
      if (resultIsReadOnly) {
        wallinfostrc original = result;
        result = new wallinfostrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override wallinfostrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::wallinfostrc.Descriptor; }
    }
    
    public override wallinfostrc DefaultInstanceForType {
      get { return global::wallinfostrc.DefaultInstance; }
    }
    
    public override wallinfostrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is wallinfostrc) {
        return MergeFrom((wallinfostrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(wallinfostrc other) {
      if (other == global::wallinfostrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasBaseelevation) {
        Baseelevation = other.Baseelevation;
      }
      if (other.HasBaselevelname) {
        Baselevelname = other.Baselevelname;
      }
      if (other.HasTopelevation) {
        Topelevation = other.Topelevation;
      }
      if (other.HasToplevelname) {
        Toplevelname = other.Toplevelname;
      }
      if (other.HasWalltype) {
        Walltype = other.Walltype;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_wallinfostrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _wallinfostrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 57: {
            result.hasBaseelevation = input.ReadDouble(ref result.baseelevation_);
            break;
          }
          case 66: {
            result.hasBaselevelname = input.ReadString(ref result.baselevelname_);
            break;
          }
          case 73: {
            result.hasTopelevation = input.ReadDouble(ref result.topelevation_);
            break;
          }
          case 82: {
            result.hasToplevelname = input.ReadString(ref result.toplevelname_);
            break;
          }
          case 90: {
            result.hasWalltype = input.ReadString(ref result.walltype_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasBaseelevation {
      get { return result.hasBaseelevation; }
    }
    public double Baseelevation {
      get { return result.Baseelevation; }
      set { SetBaseelevation(value); }
    }
    public Builder SetBaseelevation(double value) {
      PrepareBuilder();
      result.hasBaseelevation = true;
      result.baseelevation_ = value;
      return this;
    }
    public Builder ClearBaseelevation() {
      PrepareBuilder();
      result.hasBaseelevation = false;
      result.baseelevation_ = 0D;
      return this;
    }
    
    public bool HasBaselevelname {
      get { return result.hasBaselevelname; }
    }
    public string Baselevelname {
      get { return result.Baselevelname; }
      set { SetBaselevelname(value); }
    }
    public Builder SetBaselevelname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBaselevelname = true;
      result.baselevelname_ = value;
      return this;
    }
    public Builder ClearBaselevelname() {
      PrepareBuilder();
      result.hasBaselevelname = false;
      result.baselevelname_ = "";
      return this;
    }
    
    public bool HasTopelevation {
      get { return result.hasTopelevation; }
    }
    public double Topelevation {
      get { return result.Topelevation; }
      set { SetTopelevation(value); }
    }
    public Builder SetTopelevation(double value) {
      PrepareBuilder();
      result.hasTopelevation = true;
      result.topelevation_ = value;
      return this;
    }
    public Builder ClearTopelevation() {
      PrepareBuilder();
      result.hasTopelevation = false;
      result.topelevation_ = 0D;
      return this;
    }
    
    public bool HasToplevelname {
      get { return result.hasToplevelname; }
    }
    public string Toplevelname {
      get { return result.Toplevelname; }
      set { SetToplevelname(value); }
    }
    public Builder SetToplevelname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToplevelname = true;
      result.toplevelname_ = value;
      return this;
    }
    public Builder ClearToplevelname() {
      PrepareBuilder();
      result.hasToplevelname = false;
      result.toplevelname_ = "";
      return this;
    }
    
    public bool HasWalltype {
      get { return result.hasWalltype; }
    }
    public string Walltype {
      get { return result.Walltype; }
      set { SetWalltype(value); }
    }
    public Builder SetWalltype(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasWalltype = true;
      result.walltype_ = value;
      return this;
    }
    public Builder ClearWalltype() {
      PrepareBuilder();
      result.hasWalltype = false;
      result.walltype_ = "";
      return this;
    }
  }
  static wallinfostrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class beaminfostrc : pb::GeneratedMessage<beaminfostrc, beaminfostrc.Builder> {
  private beaminfostrc() { }
  private static readonly beaminfostrc defaultInstance = new beaminfostrc().MakeReadOnly();
  private static readonly string[] _beaminfostrcFieldNames = new string[] { "family", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _beaminfostrcFieldTags = new uint[] { 58, 9, 17, 25, 33, 41, 49 };
  public static beaminfostrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override beaminfostrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override beaminfostrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_beaminfostrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<beaminfostrc, beaminfostrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_beaminfostrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int FamilyFieldNumber = 7;
  private bool hasFamily;
  private global::idstrc family_;
  public bool HasFamily {
    get { return hasFamily; }
  }
  public global::idstrc Family {
    get { return family_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasFamily) return false;
      if (!Family.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _beaminfostrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (hasFamily) {
      output.WriteMessage(7, field_names[0], Family);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasFamily) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Family);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static beaminfostrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static beaminfostrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static beaminfostrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static beaminfostrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static beaminfostrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private beaminfostrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(beaminfostrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<beaminfostrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(beaminfostrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private beaminfostrc result;
    
    private beaminfostrc PrepareBuilder() {
      if (resultIsReadOnly) {
        beaminfostrc original = result;
        result = new beaminfostrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override beaminfostrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::beaminfostrc.Descriptor; }
    }
    
    public override beaminfostrc DefaultInstanceForType {
      get { return global::beaminfostrc.DefaultInstance; }
    }
    
    public override beaminfostrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is beaminfostrc) {
        return MergeFrom((beaminfostrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(beaminfostrc other) {
      if (other == global::beaminfostrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasFamily) {
        MergeFamily(other.Family);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_beaminfostrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _beaminfostrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamily) {
              subBuilder.MergeFrom(Family);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Family = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasFamily {
     get { return result.hasFamily; }
    }
    public global::idstrc Family {
      get { return result.Family; }
      set { SetFamily(value); }
    }
    public Builder SetFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = value;
      return this;
    }
    public Builder SetFamily(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamily &&
          result.family_ != global::idstrc.DefaultInstance) {
          result.family_ = global::idstrc.CreateBuilder(result.family_).MergeFrom(value).BuildPartial();
      } else {
        result.family_ = value;
      }
      result.hasFamily = true;
      return this;
    }
    public Builder ClearFamily() {
      PrepareBuilder();
      result.hasFamily = false;
      result.family_ = null;
      return this;
    }
  }
  static beaminfostrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class polywallinfostrc : pb::GeneratedMessage<polywallinfostrc, polywallinfostrc.Builder> {
  private polywallinfostrc() { }
  private static readonly polywallinfostrc defaultInstance = new polywallinfostrc().MakeReadOnly();
  private static readonly string[] _polywallinfostrcFieldNames = new string[] { "walls" };
  private static readonly uint[] _polywallinfostrcFieldTags = new uint[] { 10 };
  public static polywallinfostrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override polywallinfostrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override polywallinfostrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_polywallinfostrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<polywallinfostrc, polywallinfostrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_polywallinfostrc__FieldAccessorTable; }
  }
  
  public const int WallsFieldNumber = 1;
  private pbc::PopsicleList<global::wallinfostrc> walls_ = new pbc::PopsicleList<global::wallinfostrc>();
  public scg::IList<global::wallinfostrc> WallsList {
    get { return walls_; }
  }
  public int WallsCount {
    get { return walls_.Count; }
  }
  public global::wallinfostrc GetWalls(int index) {
    return walls_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::wallinfostrc element in WallsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _polywallinfostrcFieldNames;
    if (walls_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], walls_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::wallinfostrc element in WallsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static polywallinfostrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static polywallinfostrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static polywallinfostrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polywallinfostrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private polywallinfostrc MakeReadOnly() {
    walls_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(polywallinfostrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<polywallinfostrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(polywallinfostrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private polywallinfostrc result;
    
    private polywallinfostrc PrepareBuilder() {
      if (resultIsReadOnly) {
        polywallinfostrc original = result;
        result = new polywallinfostrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override polywallinfostrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::polywallinfostrc.Descriptor; }
    }
    
    public override polywallinfostrc DefaultInstanceForType {
      get { return global::polywallinfostrc.DefaultInstance; }
    }
    
    public override polywallinfostrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is polywallinfostrc) {
        return MergeFrom((polywallinfostrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(polywallinfostrc other) {
      if (other == global::polywallinfostrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.walls_.Count != 0) {
        result.walls_.Add(other.walls_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_polywallinfostrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _polywallinfostrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.walls_, global::wallinfostrc.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::wallinfostrc> WallsList {
      get { return PrepareBuilder().walls_; }
    }
    public int WallsCount {
      get { return result.WallsCount; }
    }
    public global::wallinfostrc GetWalls(int index) {
      return result.GetWalls(index);
    }
    public Builder SetWalls(int index, global::wallinfostrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.walls_[index] = value;
      return this;
    }
    public Builder SetWalls(int index, global::wallinfostrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.walls_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddWalls(global::wallinfostrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.walls_.Add(value);
      return this;
    }
    public Builder AddWalls(global::wallinfostrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.walls_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeWalls(scg::IEnumerable<global::wallinfostrc> values) {
      PrepareBuilder();
      result.walls_.Add(values);
      return this;
    }
    public Builder ClearWalls() {
      PrepareBuilder();
      result.walls_.Clear();
      return this;
    }
  }
  static polywallinfostrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class idstrc : pb::GeneratedMessage<idstrc, idstrc.Builder> {
  private idstrc() { }
  private static readonly idstrc defaultInstance = new idstrc().MakeReadOnly();
  private static readonly string[] _idstrcFieldNames = new string[] { "id" };
  private static readonly uint[] _idstrcFieldTags = new uint[] { 8 };
  public static idstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override idstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override idstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_idstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<idstrc, idstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_idstrc__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _idstrcFieldNames;
    if (hasId) {
      output.WriteInt32(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static idstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static idstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static idstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static idstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static idstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static idstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static idstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static idstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static idstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static idstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private idstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(idstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<idstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(idstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private idstrc result;
    
    private idstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        idstrc original = result;
        result = new idstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override idstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::idstrc.Descriptor; }
    }
    
    public override idstrc DefaultInstanceForType {
      get { return global::idstrc.DefaultInstance; }
    }
    
    public override idstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is idstrc) {
        return MergeFrom((idstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(idstrc other) {
      if (other == global::idstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_idstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _idstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt32(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
  }
  static idstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class doublestrc : pb::GeneratedMessage<doublestrc, doublestrc.Builder> {
  private doublestrc() { }
  private static readonly doublestrc defaultInstance = new doublestrc().MakeReadOnly();
  private static readonly string[] _doublestrcFieldNames = new string[] { "height" };
  private static readonly uint[] _doublestrcFieldTags = new uint[] { 9 };
  public static doublestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override doublestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override doublestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_doublestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<doublestrc, doublestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_doublestrc__FieldAccessorTable; }
  }
  
  public const int HeightFieldNumber = 1;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHeight) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _doublestrcFieldNames;
    if (hasHeight) {
      output.WriteDouble(1, field_names[0], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Height);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static doublestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static doublestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static doublestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static doublestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static doublestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static doublestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static doublestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static doublestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static doublestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static doublestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private doublestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(doublestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<doublestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(doublestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private doublestrc result;
    
    private doublestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        doublestrc original = result;
        result = new doublestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override doublestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::doublestrc.Descriptor; }
    }
    
    public override doublestrc DefaultInstanceForType {
      get { return global::doublestrc.DefaultInstance; }
    }
    
    public override doublestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is doublestrc) {
        return MergeFrom((doublestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(doublestrc other) {
      if (other == global::doublestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_doublestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _doublestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
  }
  static doublestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class boolstrc : pb::GeneratedMessage<boolstrc, boolstrc.Builder> {
  private boolstrc() { }
  private static readonly boolstrc defaultInstance = new boolstrc().MakeReadOnly();
  private static readonly string[] _boolstrcFieldNames = new string[] { "answer" };
  private static readonly uint[] _boolstrcFieldTags = new uint[] { 8 };
  public static boolstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override boolstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override boolstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_boolstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<boolstrc, boolstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_boolstrc__FieldAccessorTable; }
  }
  
  public const int AnswerFieldNumber = 1;
  private bool hasAnswer;
  private bool answer_;
  public bool HasAnswer {
    get { return hasAnswer; }
  }
  public bool Answer {
    get { return answer_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAnswer) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _boolstrcFieldNames;
    if (hasAnswer) {
      output.WriteBool(1, field_names[0], Answer);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAnswer) {
      size += pb::CodedOutputStream.ComputeBoolSize(1, Answer);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static boolstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static boolstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static boolstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static boolstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static boolstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static boolstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static boolstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static boolstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static boolstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static boolstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private boolstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(boolstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<boolstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(boolstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private boolstrc result;
    
    private boolstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        boolstrc original = result;
        result = new boolstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override boolstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::boolstrc.Descriptor; }
    }
    
    public override boolstrc DefaultInstanceForType {
      get { return global::boolstrc.DefaultInstance; }
    }
    
    public override boolstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is boolstrc) {
        return MergeFrom((boolstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(boolstrc other) {
      if (other == global::boolstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAnswer) {
        Answer = other.Answer;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_boolstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _boolstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAnswer = input.ReadBool(ref result.answer_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAnswer {
      get { return result.hasAnswer; }
    }
    public bool Answer {
      get { return result.Answer; }
      set { SetAnswer(value); }
    }
    public Builder SetAnswer(bool value) {
      PrepareBuilder();
      result.hasAnswer = true;
      result.answer_ = value;
      return this;
    }
    public Builder ClearAnswer() {
      PrepareBuilder();
      result.hasAnswer = false;
      result.answer_ = false;
      return this;
    }
  }
  static boolstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class doublevolumestrc : pb::GeneratedMessage<doublevolumestrc, doublevolumestrc.Builder> {
  private doublevolumestrc() { }
  private static readonly doublevolumestrc defaultInstance = new doublevolumestrc().MakeReadOnly();
  private static readonly string[] _doublevolumestrcFieldNames = new string[] { "volume" };
  private static readonly uint[] _doublevolumestrcFieldTags = new uint[] { 9 };
  public static doublevolumestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override doublevolumestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override doublevolumestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_doublevolumestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<doublevolumestrc, doublevolumestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_doublevolumestrc__FieldAccessorTable; }
  }
  
  public const int VolumeFieldNumber = 1;
  private bool hasVolume;
  private double volume_;
  public bool HasVolume {
    get { return hasVolume; }
  }
  public double Volume {
    get { return volume_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasVolume) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _doublevolumestrcFieldNames;
    if (hasVolume) {
      output.WriteDouble(1, field_names[0], Volume);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasVolume) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Volume);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static doublevolumestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static doublevolumestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static doublevolumestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static doublevolumestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private doublevolumestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(doublevolumestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<doublevolumestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(doublevolumestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private doublevolumestrc result;
    
    private doublevolumestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        doublevolumestrc original = result;
        result = new doublevolumestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override doublevolumestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::doublevolumestrc.Descriptor; }
    }
    
    public override doublevolumestrc DefaultInstanceForType {
      get { return global::doublevolumestrc.DefaultInstance; }
    }
    
    public override doublevolumestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is doublevolumestrc) {
        return MergeFrom((doublevolumestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(doublevolumestrc other) {
      if (other == global::doublevolumestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_doublevolumestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _doublevolumestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasVolume = input.ReadDouble(ref result.volume_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVolume {
      get { return result.hasVolume; }
    }
    public double Volume {
      get { return result.Volume; }
      set { SetVolume(value); }
    }
    public Builder SetVolume(double value) {
      PrepareBuilder();
      result.hasVolume = true;
      result.volume_ = value;
      return this;
    }
    public Builder ClearVolume() {
      PrepareBuilder();
      result.hasVolume = false;
      result.volume_ = 0D;
      return this;
    }
  }
  static doublevolumestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class polyidstrc : pb::GeneratedMessage<polyidstrc, polyidstrc.Builder> {
  private polyidstrc() { }
  private static readonly polyidstrc defaultInstance = new polyidstrc().MakeReadOnly();
  private static readonly string[] _polyidstrcFieldNames = new string[] { "ids" };
  private static readonly uint[] _polyidstrcFieldTags = new uint[] { 10 };
  public static polyidstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override polyidstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override polyidstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_polyidstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<polyidstrc, polyidstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_polyidstrc__FieldAccessorTable; }
  }
  
  public const int IdsFieldNumber = 1;
  private pbc::PopsicleList<global::idstrc> ids_ = new pbc::PopsicleList<global::idstrc>();
  public scg::IList<global::idstrc> IdsList {
    get { return ids_; }
  }
  public int IdsCount {
    get { return ids_.Count; }
  }
  public global::idstrc GetIds(int index) {
    return ids_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::idstrc element in IdsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _polyidstrcFieldNames;
    if (ids_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], ids_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::idstrc element in IdsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static polyidstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polyidstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polyidstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polyidstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polyidstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polyidstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static polyidstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static polyidstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static polyidstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polyidstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private polyidstrc MakeReadOnly() {
    ids_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(polyidstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<polyidstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(polyidstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private polyidstrc result;
    
    private polyidstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        polyidstrc original = result;
        result = new polyidstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override polyidstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::polyidstrc.Descriptor; }
    }
    
    public override polyidstrc DefaultInstanceForType {
      get { return global::polyidstrc.DefaultInstance; }
    }
    
    public override polyidstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is polyidstrc) {
        return MergeFrom((polyidstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(polyidstrc other) {
      if (other == global::polyidstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.ids_.Count != 0) {
        result.ids_.Add(other.ids_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_polyidstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _polyidstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.ids_, global::idstrc.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::idstrc> IdsList {
      get { return PrepareBuilder().ids_; }
    }
    public int IdsCount {
      get { return result.IdsCount; }
    }
    public global::idstrc GetIds(int index) {
      return result.GetIds(index);
    }
    public Builder SetIds(int index, global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.ids_[index] = value;
      return this;
    }
    public Builder SetIds(int index, global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.ids_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddIds(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.ids_.Add(value);
      return this;
    }
    public Builder AddIds(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.ids_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeIds(scg::IEnumerable<global::idstrc> values) {
      PrepareBuilder();
      result.ids_.Add(values);
      return this;
    }
    public Builder ClearIds() {
      PrepareBuilder();
      result.ids_.Clear();
      return this;
    }
  }
  static polyidstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class polylevelstrc : pb::GeneratedMessage<polylevelstrc, polylevelstrc.Builder> {
  private polylevelstrc() { }
  private static readonly polylevelstrc defaultInstance = new polylevelstrc().MakeReadOnly();
  private static readonly string[] _polylevelstrcFieldNames = new string[] { "levels" };
  private static readonly uint[] _polylevelstrcFieldTags = new uint[] { 10 };
  public static polylevelstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override polylevelstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override polylevelstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_polylevelstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<polylevelstrc, polylevelstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_polylevelstrc__FieldAccessorTable; }
  }
  
  public const int LevelsFieldNumber = 1;
  private pbc::PopsicleList<global::levelstrc> levels_ = new pbc::PopsicleList<global::levelstrc>();
  public scg::IList<global::levelstrc> LevelsList {
    get { return levels_; }
  }
  public int LevelsCount {
    get { return levels_.Count; }
  }
  public global::levelstrc GetLevels(int index) {
    return levels_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::levelstrc element in LevelsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _polylevelstrcFieldNames;
    if (levels_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], levels_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::levelstrc element in LevelsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static polylevelstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static polylevelstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static polylevelstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static polylevelstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polylevelstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private polylevelstrc MakeReadOnly() {
    levels_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(polylevelstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<polylevelstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(polylevelstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private polylevelstrc result;
    
    private polylevelstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        polylevelstrc original = result;
        result = new polylevelstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override polylevelstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::polylevelstrc.Descriptor; }
    }
    
    public override polylevelstrc DefaultInstanceForType {
      get { return global::polylevelstrc.DefaultInstance; }
    }
    
    public override polylevelstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is polylevelstrc) {
        return MergeFrom((polylevelstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(polylevelstrc other) {
      if (other == global::polylevelstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.levels_.Count != 0) {
        result.levels_.Add(other.levels_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_polylevelstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _polylevelstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.levels_, global::levelstrc.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::levelstrc> LevelsList {
      get { return PrepareBuilder().levels_; }
    }
    public int LevelsCount {
      get { return result.LevelsCount; }
    }
    public global::levelstrc GetLevels(int index) {
      return result.GetLevels(index);
    }
    public Builder SetLevels(int index, global::levelstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.levels_[index] = value;
      return this;
    }
    public Builder SetLevels(int index, global::levelstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.levels_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddLevels(global::levelstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.levels_.Add(value);
      return this;
    }
    public Builder AddLevels(global::levelstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.levels_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeLevels(scg::IEnumerable<global::levelstrc> values) {
      PrepareBuilder();
      result.levels_.Add(values);
      return this;
    }
    public Builder ClearLevels() {
      PrepareBuilder();
      result.levels_.Clear();
      return this;
    }
  }
  static polylevelstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class levelstrc : pb::GeneratedMessage<levelstrc, levelstrc.Builder> {
  private levelstrc() { }
  private static readonly levelstrc defaultInstance = new levelstrc().MakeReadOnly();
  private static readonly string[] _levelstrcFieldNames = new string[] { "h", "name" };
  private static readonly uint[] _levelstrcFieldTags = new uint[] { 9, 18 };
  public static levelstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override levelstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override levelstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_levelstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<levelstrc, levelstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_levelstrc__FieldAccessorTable; }
  }
  
  public const int HFieldNumber = 1;
  private bool hasH;
  private double h_;
  public bool HasH {
    get { return hasH; }
  }
  public double H {
    get { return h_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasH) return false;
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _levelstrcFieldNames;
    if (hasH) {
      output.WriteDouble(1, field_names[0], H);
    }
    if (hasName) {
      output.WriteString(2, field_names[1], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasH) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, H);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static levelstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static levelstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static levelstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static levelstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static levelstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static levelstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static levelstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static levelstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static levelstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static levelstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private levelstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(levelstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<levelstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(levelstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private levelstrc result;
    
    private levelstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        levelstrc original = result;
        result = new levelstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override levelstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::levelstrc.Descriptor; }
    }
    
    public override levelstrc DefaultInstanceForType {
      get { return global::levelstrc.DefaultInstance; }
    }
    
    public override levelstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is levelstrc) {
        return MergeFrom((levelstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(levelstrc other) {
      if (other == global::levelstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasH) {
        H = other.H;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_levelstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _levelstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasH = input.ReadDouble(ref result.h_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasH {
      get { return result.hasH; }
    }
    public double H {
      get { return result.H; }
      set { SetH(value); }
    }
    public Builder SetH(double value) {
      PrepareBuilder();
      result.hasH = true;
      result.h_ = value;
      return this;
    }
    public Builder ClearH() {
      PrepareBuilder();
      result.hasH = false;
      result.h_ = 0D;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static levelstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class upperlevelstrc : pb::GeneratedMessage<upperlevelstrc, upperlevelstrc.Builder> {
  private upperlevelstrc() { }
  private static readonly upperlevelstrc defaultInstance = new upperlevelstrc().MakeReadOnly();
  private static readonly string[] _upperlevelstrcFieldNames = new string[] { "current", "elevation" };
  private static readonly uint[] _upperlevelstrcFieldTags = new uint[] { 10, 17 };
  public static upperlevelstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override upperlevelstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override upperlevelstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_upperlevelstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<upperlevelstrc, upperlevelstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_upperlevelstrc__FieldAccessorTable; }
  }
  
  public const int CurrentFieldNumber = 1;
  private bool hasCurrent;
  private global::idstrc current_;
  public bool HasCurrent {
    get { return hasCurrent; }
  }
  public global::idstrc Current {
    get { return current_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int ElevationFieldNumber = 2;
  private bool hasElevation;
  private double elevation_;
  public bool HasElevation {
    get { return hasElevation; }
  }
  public double Elevation {
    get { return elevation_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCurrent) return false;
      if (!hasElevation) return false;
      if (!Current.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _upperlevelstrcFieldNames;
    if (hasCurrent) {
      output.WriteMessage(1, field_names[0], Current);
    }
    if (hasElevation) {
      output.WriteDouble(2, field_names[1], Elevation);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCurrent) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Current);
    }
    if (hasElevation) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Elevation);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static upperlevelstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static upperlevelstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static upperlevelstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static upperlevelstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private upperlevelstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(upperlevelstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<upperlevelstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(upperlevelstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private upperlevelstrc result;
    
    private upperlevelstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        upperlevelstrc original = result;
        result = new upperlevelstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override upperlevelstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::upperlevelstrc.Descriptor; }
    }
    
    public override upperlevelstrc DefaultInstanceForType {
      get { return global::upperlevelstrc.DefaultInstance; }
    }
    
    public override upperlevelstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is upperlevelstrc) {
        return MergeFrom((upperlevelstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(upperlevelstrc other) {
      if (other == global::upperlevelstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCurrent) {
        MergeCurrent(other.Current);
      }
      if (other.HasElevation) {
        Elevation = other.Elevation;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_upperlevelstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _upperlevelstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasCurrent) {
              subBuilder.MergeFrom(Current);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Current = subBuilder.BuildPartial();
            break;
          }
          case 17: {
            result.hasElevation = input.ReadDouble(ref result.elevation_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCurrent {
     get { return result.hasCurrent; }
    }
    public global::idstrc Current {
      get { return result.Current; }
      set { SetCurrent(value); }
    }
    public Builder SetCurrent(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCurrent = true;
      result.current_ = value;
      return this;
    }
    public Builder SetCurrent(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCurrent = true;
      result.current_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCurrent(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCurrent &&
          result.current_ != global::idstrc.DefaultInstance) {
          result.current_ = global::idstrc.CreateBuilder(result.current_).MergeFrom(value).BuildPartial();
      } else {
        result.current_ = value;
      }
      result.hasCurrent = true;
      return this;
    }
    public Builder ClearCurrent() {
      PrepareBuilder();
      result.hasCurrent = false;
      result.current_ = null;
      return this;
    }
    
    public bool HasElevation {
      get { return result.hasElevation; }
    }
    public double Elevation {
      get { return result.Elevation; }
      set { SetElevation(value); }
    }
    public Builder SetElevation(double value) {
      PrepareBuilder();
      result.hasElevation = true;
      result.elevation_ = value;
      return this;
    }
    public Builder ClearElevation() {
      PrepareBuilder();
      result.hasElevation = false;
      result.elevation_ = 0D;
      return this;
    }
  }
  static upperlevelstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class insertdoorstrc : pb::GeneratedMessage<insertdoorstrc, insertdoorstrc.Builder> {
  private insertdoorstrc() { }
  private static readonly insertdoorstrc defaultInstance = new insertdoorstrc().MakeReadOnly();
  private static readonly string[] _insertdoorstrcFieldNames = new string[] { "family", "hostid", "p0coordx", "p0coordy", "p0coordz" };
  private static readonly uint[] _insertdoorstrcFieldTags = new uint[] { 42, 8, 17, 25, 33 };
  public static insertdoorstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override insertdoorstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override insertdoorstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_insertdoorstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<insertdoorstrc, insertdoorstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_insertdoorstrc__FieldAccessorTable; }
  }
  
  public const int HostidFieldNumber = 1;
  private bool hasHostid;
  private int hostid_;
  public bool HasHostid {
    get { return hasHostid; }
  }
  public int Hostid {
    get { return hostid_; }
  }
  
  public const int P0CoordxFieldNumber = 2;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 3;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 4;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int FamilyFieldNumber = 5;
  private bool hasFamily;
  private global::idstrc family_;
  public bool HasFamily {
    get { return hasFamily; }
  }
  public global::idstrc Family {
    get { return family_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHostid) return false;
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasFamily) return false;
      if (!Family.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _insertdoorstrcFieldNames;
    if (hasHostid) {
      output.WriteInt32(1, field_names[1], Hostid);
    }
    if (hasP0Coordx) {
      output.WriteDouble(2, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(3, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(4, field_names[4], P0Coordz);
    }
    if (hasFamily) {
      output.WriteMessage(5, field_names[0], Family);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHostid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Hostid);
    }
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P0Coordz);
    }
    if (hasFamily) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, Family);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static insertdoorstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static insertdoorstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static insertdoorstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertdoorstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private insertdoorstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(insertdoorstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<insertdoorstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(insertdoorstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private insertdoorstrc result;
    
    private insertdoorstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        insertdoorstrc original = result;
        result = new insertdoorstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override insertdoorstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::insertdoorstrc.Descriptor; }
    }
    
    public override insertdoorstrc DefaultInstanceForType {
      get { return global::insertdoorstrc.DefaultInstance; }
    }
    
    public override insertdoorstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is insertdoorstrc) {
        return MergeFrom((insertdoorstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(insertdoorstrc other) {
      if (other == global::insertdoorstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHostid) {
        Hostid = other.Hostid;
      }
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasFamily) {
        MergeFamily(other.Family);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_insertdoorstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _insertdoorstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHostid = input.ReadInt32(ref result.hostid_);
            break;
          }
          case 17: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 25: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 33: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 42: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamily) {
              subBuilder.MergeFrom(Family);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Family = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHostid {
      get { return result.hasHostid; }
    }
    public int Hostid {
      get { return result.Hostid; }
      set { SetHostid(value); }
    }
    public Builder SetHostid(int value) {
      PrepareBuilder();
      result.hasHostid = true;
      result.hostid_ = value;
      return this;
    }
    public Builder ClearHostid() {
      PrepareBuilder();
      result.hasHostid = false;
      result.hostid_ = 0;
      return this;
    }
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasFamily {
     get { return result.hasFamily; }
    }
    public global::idstrc Family {
      get { return result.Family; }
      set { SetFamily(value); }
    }
    public Builder SetFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = value;
      return this;
    }
    public Builder SetFamily(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamily &&
          result.family_ != global::idstrc.DefaultInstance) {
          result.family_ = global::idstrc.CreateBuilder(result.family_).MergeFrom(value).BuildPartial();
      } else {
        result.family_ = value;
      }
      result.hasFamily = true;
      return this;
    }
    public Builder ClearFamily() {
      PrepareBuilder();
      result.hasFamily = false;
      result.family_ = null;
      return this;
    }
  }
  static insertdoorstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class insertdoorbstrc : pb::GeneratedMessage<insertdoorbstrc, insertdoorbstrc.Builder> {
  private insertdoorbstrc() { }
  private static readonly insertdoorbstrc defaultInstance = new insertdoorbstrc().MakeReadOnly();
  private static readonly string[] _insertdoorbstrcFieldNames = new string[] { "deltax", "deltay", "family", "hostid" };
  private static readonly uint[] _insertdoorbstrcFieldTags = new uint[] { 17, 25, 34, 8 };
  public static insertdoorbstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override insertdoorbstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override insertdoorbstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_insertdoorbstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<insertdoorbstrc, insertdoorbstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_insertdoorbstrc__FieldAccessorTable; }
  }
  
  public const int HostidFieldNumber = 1;
  private bool hasHostid;
  private int hostid_;
  public bool HasHostid {
    get { return hasHostid; }
  }
  public int Hostid {
    get { return hostid_; }
  }
  
  public const int DeltaxFieldNumber = 2;
  private bool hasDeltax;
  private double deltax_;
  public bool HasDeltax {
    get { return hasDeltax; }
  }
  public double Deltax {
    get { return deltax_; }
  }
  
  public const int DeltayFieldNumber = 3;
  private bool hasDeltay;
  private double deltay_;
  public bool HasDeltay {
    get { return hasDeltay; }
  }
  public double Deltay {
    get { return deltay_; }
  }
  
  public const int FamilyFieldNumber = 4;
  private bool hasFamily;
  private global::idstrc family_;
  public bool HasFamily {
    get { return hasFamily; }
  }
  public global::idstrc Family {
    get { return family_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHostid) return false;
      if (!hasDeltax) return false;
      if (!hasDeltay) return false;
      if (!hasFamily) return false;
      if (!Family.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _insertdoorbstrcFieldNames;
    if (hasHostid) {
      output.WriteInt32(1, field_names[3], Hostid);
    }
    if (hasDeltax) {
      output.WriteDouble(2, field_names[0], Deltax);
    }
    if (hasDeltay) {
      output.WriteDouble(3, field_names[1], Deltay);
    }
    if (hasFamily) {
      output.WriteMessage(4, field_names[2], Family);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHostid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Hostid);
    }
    if (hasDeltax) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Deltax);
    }
    if (hasDeltay) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Deltay);
    }
    if (hasFamily) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Family);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static insertdoorbstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static insertdoorbstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static insertdoorbstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertdoorbstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private insertdoorbstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(insertdoorbstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<insertdoorbstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(insertdoorbstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private insertdoorbstrc result;
    
    private insertdoorbstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        insertdoorbstrc original = result;
        result = new insertdoorbstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override insertdoorbstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::insertdoorbstrc.Descriptor; }
    }
    
    public override insertdoorbstrc DefaultInstanceForType {
      get { return global::insertdoorbstrc.DefaultInstance; }
    }
    
    public override insertdoorbstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is insertdoorbstrc) {
        return MergeFrom((insertdoorbstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(insertdoorbstrc other) {
      if (other == global::insertdoorbstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHostid) {
        Hostid = other.Hostid;
      }
      if (other.HasDeltax) {
        Deltax = other.Deltax;
      }
      if (other.HasDeltay) {
        Deltay = other.Deltay;
      }
      if (other.HasFamily) {
        MergeFamily(other.Family);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_insertdoorbstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _insertdoorbstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHostid = input.ReadInt32(ref result.hostid_);
            break;
          }
          case 17: {
            result.hasDeltax = input.ReadDouble(ref result.deltax_);
            break;
          }
          case 25: {
            result.hasDeltay = input.ReadDouble(ref result.deltay_);
            break;
          }
          case 34: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamily) {
              subBuilder.MergeFrom(Family);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Family = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHostid {
      get { return result.hasHostid; }
    }
    public int Hostid {
      get { return result.Hostid; }
      set { SetHostid(value); }
    }
    public Builder SetHostid(int value) {
      PrepareBuilder();
      result.hasHostid = true;
      result.hostid_ = value;
      return this;
    }
    public Builder ClearHostid() {
      PrepareBuilder();
      result.hasHostid = false;
      result.hostid_ = 0;
      return this;
    }
    
    public bool HasDeltax {
      get { return result.hasDeltax; }
    }
    public double Deltax {
      get { return result.Deltax; }
      set { SetDeltax(value); }
    }
    public Builder SetDeltax(double value) {
      PrepareBuilder();
      result.hasDeltax = true;
      result.deltax_ = value;
      return this;
    }
    public Builder ClearDeltax() {
      PrepareBuilder();
      result.hasDeltax = false;
      result.deltax_ = 0D;
      return this;
    }
    
    public bool HasDeltay {
      get { return result.hasDeltay; }
    }
    public double Deltay {
      get { return result.Deltay; }
      set { SetDeltay(value); }
    }
    public Builder SetDeltay(double value) {
      PrepareBuilder();
      result.hasDeltay = true;
      result.deltay_ = value;
      return this;
    }
    public Builder ClearDeltay() {
      PrepareBuilder();
      result.hasDeltay = false;
      result.deltay_ = 0D;
      return this;
    }
    
    public bool HasFamily {
     get { return result.hasFamily; }
    }
    public global::idstrc Family {
      get { return result.Family; }
      set { SetFamily(value); }
    }
    public Builder SetFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = value;
      return this;
    }
    public Builder SetFamily(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamily &&
          result.family_ != global::idstrc.DefaultInstance) {
          result.family_ = global::idstrc.CreateBuilder(result.family_).MergeFrom(value).BuildPartial();
      } else {
        result.family_ = value;
      }
      result.hasFamily = true;
      return this;
    }
    public Builder ClearFamily() {
      PrepareBuilder();
      result.hasFamily = false;
      result.family_ = null;
      return this;
    }
  }
  static insertdoorbstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class insertwindowstrc : pb::GeneratedMessage<insertwindowstrc, insertwindowstrc.Builder> {
  private insertwindowstrc() { }
  private static readonly insertwindowstrc defaultInstance = new insertwindowstrc().MakeReadOnly();
  private static readonly string[] _insertwindowstrcFieldNames = new string[] { "deltax", "deltay", "hostid" };
  private static readonly uint[] _insertwindowstrcFieldTags = new uint[] { 17, 25, 8 };
  public static insertwindowstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override insertwindowstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override insertwindowstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_insertwindowstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<insertwindowstrc, insertwindowstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_insertwindowstrc__FieldAccessorTable; }
  }
  
  public const int HostidFieldNumber = 1;
  private bool hasHostid;
  private int hostid_;
  public bool HasHostid {
    get { return hasHostid; }
  }
  public int Hostid {
    get { return hostid_; }
  }
  
  public const int DeltaxFieldNumber = 2;
  private bool hasDeltax;
  private double deltax_;
  public bool HasDeltax {
    get { return hasDeltax; }
  }
  public double Deltax {
    get { return deltax_; }
  }
  
  public const int DeltayFieldNumber = 3;
  private bool hasDeltay;
  private double deltay_;
  public bool HasDeltay {
    get { return hasDeltay; }
  }
  public double Deltay {
    get { return deltay_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHostid) return false;
      if (!hasDeltax) return false;
      if (!hasDeltay) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _insertwindowstrcFieldNames;
    if (hasHostid) {
      output.WriteInt32(1, field_names[2], Hostid);
    }
    if (hasDeltax) {
      output.WriteDouble(2, field_names[0], Deltax);
    }
    if (hasDeltay) {
      output.WriteDouble(3, field_names[1], Deltay);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHostid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Hostid);
    }
    if (hasDeltax) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Deltax);
    }
    if (hasDeltay) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Deltay);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static insertwindowstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static insertwindowstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static insertwindowstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static insertwindowstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private insertwindowstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(insertwindowstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<insertwindowstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(insertwindowstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private insertwindowstrc result;
    
    private insertwindowstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        insertwindowstrc original = result;
        result = new insertwindowstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override insertwindowstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::insertwindowstrc.Descriptor; }
    }
    
    public override insertwindowstrc DefaultInstanceForType {
      get { return global::insertwindowstrc.DefaultInstance; }
    }
    
    public override insertwindowstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is insertwindowstrc) {
        return MergeFrom((insertwindowstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(insertwindowstrc other) {
      if (other == global::insertwindowstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHostid) {
        Hostid = other.Hostid;
      }
      if (other.HasDeltax) {
        Deltax = other.Deltax;
      }
      if (other.HasDeltay) {
        Deltay = other.Deltay;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_insertwindowstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _insertwindowstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHostid = input.ReadInt32(ref result.hostid_);
            break;
          }
          case 17: {
            result.hasDeltax = input.ReadDouble(ref result.deltax_);
            break;
          }
          case 25: {
            result.hasDeltay = input.ReadDouble(ref result.deltay_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHostid {
      get { return result.hasHostid; }
    }
    public int Hostid {
      get { return result.Hostid; }
      set { SetHostid(value); }
    }
    public Builder SetHostid(int value) {
      PrepareBuilder();
      result.hasHostid = true;
      result.hostid_ = value;
      return this;
    }
    public Builder ClearHostid() {
      PrepareBuilder();
      result.hasHostid = false;
      result.hostid_ = 0;
      return this;
    }
    
    public bool HasDeltax {
      get { return result.hasDeltax; }
    }
    public double Deltax {
      get { return result.Deltax; }
      set { SetDeltax(value); }
    }
    public Builder SetDeltax(double value) {
      PrepareBuilder();
      result.hasDeltax = true;
      result.deltax_ = value;
      return this;
    }
    public Builder ClearDeltax() {
      PrepareBuilder();
      result.hasDeltax = false;
      result.deltax_ = 0D;
      return this;
    }
    
    public bool HasDeltay {
      get { return result.hasDeltay; }
    }
    public double Deltay {
      get { return result.Deltay; }
      set { SetDeltay(value); }
    }
    public Builder SetDeltay(double value) {
      PrepareBuilder();
      result.hasDeltay = true;
      result.deltay_ = value;
      return this;
    }
    public Builder ClearDeltay() {
      PrepareBuilder();
      result.hasDeltay = false;
      result.deltay_ = 0D;
      return this;
    }
  }
  static insertwindowstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class roundfloorstrc : pb::GeneratedMessage<roundfloorstrc, roundfloorstrc.Builder> {
  private roundfloorstrc() { }
  private static readonly roundfloorstrc defaultInstance = new roundfloorstrc().MakeReadOnly();
  private static readonly string[] _roundfloorstrcFieldNames = new string[] { "centerX", "centerY", "centerZ", "level", "radius" };
  private static readonly uint[] _roundfloorstrcFieldTags = new uint[] { 17, 25, 33, 42, 9 };
  public static roundfloorstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override roundfloorstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override roundfloorstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_roundfloorstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<roundfloorstrc, roundfloorstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_roundfloorstrc__FieldAccessorTable; }
  }
  
  public const int RadiusFieldNumber = 1;
  private bool hasRadius;
  private double radius_;
  public bool HasRadius {
    get { return hasRadius; }
  }
  public double Radius {
    get { return radius_; }
  }
  
  public const int CenterXFieldNumber = 2;
  private bool hasCenterX;
  private double centerX_;
  public bool HasCenterX {
    get { return hasCenterX; }
  }
  public double CenterX {
    get { return centerX_; }
  }
  
  public const int CenterYFieldNumber = 3;
  private bool hasCenterY;
  private double centerY_;
  public bool HasCenterY {
    get { return hasCenterY; }
  }
  public double CenterY {
    get { return centerY_; }
  }
  
  public const int CenterZFieldNumber = 4;
  private bool hasCenterZ;
  private double centerZ_;
  public bool HasCenterZ {
    get { return hasCenterZ; }
  }
  public double CenterZ {
    get { return centerZ_; }
  }
  
  public const int LevelFieldNumber = 5;
  private bool hasLevel;
  private global::idstrc level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public global::idstrc Level {
    get { return level_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRadius) return false;
      if (!hasCenterX) return false;
      if (!hasCenterY) return false;
      if (!hasCenterZ) return false;
      if (!hasLevel) return false;
      if (!Level.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _roundfloorstrcFieldNames;
    if (hasRadius) {
      output.WriteDouble(1, field_names[4], Radius);
    }
    if (hasCenterX) {
      output.WriteDouble(2, field_names[0], CenterX);
    }
    if (hasCenterY) {
      output.WriteDouble(3, field_names[1], CenterY);
    }
    if (hasCenterZ) {
      output.WriteDouble(4, field_names[2], CenterZ);
    }
    if (hasLevel) {
      output.WriteMessage(5, field_names[3], Level);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRadius) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Radius);
    }
    if (hasCenterX) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, CenterX);
    }
    if (hasCenterY) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, CenterY);
    }
    if (hasCenterZ) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, CenterZ);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, Level);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static roundfloorstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static roundfloorstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static roundfloorstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static roundfloorstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private roundfloorstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(roundfloorstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<roundfloorstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(roundfloorstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private roundfloorstrc result;
    
    private roundfloorstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        roundfloorstrc original = result;
        result = new roundfloorstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override roundfloorstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::roundfloorstrc.Descriptor; }
    }
    
    public override roundfloorstrc DefaultInstanceForType {
      get { return global::roundfloorstrc.DefaultInstance; }
    }
    
    public override roundfloorstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is roundfloorstrc) {
        return MergeFrom((roundfloorstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(roundfloorstrc other) {
      if (other == global::roundfloorstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      if (other.HasCenterX) {
        CenterX = other.CenterX;
      }
      if (other.HasCenterY) {
        CenterY = other.CenterY;
      }
      if (other.HasCenterZ) {
        CenterZ = other.CenterZ;
      }
      if (other.HasLevel) {
        MergeLevel(other.Level);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_roundfloorstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _roundfloorstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasRadius = input.ReadDouble(ref result.radius_);
            break;
          }
          case 17: {
            result.hasCenterX = input.ReadDouble(ref result.centerX_);
            break;
          }
          case 25: {
            result.hasCenterY = input.ReadDouble(ref result.centerY_);
            break;
          }
          case 33: {
            result.hasCenterZ = input.ReadDouble(ref result.centerZ_);
            break;
          }
          case 42: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevel) {
              subBuilder.MergeFrom(Level);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Level = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRadius {
      get { return result.hasRadius; }
    }
    public double Radius {
      get { return result.Radius; }
      set { SetRadius(value); }
    }
    public Builder SetRadius(double value) {
      PrepareBuilder();
      result.hasRadius = true;
      result.radius_ = value;
      return this;
    }
    public Builder ClearRadius() {
      PrepareBuilder();
      result.hasRadius = false;
      result.radius_ = 0D;
      return this;
    }
    
    public bool HasCenterX {
      get { return result.hasCenterX; }
    }
    public double CenterX {
      get { return result.CenterX; }
      set { SetCenterX(value); }
    }
    public Builder SetCenterX(double value) {
      PrepareBuilder();
      result.hasCenterX = true;
      result.centerX_ = value;
      return this;
    }
    public Builder ClearCenterX() {
      PrepareBuilder();
      result.hasCenterX = false;
      result.centerX_ = 0D;
      return this;
    }
    
    public bool HasCenterY {
      get { return result.hasCenterY; }
    }
    public double CenterY {
      get { return result.CenterY; }
      set { SetCenterY(value); }
    }
    public Builder SetCenterY(double value) {
      PrepareBuilder();
      result.hasCenterY = true;
      result.centerY_ = value;
      return this;
    }
    public Builder ClearCenterY() {
      PrepareBuilder();
      result.hasCenterY = false;
      result.centerY_ = 0D;
      return this;
    }
    
    public bool HasCenterZ {
      get { return result.hasCenterZ; }
    }
    public double CenterZ {
      get { return result.CenterZ; }
      set { SetCenterZ(value); }
    }
    public Builder SetCenterZ(double value) {
      PrepareBuilder();
      result.hasCenterZ = true;
      result.centerZ_ = value;
      return this;
    }
    public Builder ClearCenterZ() {
      PrepareBuilder();
      result.hasCenterZ = false;
      result.centerZ_ = 0D;
      return this;
    }
    
    public bool HasLevel {
     get { return result.hasLevel; }
    }
    public global::idstrc Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder SetLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevel &&
          result.level_ != global::idstrc.DefaultInstance) {
          result.level_ = global::idstrc.CreateBuilder(result.level_).MergeFrom(value).BuildPartial();
      } else {
        result.level_ = value;
      }
      result.hasLevel = true;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = null;
      return this;
    }
  }
  static roundfloorstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class floorstrc : pb::GeneratedMessage<floorstrc, floorstrc.Builder> {
  private floorstrc() { }
  private static readonly floorstrc defaultInstance = new floorstrc().MakeReadOnly();
  private static readonly string[] _floorstrcFieldNames = new string[] { "level", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _floorstrcFieldTags = new uint[] { 58, 9, 17, 25, 33, 41, 49 };
  public static floorstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override floorstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override floorstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_floorstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<floorstrc, floorstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_floorstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int LevelFieldNumber = 7;
  private bool hasLevel;
  private global::idstrc level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public global::idstrc Level {
    get { return level_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasLevel) return false;
      if (!Level.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _floorstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (hasLevel) {
      output.WriteMessage(7, field_names[0], Level);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Level);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static floorstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static floorstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static floorstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static floorstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static floorstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static floorstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static floorstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static floorstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static floorstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static floorstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private floorstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(floorstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<floorstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(floorstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private floorstrc result;
    
    private floorstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        floorstrc original = result;
        result = new floorstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override floorstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::floorstrc.Descriptor; }
    }
    
    public override floorstrc DefaultInstanceForType {
      get { return global::floorstrc.DefaultInstance; }
    }
    
    public override floorstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is floorstrc) {
        return MergeFrom((floorstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(floorstrc other) {
      if (other == global::floorstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasLevel) {
        MergeLevel(other.Level);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_floorstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _floorstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevel) {
              subBuilder.MergeFrom(Level);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Level = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasLevel {
     get { return result.hasLevel; }
    }
    public global::idstrc Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder SetLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevel &&
          result.level_ != global::idstrc.DefaultInstance) {
          result.level_ = global::idstrc.CreateBuilder(result.level_).MergeFrom(value).BuildPartial();
      } else {
        result.level_ = value;
      }
      result.hasLevel = true;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = null;
      return this;
    }
  }
  static floorstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class columnstrc : pb::GeneratedMessage<columnstrc, columnstrc.Builder> {
  private columnstrc() { }
  private static readonly columnstrc defaultInstance = new columnstrc().MakeReadOnly();
  private static readonly string[] _columnstrcFieldNames = new string[] { "baselevel", "familyid", "p0coordx", "p0coordy", "p0coordz", "toplevel", "width" };
  private static readonly uint[] _columnstrcFieldTags = new uint[] { 34, 58, 9, 17, 25, 42, 49 };
  public static columnstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override columnstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override columnstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_columnstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<columnstrc, columnstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_columnstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int BaselevelFieldNumber = 4;
  private bool hasBaselevel;
  private global::idstrc baselevel_;
  public bool HasBaselevel {
    get { return hasBaselevel; }
  }
  public global::idstrc Baselevel {
    get { return baselevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int ToplevelFieldNumber = 5;
  private bool hasToplevel;
  private global::idstrc toplevel_;
  public bool HasToplevel {
    get { return hasToplevel; }
  }
  public global::idstrc Toplevel {
    get { return toplevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int WidthFieldNumber = 6;
  private bool hasWidth;
  private double width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  public double Width {
    get { return width_; }
  }
  
  public const int FamilyidFieldNumber = 7;
  private bool hasFamilyid;
  private global::idstrc familyid_;
  public bool HasFamilyid {
    get { return hasFamilyid; }
  }
  public global::idstrc Familyid {
    get { return familyid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasBaselevel) return false;
      if (!hasToplevel) return false;
      if (!hasWidth) return false;
      if (!hasFamilyid) return false;
      if (!Baselevel.IsInitialized) return false;
      if (!Toplevel.IsInitialized) return false;
      if (!Familyid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _columnstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[4], P0Coordz);
    }
    if (hasBaselevel) {
      output.WriteMessage(4, field_names[0], Baselevel);
    }
    if (hasToplevel) {
      output.WriteMessage(5, field_names[5], Toplevel);
    }
    if (hasWidth) {
      output.WriteDouble(6, field_names[6], Width);
    }
    if (hasFamilyid) {
      output.WriteMessage(7, field_names[1], Familyid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasBaselevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Baselevel);
    }
    if (hasToplevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, Toplevel);
    }
    if (hasWidth) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, Width);
    }
    if (hasFamilyid) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Familyid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static columnstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static columnstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static columnstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static columnstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static columnstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static columnstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static columnstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static columnstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static columnstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static columnstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private columnstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(columnstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<columnstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(columnstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private columnstrc result;
    
    private columnstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        columnstrc original = result;
        result = new columnstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override columnstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::columnstrc.Descriptor; }
    }
    
    public override columnstrc DefaultInstanceForType {
      get { return global::columnstrc.DefaultInstance; }
    }
    
    public override columnstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is columnstrc) {
        return MergeFrom((columnstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(columnstrc other) {
      if (other == global::columnstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasBaselevel) {
        MergeBaselevel(other.Baselevel);
      }
      if (other.HasToplevel) {
        MergeToplevel(other.Toplevel);
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasFamilyid) {
        MergeFamilyid(other.Familyid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_columnstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _columnstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 34: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBaselevel) {
              subBuilder.MergeFrom(Baselevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Baselevel = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasToplevel) {
              subBuilder.MergeFrom(Toplevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Toplevel = subBuilder.BuildPartial();
            break;
          }
          case 49: {
            result.hasWidth = input.ReadDouble(ref result.width_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamilyid) {
              subBuilder.MergeFrom(Familyid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Familyid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasBaselevel {
     get { return result.hasBaselevel; }
    }
    public global::idstrc Baselevel {
      get { return result.Baselevel; }
      set { SetBaselevel(value); }
    }
    public Builder SetBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = value;
      return this;
    }
    public Builder SetBaselevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBaselevel &&
          result.baselevel_ != global::idstrc.DefaultInstance) {
          result.baselevel_ = global::idstrc.CreateBuilder(result.baselevel_).MergeFrom(value).BuildPartial();
      } else {
        result.baselevel_ = value;
      }
      result.hasBaselevel = true;
      return this;
    }
    public Builder ClearBaselevel() {
      PrepareBuilder();
      result.hasBaselevel = false;
      result.baselevel_ = null;
      return this;
    }
    
    public bool HasToplevel {
     get { return result.hasToplevel; }
    }
    public global::idstrc Toplevel {
      get { return result.Toplevel; }
      set { SetToplevel(value); }
    }
    public Builder SetToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = value;
      return this;
    }
    public Builder SetToplevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasToplevel &&
          result.toplevel_ != global::idstrc.DefaultInstance) {
          result.toplevel_ = global::idstrc.CreateBuilder(result.toplevel_).MergeFrom(value).BuildPartial();
      } else {
        result.toplevel_ = value;
      }
      result.hasToplevel = true;
      return this;
    }
    public Builder ClearToplevel() {
      PrepareBuilder();
      result.hasToplevel = false;
      result.toplevel_ = null;
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    public double Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    public Builder SetWidth(double value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0D;
      return this;
    }
    
    public bool HasFamilyid {
     get { return result.hasFamilyid; }
    }
    public global::idstrc Familyid {
      get { return result.Familyid; }
      set { SetFamilyid(value); }
    }
    public Builder SetFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = value;
      return this;
    }
    public Builder SetFamilyid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamilyid &&
          result.familyid_ != global::idstrc.DefaultInstance) {
          result.familyid_ = global::idstrc.CreateBuilder(result.familyid_).MergeFrom(value).BuildPartial();
      } else {
        result.familyid_ = value;
      }
      result.hasFamilyid = true;
      return this;
    }
    public Builder ClearFamilyid() {
      PrepareBuilder();
      result.hasFamilyid = false;
      result.familyid_ = null;
      return this;
    }
  }
  static columnstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class columnpointsstrc : pb::GeneratedMessage<columnpointsstrc, columnpointsstrc.Builder> {
  private columnpointsstrc() { }
  private static readonly columnpointsstrc defaultInstance = new columnpointsstrc().MakeReadOnly();
  private static readonly string[] _columnpointsstrcFieldNames = new string[] { "baselevel", "familyid", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "toplevel", "width" };
  private static readonly uint[] _columnpointsstrcFieldTags = new uint[] { 58, 82, 9, 17, 25, 33, 41, 49, 66, 73 };
  public static columnpointsstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override columnpointsstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override columnpointsstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_columnpointsstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<columnpointsstrc, columnpointsstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_columnpointsstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int BaselevelFieldNumber = 7;
  private bool hasBaselevel;
  private global::idstrc baselevel_;
  public bool HasBaselevel {
    get { return hasBaselevel; }
  }
  public global::idstrc Baselevel {
    get { return baselevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int ToplevelFieldNumber = 8;
  private bool hasToplevel;
  private global::idstrc toplevel_;
  public bool HasToplevel {
    get { return hasToplevel; }
  }
  public global::idstrc Toplevel {
    get { return toplevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int WidthFieldNumber = 9;
  private bool hasWidth;
  private double width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  public double Width {
    get { return width_; }
  }
  
  public const int FamilyidFieldNumber = 10;
  private bool hasFamilyid;
  private global::idstrc familyid_;
  public bool HasFamilyid {
    get { return hasFamilyid; }
  }
  public global::idstrc Familyid {
    get { return familyid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasBaselevel) return false;
      if (!hasToplevel) return false;
      if (!hasWidth) return false;
      if (!hasFamilyid) return false;
      if (!Baselevel.IsInitialized) return false;
      if (!Toplevel.IsInitialized) return false;
      if (!Familyid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _columnpointsstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[4], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[5], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[6], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[7], P1Coordz);
    }
    if (hasBaselevel) {
      output.WriteMessage(7, field_names[0], Baselevel);
    }
    if (hasToplevel) {
      output.WriteMessage(8, field_names[8], Toplevel);
    }
    if (hasWidth) {
      output.WriteDouble(9, field_names[9], Width);
    }
    if (hasFamilyid) {
      output.WriteMessage(10, field_names[1], Familyid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasBaselevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Baselevel);
    }
    if (hasToplevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, Toplevel);
    }
    if (hasWidth) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Width);
    }
    if (hasFamilyid) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, Familyid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static columnpointsstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static columnpointsstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static columnpointsstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static columnpointsstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private columnpointsstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(columnpointsstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<columnpointsstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(columnpointsstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private columnpointsstrc result;
    
    private columnpointsstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        columnpointsstrc original = result;
        result = new columnpointsstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override columnpointsstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::columnpointsstrc.Descriptor; }
    }
    
    public override columnpointsstrc DefaultInstanceForType {
      get { return global::columnpointsstrc.DefaultInstance; }
    }
    
    public override columnpointsstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is columnpointsstrc) {
        return MergeFrom((columnpointsstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(columnpointsstrc other) {
      if (other == global::columnpointsstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasBaselevel) {
        MergeBaselevel(other.Baselevel);
      }
      if (other.HasToplevel) {
        MergeToplevel(other.Toplevel);
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasFamilyid) {
        MergeFamilyid(other.Familyid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_columnpointsstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _columnpointsstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 58: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBaselevel) {
              subBuilder.MergeFrom(Baselevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Baselevel = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasToplevel) {
              subBuilder.MergeFrom(Toplevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Toplevel = subBuilder.BuildPartial();
            break;
          }
          case 73: {
            result.hasWidth = input.ReadDouble(ref result.width_);
            break;
          }
          case 82: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamilyid) {
              subBuilder.MergeFrom(Familyid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Familyid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasBaselevel {
     get { return result.hasBaselevel; }
    }
    public global::idstrc Baselevel {
      get { return result.Baselevel; }
      set { SetBaselevel(value); }
    }
    public Builder SetBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = value;
      return this;
    }
    public Builder SetBaselevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBaselevel = true;
      result.baselevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBaselevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBaselevel &&
          result.baselevel_ != global::idstrc.DefaultInstance) {
          result.baselevel_ = global::idstrc.CreateBuilder(result.baselevel_).MergeFrom(value).BuildPartial();
      } else {
        result.baselevel_ = value;
      }
      result.hasBaselevel = true;
      return this;
    }
    public Builder ClearBaselevel() {
      PrepareBuilder();
      result.hasBaselevel = false;
      result.baselevel_ = null;
      return this;
    }
    
    public bool HasToplevel {
     get { return result.hasToplevel; }
    }
    public global::idstrc Toplevel {
      get { return result.Toplevel; }
      set { SetToplevel(value); }
    }
    public Builder SetToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = value;
      return this;
    }
    public Builder SetToplevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasToplevel = true;
      result.toplevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeToplevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasToplevel &&
          result.toplevel_ != global::idstrc.DefaultInstance) {
          result.toplevel_ = global::idstrc.CreateBuilder(result.toplevel_).MergeFrom(value).BuildPartial();
      } else {
        result.toplevel_ = value;
      }
      result.hasToplevel = true;
      return this;
    }
    public Builder ClearToplevel() {
      PrepareBuilder();
      result.hasToplevel = false;
      result.toplevel_ = null;
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    public double Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    public Builder SetWidth(double value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0D;
      return this;
    }
    
    public bool HasFamilyid {
     get { return result.hasFamilyid; }
    }
    public global::idstrc Familyid {
      get { return result.Familyid; }
      set { SetFamilyid(value); }
    }
    public Builder SetFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = value;
      return this;
    }
    public Builder SetFamilyid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamilyid &&
          result.familyid_ != global::idstrc.DefaultInstance) {
          result.familyid_ = global::idstrc.CreateBuilder(result.familyid_).MergeFrom(value).BuildPartial();
      } else {
        result.familyid_ = value;
      }
      result.hasFamilyid = true;
      return this;
    }
    public Builder ClearFamilyid() {
      PrepareBuilder();
      result.hasFamilyid = false;
      result.familyid_ = null;
      return this;
    }
  }
  static columnpointsstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class flooropeningstrc : pb::GeneratedMessage<flooropeningstrc, flooropeningstrc.Builder> {
  private flooropeningstrc() { }
  private static readonly flooropeningstrc defaultInstance = new flooropeningstrc().MakeReadOnly();
  private static readonly string[] _flooropeningstrcFieldNames = new string[] { "floorid", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz" };
  private static readonly uint[] _flooropeningstrcFieldTags = new uint[] { 56, 9, 17, 25, 33, 41, 49 };
  public static flooropeningstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override flooropeningstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override flooropeningstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_flooropeningstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<flooropeningstrc, flooropeningstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_flooropeningstrc__FieldAccessorTable; }
  }
  
  public const int P0CoordxFieldNumber = 1;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 2;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 3;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 4;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 5;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 6;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int FlooridFieldNumber = 7;
  private bool hasFloorid;
  private int floorid_;
  public bool HasFloorid {
    get { return hasFloorid; }
  }
  public int Floorid {
    get { return floorid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasFloorid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _flooropeningstrcFieldNames;
    if (hasP0Coordx) {
      output.WriteDouble(1, field_names[1], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(2, field_names[2], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(3, field_names[3], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(4, field_names[4], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(5, field_names[5], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(6, field_names[6], P1Coordz);
    }
    if (hasFloorid) {
      output.WriteInt32(7, field_names[0], Floorid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordz);
    }
    if (hasFloorid) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Floorid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static flooropeningstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static flooropeningstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static flooropeningstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static flooropeningstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private flooropeningstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(flooropeningstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<flooropeningstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(flooropeningstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private flooropeningstrc result;
    
    private flooropeningstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        flooropeningstrc original = result;
        result = new flooropeningstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override flooropeningstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::flooropeningstrc.Descriptor; }
    }
    
    public override flooropeningstrc DefaultInstanceForType {
      get { return global::flooropeningstrc.DefaultInstance; }
    }
    
    public override flooropeningstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is flooropeningstrc) {
        return MergeFrom((flooropeningstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(flooropeningstrc other) {
      if (other == global::flooropeningstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasFloorid) {
        Floorid = other.Floorid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_flooropeningstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _flooropeningstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 17: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 25: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 33: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 41: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 49: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 56: {
            result.hasFloorid = input.ReadInt32(ref result.floorid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasFloorid {
      get { return result.hasFloorid; }
    }
    public int Floorid {
      get { return result.Floorid; }
      set { SetFloorid(value); }
    }
    public Builder SetFloorid(int value) {
      PrepareBuilder();
      result.hasFloorid = true;
      result.floorid_ = value;
      return this;
    }
    public Builder ClearFloorid() {
      PrepareBuilder();
      result.hasFloorid = false;
      result.floorid_ = 0;
      return this;
    }
  }
  static flooropeningstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class polylinefloorstrc : pb::GeneratedMessage<polylinefloorstrc, polylinefloorstrc.Builder> {
  private polylinefloorstrc() { }
  private static readonly polylinefloorstrc defaultInstance = new polylinefloorstrc().MakeReadOnly();
  private static readonly string[] _polylinefloorstrcFieldNames = new string[] { "familyid", "floor", "points" };
  private static readonly uint[] _polylinefloorstrcFieldTags = new uint[] { 26, 10, 17 };
  public static polylinefloorstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override polylinefloorstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override polylinefloorstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_polylinefloorstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<polylinefloorstrc, polylinefloorstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_polylinefloorstrc__FieldAccessorTable; }
  }
  
  public const int FloorFieldNumber = 1;
  private bool hasFloor;
  private global::idstrc floor_;
  public bool HasFloor {
    get { return hasFloor; }
  }
  public global::idstrc Floor {
    get { return floor_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int PointsFieldNumber = 2;
  private pbc::PopsicleList<double> points_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PointsList {
    get { return pbc::Lists.AsReadOnly(points_); }
  }
  public int PointsCount {
    get { return points_.Count; }
  }
  public double GetPoints(int index) {
    return points_[index];
  }
  
  public const int FamilyidFieldNumber = 3;
  private bool hasFamilyid;
  private global::idstrc familyid_;
  public bool HasFamilyid {
    get { return hasFamilyid; }
  }
  public global::idstrc Familyid {
    get { return familyid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFloor) return false;
      if (!hasFamilyid) return false;
      if (!Floor.IsInitialized) return false;
      if (!Familyid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _polylinefloorstrcFieldNames;
    if (hasFloor) {
      output.WriteMessage(1, field_names[1], Floor);
    }
    if (points_.Count > 0) {
      output.WriteDoubleArray(2, field_names[2], points_);
    }
    if (hasFamilyid) {
      output.WriteMessage(3, field_names[0], Familyid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFloor) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Floor);
    }
    {
      int dataSize = 0;
      dataSize = 8 * points_.Count;
      size += dataSize;
      size += 1 * points_.Count;
    }
    if (hasFamilyid) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, Familyid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static polylinefloorstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static polylinefloorstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static polylinefloorstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static polylinefloorstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private polylinefloorstrc MakeReadOnly() {
    points_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(polylinefloorstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<polylinefloorstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(polylinefloorstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private polylinefloorstrc result;
    
    private polylinefloorstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        polylinefloorstrc original = result;
        result = new polylinefloorstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override polylinefloorstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::polylinefloorstrc.Descriptor; }
    }
    
    public override polylinefloorstrc DefaultInstanceForType {
      get { return global::polylinefloorstrc.DefaultInstance; }
    }
    
    public override polylinefloorstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is polylinefloorstrc) {
        return MergeFrom((polylinefloorstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(polylinefloorstrc other) {
      if (other == global::polylinefloorstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFloor) {
        MergeFloor(other.Floor);
      }
      if (other.points_.Count != 0) {
        result.points_.Add(other.points_);
      }
      if (other.HasFamilyid) {
        MergeFamilyid(other.Familyid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_polylinefloorstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _polylinefloorstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFloor) {
              subBuilder.MergeFrom(Floor);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Floor = subBuilder.BuildPartial();
            break;
          }
          case 18:
          case 17: {
            input.ReadDoubleArray(tag, field_name, result.points_);
            break;
          }
          case 26: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamilyid) {
              subBuilder.MergeFrom(Familyid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Familyid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFloor {
     get { return result.hasFloor; }
    }
    public global::idstrc Floor {
      get { return result.Floor; }
      set { SetFloor(value); }
    }
    public Builder SetFloor(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFloor = true;
      result.floor_ = value;
      return this;
    }
    public Builder SetFloor(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFloor = true;
      result.floor_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFloor(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFloor &&
          result.floor_ != global::idstrc.DefaultInstance) {
          result.floor_ = global::idstrc.CreateBuilder(result.floor_).MergeFrom(value).BuildPartial();
      } else {
        result.floor_ = value;
      }
      result.hasFloor = true;
      return this;
    }
    public Builder ClearFloor() {
      PrepareBuilder();
      result.hasFloor = false;
      result.floor_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<double> PointsList {
      get { return PrepareBuilder().points_; }
    }
    public int PointsCount {
      get { return result.PointsCount; }
    }
    public double GetPoints(int index) {
      return result.GetPoints(index);
    }
    public Builder SetPoints(int index, double value) {
      PrepareBuilder();
      result.points_[index] = value;
      return this;
    }
    public Builder AddPoints(double value) {
      PrepareBuilder();
      result.points_.Add(value);
      return this;
    }
    public Builder AddRangePoints(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.points_.Add(values);
      return this;
    }
    public Builder ClearPoints() {
      PrepareBuilder();
      result.points_.Clear();
      return this;
    }
    
    public bool HasFamilyid {
     get { return result.hasFamilyid; }
    }
    public global::idstrc Familyid {
      get { return result.Familyid; }
      set { SetFamilyid(value); }
    }
    public Builder SetFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = value;
      return this;
    }
    public Builder SetFamilyid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamilyid = true;
      result.familyid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamilyid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamilyid &&
          result.familyid_ != global::idstrc.DefaultInstance) {
          result.familyid_ = global::idstrc.CreateBuilder(result.familyid_).MergeFrom(value).BuildPartial();
      } else {
        result.familyid_ = value;
      }
      result.hasFamilyid = true;
      return this;
    }
    public Builder ClearFamilyid() {
      PrepareBuilder();
      result.hasFamilyid = false;
      result.familyid_ = null;
      return this;
    }
  }
  static polylinefloorstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class linestrc : pb::GeneratedMessage<linestrc, linestrc.Builder> {
  private linestrc() { }
  private static readonly linestrc defaultInstance = new linestrc().MakeReadOnly();
  private static readonly string[] _linestrcFieldNames = new string[] { "points" };
  private static readonly uint[] _linestrcFieldTags = new uint[] { 9 };
  public static linestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override linestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override linestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_linestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<linestrc, linestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_linestrc__FieldAccessorTable; }
  }
  
  public const int PointsFieldNumber = 1;
  private pbc::PopsicleList<double> points_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PointsList {
    get { return pbc::Lists.AsReadOnly(points_); }
  }
  public int PointsCount {
    get { return points_.Count; }
  }
  public double GetPoints(int index) {
    return points_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _linestrcFieldNames;
    if (points_.Count > 0) {
      output.WriteDoubleArray(1, field_names[0], points_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * points_.Count;
      size += dataSize;
      size += 1 * points_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static linestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static linestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static linestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static linestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static linestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static linestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static linestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static linestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static linestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static linestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private linestrc MakeReadOnly() {
    points_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(linestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<linestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(linestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private linestrc result;
    
    private linestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        linestrc original = result;
        result = new linestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override linestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::linestrc.Descriptor; }
    }
    
    public override linestrc DefaultInstanceForType {
      get { return global::linestrc.DefaultInstance; }
    }
    
    public override linestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is linestrc) {
        return MergeFrom((linestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(linestrc other) {
      if (other == global::linestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.points_.Count != 0) {
        result.points_.Add(other.points_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_linestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _linestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.points_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> PointsList {
      get { return PrepareBuilder().points_; }
    }
    public int PointsCount {
      get { return result.PointsCount; }
    }
    public double GetPoints(int index) {
      return result.GetPoints(index);
    }
    public Builder SetPoints(int index, double value) {
      PrepareBuilder();
      result.points_[index] = value;
      return this;
    }
    public Builder AddPoints(double value) {
      PrepareBuilder();
      result.points_.Add(value);
      return this;
    }
    public Builder AddRangePoints(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.points_.Add(values);
      return this;
    }
    public Builder ClearPoints() {
      PrepareBuilder();
      result.points_.Clear();
      return this;
    }
  }
  static linestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class matrixstrc : pb::GeneratedMessage<matrixstrc, matrixstrc.Builder> {
  private matrixstrc() { }
  private static readonly matrixstrc defaultInstance = new matrixstrc().MakeReadOnly();
  private static readonly string[] _matrixstrcFieldNames = new string[] { "lines" };
  private static readonly uint[] _matrixstrcFieldTags = new uint[] { 10 };
  public static matrixstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override matrixstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override matrixstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_matrixstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<matrixstrc, matrixstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_matrixstrc__FieldAccessorTable; }
  }
  
  public const int LinesFieldNumber = 1;
  private pbc::PopsicleList<global::linestrc> lines_ = new pbc::PopsicleList<global::linestrc>();
  public scg::IList<global::linestrc> LinesList {
    get { return lines_; }
  }
  public int LinesCount {
    get { return lines_.Count; }
  }
  public global::linestrc GetLines(int index) {
    return lines_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _matrixstrcFieldNames;
    if (lines_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], lines_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::linestrc element in LinesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static matrixstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static matrixstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static matrixstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static matrixstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static matrixstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static matrixstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static matrixstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static matrixstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static matrixstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static matrixstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private matrixstrc MakeReadOnly() {
    lines_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(matrixstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<matrixstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(matrixstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private matrixstrc result;
    
    private matrixstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        matrixstrc original = result;
        result = new matrixstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override matrixstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::matrixstrc.Descriptor; }
    }
    
    public override matrixstrc DefaultInstanceForType {
      get { return global::matrixstrc.DefaultInstance; }
    }
    
    public override matrixstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is matrixstrc) {
        return MergeFrom((matrixstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(matrixstrc other) {
      if (other == global::matrixstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.lines_.Count != 0) {
        result.lines_.Add(other.lines_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_matrixstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _matrixstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.lines_, global::linestrc.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::linestrc> LinesList {
      get { return PrepareBuilder().lines_; }
    }
    public int LinesCount {
      get { return result.LinesCount; }
    }
    public global::linestrc GetLines(int index) {
      return result.GetLines(index);
    }
    public Builder SetLines(int index, global::linestrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.lines_[index] = value;
      return this;
    }
    public Builder SetLines(int index, global::linestrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.lines_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddLines(global::linestrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.lines_.Add(value);
      return this;
    }
    public Builder AddLines(global::linestrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.lines_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeLines(scg::IEnumerable<global::linestrc> values) {
      PrepareBuilder();
      result.lines_.Add(values);
      return this;
    }
    public Builder ClearLines() {
      PrepareBuilder();
      result.lines_.Clear();
      return this;
    }
  }
  static matrixstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class intersectstrc : pb::GeneratedMessage<intersectstrc, intersectstrc.Builder> {
  private intersectstrc() { }
  private static readonly intersectstrc defaultInstance = new intersectstrc().MakeReadOnly();
  private static readonly string[] _intersectstrcFieldNames = new string[] { "floorId", "wallId" };
  private static readonly uint[] _intersectstrcFieldTags = new uint[] { 18, 10 };
  public static intersectstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override intersectstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override intersectstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_intersectstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<intersectstrc, intersectstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_intersectstrc__FieldAccessorTable; }
  }
  
  public const int WallIdFieldNumber = 1;
  private bool hasWallId;
  private global::idstrc wallId_;
  public bool HasWallId {
    get { return hasWallId; }
  }
  public global::idstrc WallId {
    get { return wallId_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int FloorIdFieldNumber = 2;
  private bool hasFloorId;
  private global::idstrc floorId_;
  public bool HasFloorId {
    get { return hasFloorId; }
  }
  public global::idstrc FloorId {
    get { return floorId_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasWallId) return false;
      if (!hasFloorId) return false;
      if (!WallId.IsInitialized) return false;
      if (!FloorId.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _intersectstrcFieldNames;
    if (hasWallId) {
      output.WriteMessage(1, field_names[1], WallId);
    }
    if (hasFloorId) {
      output.WriteMessage(2, field_names[0], FloorId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasWallId) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, WallId);
    }
    if (hasFloorId) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, FloorId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static intersectstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static intersectstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static intersectstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static intersectstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static intersectstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static intersectstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static intersectstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static intersectstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static intersectstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static intersectstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private intersectstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(intersectstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<intersectstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(intersectstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private intersectstrc result;
    
    private intersectstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        intersectstrc original = result;
        result = new intersectstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override intersectstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::intersectstrc.Descriptor; }
    }
    
    public override intersectstrc DefaultInstanceForType {
      get { return global::intersectstrc.DefaultInstance; }
    }
    
    public override intersectstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is intersectstrc) {
        return MergeFrom((intersectstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(intersectstrc other) {
      if (other == global::intersectstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasWallId) {
        MergeWallId(other.WallId);
      }
      if (other.HasFloorId) {
        MergeFloorId(other.FloorId);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_intersectstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _intersectstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasWallId) {
              subBuilder.MergeFrom(WallId);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            WallId = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFloorId) {
              subBuilder.MergeFrom(FloorId);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            FloorId = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasWallId {
     get { return result.hasWallId; }
    }
    public global::idstrc WallId {
      get { return result.WallId; }
      set { SetWallId(value); }
    }
    public Builder SetWallId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasWallId = true;
      result.wallId_ = value;
      return this;
    }
    public Builder SetWallId(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasWallId = true;
      result.wallId_ = builderForValue.Build();
      return this;
    }
    public Builder MergeWallId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasWallId &&
          result.wallId_ != global::idstrc.DefaultInstance) {
          result.wallId_ = global::idstrc.CreateBuilder(result.wallId_).MergeFrom(value).BuildPartial();
      } else {
        result.wallId_ = value;
      }
      result.hasWallId = true;
      return this;
    }
    public Builder ClearWallId() {
      PrepareBuilder();
      result.hasWallId = false;
      result.wallId_ = null;
      return this;
    }
    
    public bool HasFloorId {
     get { return result.hasFloorId; }
    }
    public global::idstrc FloorId {
      get { return result.FloorId; }
      set { SetFloorId(value); }
    }
    public Builder SetFloorId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFloorId = true;
      result.floorId_ = value;
      return this;
    }
    public Builder SetFloorId(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFloorId = true;
      result.floorId_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFloorId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFloorId &&
          result.floorId_ != global::idstrc.DefaultInstance) {
          result.floorId_ = global::idstrc.CreateBuilder(result.floorId_).MergeFrom(value).BuildPartial();
      } else {
        result.floorId_ = value;
      }
      result.hasFloorId = true;
      return this;
    }
    public Builder ClearFloorId() {
      PrepareBuilder();
      result.hasFloorId = false;
      result.floorId_ = null;
      return this;
    }
  }
  static intersectstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class stairrunstrc : pb::GeneratedMessage<stairrunstrc, stairrunstrc.Builder> {
  private stairrunstrc() { }
  private static readonly stairrunstrc defaultInstance = new stairrunstrc().MakeReadOnly();
  private static readonly string[] _stairrunstrcFieldNames = new string[] { "bottomLevel", "family", "p0coordx", "p0coordy", "p0coordz", "p1coordx", "p1coordy", "p1coordz", "topLevel", "width" };
  private static readonly uint[] _stairrunstrcFieldTags = new uint[] { 10, 82, 25, 33, 41, 49, 57, 65, 18, 73 };
  public static stairrunstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override stairrunstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override stairrunstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_stairrunstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<stairrunstrc, stairrunstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_stairrunstrc__FieldAccessorTable; }
  }
  
  public const int BottomLevelFieldNumber = 1;
  private bool hasBottomLevel;
  private global::idstrc bottomLevel_;
  public bool HasBottomLevel {
    get { return hasBottomLevel; }
  }
  public global::idstrc BottomLevel {
    get { return bottomLevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int TopLevelFieldNumber = 2;
  private bool hasTopLevel;
  private global::idstrc topLevel_;
  public bool HasTopLevel {
    get { return hasTopLevel; }
  }
  public global::idstrc TopLevel {
    get { return topLevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int P0CoordxFieldNumber = 3;
  private bool hasP0Coordx;
  private double p0Coordx_;
  public bool HasP0Coordx {
    get { return hasP0Coordx; }
  }
  public double P0Coordx {
    get { return p0Coordx_; }
  }
  
  public const int P0CoordyFieldNumber = 4;
  private bool hasP0Coordy;
  private double p0Coordy_;
  public bool HasP0Coordy {
    get { return hasP0Coordy; }
  }
  public double P0Coordy {
    get { return p0Coordy_; }
  }
  
  public const int P0CoordzFieldNumber = 5;
  private bool hasP0Coordz;
  private double p0Coordz_;
  public bool HasP0Coordz {
    get { return hasP0Coordz; }
  }
  public double P0Coordz {
    get { return p0Coordz_; }
  }
  
  public const int P1CoordxFieldNumber = 6;
  private bool hasP1Coordx;
  private double p1Coordx_;
  public bool HasP1Coordx {
    get { return hasP1Coordx; }
  }
  public double P1Coordx {
    get { return p1Coordx_; }
  }
  
  public const int P1CoordyFieldNumber = 7;
  private bool hasP1Coordy;
  private double p1Coordy_;
  public bool HasP1Coordy {
    get { return hasP1Coordy; }
  }
  public double P1Coordy {
    get { return p1Coordy_; }
  }
  
  public const int P1CoordzFieldNumber = 8;
  private bool hasP1Coordz;
  private double p1Coordz_;
  public bool HasP1Coordz {
    get { return hasP1Coordz; }
  }
  public double P1Coordz {
    get { return p1Coordz_; }
  }
  
  public const int WidthFieldNumber = 9;
  private bool hasWidth;
  private double width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  public double Width {
    get { return width_; }
  }
  
  public const int FamilyFieldNumber = 10;
  private bool hasFamily;
  private global::idstrc family_;
  public bool HasFamily {
    get { return hasFamily; }
  }
  public global::idstrc Family {
    get { return family_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBottomLevel) return false;
      if (!hasTopLevel) return false;
      if (!hasP0Coordx) return false;
      if (!hasP0Coordy) return false;
      if (!hasP0Coordz) return false;
      if (!hasP1Coordx) return false;
      if (!hasP1Coordy) return false;
      if (!hasP1Coordz) return false;
      if (!hasWidth) return false;
      if (!hasFamily) return false;
      if (!BottomLevel.IsInitialized) return false;
      if (!TopLevel.IsInitialized) return false;
      if (!Family.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _stairrunstrcFieldNames;
    if (hasBottomLevel) {
      output.WriteMessage(1, field_names[0], BottomLevel);
    }
    if (hasTopLevel) {
      output.WriteMessage(2, field_names[8], TopLevel);
    }
    if (hasP0Coordx) {
      output.WriteDouble(3, field_names[2], P0Coordx);
    }
    if (hasP0Coordy) {
      output.WriteDouble(4, field_names[3], P0Coordy);
    }
    if (hasP0Coordz) {
      output.WriteDouble(5, field_names[4], P0Coordz);
    }
    if (hasP1Coordx) {
      output.WriteDouble(6, field_names[5], P1Coordx);
    }
    if (hasP1Coordy) {
      output.WriteDouble(7, field_names[6], P1Coordy);
    }
    if (hasP1Coordz) {
      output.WriteDouble(8, field_names[7], P1Coordz);
    }
    if (hasWidth) {
      output.WriteDouble(9, field_names[9], Width);
    }
    if (hasFamily) {
      output.WriteMessage(10, field_names[1], Family);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBottomLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, BottomLevel);
    }
    if (hasTopLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, TopLevel);
    }
    if (hasP0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0Coordx);
    }
    if (hasP0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P0Coordy);
    }
    if (hasP0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P0Coordz);
    }
    if (hasP1Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1Coordx);
    }
    if (hasP1Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, P1Coordy);
    }
    if (hasP1Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, P1Coordz);
    }
    if (hasWidth) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Width);
    }
    if (hasFamily) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, Family);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static stairrunstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static stairrunstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static stairrunstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static stairrunstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static stairrunstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private stairrunstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(stairrunstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<stairrunstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(stairrunstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private stairrunstrc result;
    
    private stairrunstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        stairrunstrc original = result;
        result = new stairrunstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override stairrunstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::stairrunstrc.Descriptor; }
    }
    
    public override stairrunstrc DefaultInstanceForType {
      get { return global::stairrunstrc.DefaultInstance; }
    }
    
    public override stairrunstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is stairrunstrc) {
        return MergeFrom((stairrunstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(stairrunstrc other) {
      if (other == global::stairrunstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBottomLevel) {
        MergeBottomLevel(other.BottomLevel);
      }
      if (other.HasTopLevel) {
        MergeTopLevel(other.TopLevel);
      }
      if (other.HasP0Coordx) {
        P0Coordx = other.P0Coordx;
      }
      if (other.HasP0Coordy) {
        P0Coordy = other.P0Coordy;
      }
      if (other.HasP0Coordz) {
        P0Coordz = other.P0Coordz;
      }
      if (other.HasP1Coordx) {
        P1Coordx = other.P1Coordx;
      }
      if (other.HasP1Coordy) {
        P1Coordy = other.P1Coordy;
      }
      if (other.HasP1Coordz) {
        P1Coordz = other.P1Coordz;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasFamily) {
        MergeFamily(other.Family);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_stairrunstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _stairrunstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBottomLevel) {
              subBuilder.MergeFrom(BottomLevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            BottomLevel = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasTopLevel) {
              subBuilder.MergeFrom(TopLevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TopLevel = subBuilder.BuildPartial();
            break;
          }
          case 25: {
            result.hasP0Coordx = input.ReadDouble(ref result.p0Coordx_);
            break;
          }
          case 33: {
            result.hasP0Coordy = input.ReadDouble(ref result.p0Coordy_);
            break;
          }
          case 41: {
            result.hasP0Coordz = input.ReadDouble(ref result.p0Coordz_);
            break;
          }
          case 49: {
            result.hasP1Coordx = input.ReadDouble(ref result.p1Coordx_);
            break;
          }
          case 57: {
            result.hasP1Coordy = input.ReadDouble(ref result.p1Coordy_);
            break;
          }
          case 65: {
            result.hasP1Coordz = input.ReadDouble(ref result.p1Coordz_);
            break;
          }
          case 73: {
            result.hasWidth = input.ReadDouble(ref result.width_);
            break;
          }
          case 82: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasFamily) {
              subBuilder.MergeFrom(Family);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Family = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBottomLevel {
     get { return result.hasBottomLevel; }
    }
    public global::idstrc BottomLevel {
      get { return result.BottomLevel; }
      set { SetBottomLevel(value); }
    }
    public Builder SetBottomLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBottomLevel = true;
      result.bottomLevel_ = value;
      return this;
    }
    public Builder SetBottomLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBottomLevel = true;
      result.bottomLevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBottomLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBottomLevel &&
          result.bottomLevel_ != global::idstrc.DefaultInstance) {
          result.bottomLevel_ = global::idstrc.CreateBuilder(result.bottomLevel_).MergeFrom(value).BuildPartial();
      } else {
        result.bottomLevel_ = value;
      }
      result.hasBottomLevel = true;
      return this;
    }
    public Builder ClearBottomLevel() {
      PrepareBuilder();
      result.hasBottomLevel = false;
      result.bottomLevel_ = null;
      return this;
    }
    
    public bool HasTopLevel {
     get { return result.hasTopLevel; }
    }
    public global::idstrc TopLevel {
      get { return result.TopLevel; }
      set { SetTopLevel(value); }
    }
    public Builder SetTopLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTopLevel = true;
      result.topLevel_ = value;
      return this;
    }
    public Builder SetTopLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTopLevel = true;
      result.topLevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTopLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTopLevel &&
          result.topLevel_ != global::idstrc.DefaultInstance) {
          result.topLevel_ = global::idstrc.CreateBuilder(result.topLevel_).MergeFrom(value).BuildPartial();
      } else {
        result.topLevel_ = value;
      }
      result.hasTopLevel = true;
      return this;
    }
    public Builder ClearTopLevel() {
      PrepareBuilder();
      result.hasTopLevel = false;
      result.topLevel_ = null;
      return this;
    }
    
    public bool HasP0Coordx {
      get { return result.hasP0Coordx; }
    }
    public double P0Coordx {
      get { return result.P0Coordx; }
      set { SetP0Coordx(value); }
    }
    public Builder SetP0Coordx(double value) {
      PrepareBuilder();
      result.hasP0Coordx = true;
      result.p0Coordx_ = value;
      return this;
    }
    public Builder ClearP0Coordx() {
      PrepareBuilder();
      result.hasP0Coordx = false;
      result.p0Coordx_ = 0D;
      return this;
    }
    
    public bool HasP0Coordy {
      get { return result.hasP0Coordy; }
    }
    public double P0Coordy {
      get { return result.P0Coordy; }
      set { SetP0Coordy(value); }
    }
    public Builder SetP0Coordy(double value) {
      PrepareBuilder();
      result.hasP0Coordy = true;
      result.p0Coordy_ = value;
      return this;
    }
    public Builder ClearP0Coordy() {
      PrepareBuilder();
      result.hasP0Coordy = false;
      result.p0Coordy_ = 0D;
      return this;
    }
    
    public bool HasP0Coordz {
      get { return result.hasP0Coordz; }
    }
    public double P0Coordz {
      get { return result.P0Coordz; }
      set { SetP0Coordz(value); }
    }
    public Builder SetP0Coordz(double value) {
      PrepareBuilder();
      result.hasP0Coordz = true;
      result.p0Coordz_ = value;
      return this;
    }
    public Builder ClearP0Coordz() {
      PrepareBuilder();
      result.hasP0Coordz = false;
      result.p0Coordz_ = 0D;
      return this;
    }
    
    public bool HasP1Coordx {
      get { return result.hasP1Coordx; }
    }
    public double P1Coordx {
      get { return result.P1Coordx; }
      set { SetP1Coordx(value); }
    }
    public Builder SetP1Coordx(double value) {
      PrepareBuilder();
      result.hasP1Coordx = true;
      result.p1Coordx_ = value;
      return this;
    }
    public Builder ClearP1Coordx() {
      PrepareBuilder();
      result.hasP1Coordx = false;
      result.p1Coordx_ = 0D;
      return this;
    }
    
    public bool HasP1Coordy {
      get { return result.hasP1Coordy; }
    }
    public double P1Coordy {
      get { return result.P1Coordy; }
      set { SetP1Coordy(value); }
    }
    public Builder SetP1Coordy(double value) {
      PrepareBuilder();
      result.hasP1Coordy = true;
      result.p1Coordy_ = value;
      return this;
    }
    public Builder ClearP1Coordy() {
      PrepareBuilder();
      result.hasP1Coordy = false;
      result.p1Coordy_ = 0D;
      return this;
    }
    
    public bool HasP1Coordz {
      get { return result.hasP1Coordz; }
    }
    public double P1Coordz {
      get { return result.P1Coordz; }
      set { SetP1Coordz(value); }
    }
    public Builder SetP1Coordz(double value) {
      PrepareBuilder();
      result.hasP1Coordz = true;
      result.p1Coordz_ = value;
      return this;
    }
    public Builder ClearP1Coordz() {
      PrepareBuilder();
      result.hasP1Coordz = false;
      result.p1Coordz_ = 0D;
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    public double Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    public Builder SetWidth(double value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0D;
      return this;
    }
    
    public bool HasFamily {
     get { return result.hasFamily; }
    }
    public global::idstrc Family {
      get { return result.Family; }
      set { SetFamily(value); }
    }
    public Builder SetFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = value;
      return this;
    }
    public Builder SetFamily(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasFamily = true;
      result.family_ = builderForValue.Build();
      return this;
    }
    public Builder MergeFamily(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasFamily &&
          result.family_ != global::idstrc.DefaultInstance) {
          result.family_ = global::idstrc.CreateBuilder(result.family_).MergeFrom(value).BuildPartial();
      } else {
        result.family_ = value;
      }
      result.hasFamily = true;
      return this;
    }
    public Builder ClearFamily() {
      PrepareBuilder();
      result.hasFamily = false;
      result.family_ = null;
      return this;
    }
  }
  static stairrunstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class stairstrc : pb::GeneratedMessage<stairstrc, stairstrc.Builder> {
  private stairstrc() { }
  private static readonly stairstrc defaultInstance = new stairstrc().MakeReadOnly();
  private static readonly string[] _stairstrcFieldNames = new string[] { "bottomLevel", "bottomp0coordx", "bottomp0coordy", "bottomp0coordz", "topLevel", "topp0coordx", "topp0coordy", "topp0coordz" };
  private static readonly uint[] _stairstrcFieldTags = new uint[] { 10, 25, 33, 41, 18, 49, 57, 65 };
  public static stairstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override stairstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override stairstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_stairstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<stairstrc, stairstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_stairstrc__FieldAccessorTable; }
  }
  
  public const int BottomLevelFieldNumber = 1;
  private bool hasBottomLevel;
  private global::idstrc bottomLevel_;
  public bool HasBottomLevel {
    get { return hasBottomLevel; }
  }
  public global::idstrc BottomLevel {
    get { return bottomLevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int TopLevelFieldNumber = 2;
  private bool hasTopLevel;
  private global::idstrc topLevel_;
  public bool HasTopLevel {
    get { return hasTopLevel; }
  }
  public global::idstrc TopLevel {
    get { return topLevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int Bottomp0CoordxFieldNumber = 3;
  private bool hasBottomp0Coordx;
  private double bottomp0Coordx_;
  public bool HasBottomp0Coordx {
    get { return hasBottomp0Coordx; }
  }
  public double Bottomp0Coordx {
    get { return bottomp0Coordx_; }
  }
  
  public const int Bottomp0CoordyFieldNumber = 4;
  private bool hasBottomp0Coordy;
  private double bottomp0Coordy_;
  public bool HasBottomp0Coordy {
    get { return hasBottomp0Coordy; }
  }
  public double Bottomp0Coordy {
    get { return bottomp0Coordy_; }
  }
  
  public const int Bottomp0CoordzFieldNumber = 5;
  private bool hasBottomp0Coordz;
  private double bottomp0Coordz_;
  public bool HasBottomp0Coordz {
    get { return hasBottomp0Coordz; }
  }
  public double Bottomp0Coordz {
    get { return bottomp0Coordz_; }
  }
  
  public const int Topp0CoordxFieldNumber = 6;
  private bool hasTopp0Coordx;
  private double topp0Coordx_;
  public bool HasTopp0Coordx {
    get { return hasTopp0Coordx; }
  }
  public double Topp0Coordx {
    get { return topp0Coordx_; }
  }
  
  public const int Topp0CoordyFieldNumber = 7;
  private bool hasTopp0Coordy;
  private double topp0Coordy_;
  public bool HasTopp0Coordy {
    get { return hasTopp0Coordy; }
  }
  public double Topp0Coordy {
    get { return topp0Coordy_; }
  }
  
  public const int Topp0CoordzFieldNumber = 8;
  private bool hasTopp0Coordz;
  private double topp0Coordz_;
  public bool HasTopp0Coordz {
    get { return hasTopp0Coordz; }
  }
  public double Topp0Coordz {
    get { return topp0Coordz_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBottomLevel) return false;
      if (!hasTopLevel) return false;
      if (!hasBottomp0Coordx) return false;
      if (!hasBottomp0Coordy) return false;
      if (!hasBottomp0Coordz) return false;
      if (!hasTopp0Coordx) return false;
      if (!hasTopp0Coordy) return false;
      if (!hasTopp0Coordz) return false;
      if (!BottomLevel.IsInitialized) return false;
      if (!TopLevel.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _stairstrcFieldNames;
    if (hasBottomLevel) {
      output.WriteMessage(1, field_names[0], BottomLevel);
    }
    if (hasTopLevel) {
      output.WriteMessage(2, field_names[4], TopLevel);
    }
    if (hasBottomp0Coordx) {
      output.WriteDouble(3, field_names[1], Bottomp0Coordx);
    }
    if (hasBottomp0Coordy) {
      output.WriteDouble(4, field_names[2], Bottomp0Coordy);
    }
    if (hasBottomp0Coordz) {
      output.WriteDouble(5, field_names[3], Bottomp0Coordz);
    }
    if (hasTopp0Coordx) {
      output.WriteDouble(6, field_names[5], Topp0Coordx);
    }
    if (hasTopp0Coordy) {
      output.WriteDouble(7, field_names[6], Topp0Coordy);
    }
    if (hasTopp0Coordz) {
      output.WriteDouble(8, field_names[7], Topp0Coordz);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBottomLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, BottomLevel);
    }
    if (hasTopLevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, TopLevel);
    }
    if (hasBottomp0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Bottomp0Coordx);
    }
    if (hasBottomp0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Bottomp0Coordy);
    }
    if (hasBottomp0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, Bottomp0Coordz);
    }
    if (hasTopp0Coordx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, Topp0Coordx);
    }
    if (hasTopp0Coordy) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Topp0Coordy);
    }
    if (hasTopp0Coordz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, Topp0Coordz);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static stairstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static stairstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static stairstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static stairstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static stairstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static stairstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static stairstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static stairstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static stairstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static stairstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private stairstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(stairstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<stairstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(stairstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private stairstrc result;
    
    private stairstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        stairstrc original = result;
        result = new stairstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override stairstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::stairstrc.Descriptor; }
    }
    
    public override stairstrc DefaultInstanceForType {
      get { return global::stairstrc.DefaultInstance; }
    }
    
    public override stairstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is stairstrc) {
        return MergeFrom((stairstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(stairstrc other) {
      if (other == global::stairstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBottomLevel) {
        MergeBottomLevel(other.BottomLevel);
      }
      if (other.HasTopLevel) {
        MergeTopLevel(other.TopLevel);
      }
      if (other.HasBottomp0Coordx) {
        Bottomp0Coordx = other.Bottomp0Coordx;
      }
      if (other.HasBottomp0Coordy) {
        Bottomp0Coordy = other.Bottomp0Coordy;
      }
      if (other.HasBottomp0Coordz) {
        Bottomp0Coordz = other.Bottomp0Coordz;
      }
      if (other.HasTopp0Coordx) {
        Topp0Coordx = other.Topp0Coordx;
      }
      if (other.HasTopp0Coordy) {
        Topp0Coordy = other.Topp0Coordy;
      }
      if (other.HasTopp0Coordz) {
        Topp0Coordz = other.Topp0Coordz;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_stairstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _stairstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBottomLevel) {
              subBuilder.MergeFrom(BottomLevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            BottomLevel = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasTopLevel) {
              subBuilder.MergeFrom(TopLevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TopLevel = subBuilder.BuildPartial();
            break;
          }
          case 25: {
            result.hasBottomp0Coordx = input.ReadDouble(ref result.bottomp0Coordx_);
            break;
          }
          case 33: {
            result.hasBottomp0Coordy = input.ReadDouble(ref result.bottomp0Coordy_);
            break;
          }
          case 41: {
            result.hasBottomp0Coordz = input.ReadDouble(ref result.bottomp0Coordz_);
            break;
          }
          case 49: {
            result.hasTopp0Coordx = input.ReadDouble(ref result.topp0Coordx_);
            break;
          }
          case 57: {
            result.hasTopp0Coordy = input.ReadDouble(ref result.topp0Coordy_);
            break;
          }
          case 65: {
            result.hasTopp0Coordz = input.ReadDouble(ref result.topp0Coordz_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBottomLevel {
     get { return result.hasBottomLevel; }
    }
    public global::idstrc BottomLevel {
      get { return result.BottomLevel; }
      set { SetBottomLevel(value); }
    }
    public Builder SetBottomLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBottomLevel = true;
      result.bottomLevel_ = value;
      return this;
    }
    public Builder SetBottomLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBottomLevel = true;
      result.bottomLevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBottomLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBottomLevel &&
          result.bottomLevel_ != global::idstrc.DefaultInstance) {
          result.bottomLevel_ = global::idstrc.CreateBuilder(result.bottomLevel_).MergeFrom(value).BuildPartial();
      } else {
        result.bottomLevel_ = value;
      }
      result.hasBottomLevel = true;
      return this;
    }
    public Builder ClearBottomLevel() {
      PrepareBuilder();
      result.hasBottomLevel = false;
      result.bottomLevel_ = null;
      return this;
    }
    
    public bool HasTopLevel {
     get { return result.hasTopLevel; }
    }
    public global::idstrc TopLevel {
      get { return result.TopLevel; }
      set { SetTopLevel(value); }
    }
    public Builder SetTopLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTopLevel = true;
      result.topLevel_ = value;
      return this;
    }
    public Builder SetTopLevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTopLevel = true;
      result.topLevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTopLevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTopLevel &&
          result.topLevel_ != global::idstrc.DefaultInstance) {
          result.topLevel_ = global::idstrc.CreateBuilder(result.topLevel_).MergeFrom(value).BuildPartial();
      } else {
        result.topLevel_ = value;
      }
      result.hasTopLevel = true;
      return this;
    }
    public Builder ClearTopLevel() {
      PrepareBuilder();
      result.hasTopLevel = false;
      result.topLevel_ = null;
      return this;
    }
    
    public bool HasBottomp0Coordx {
      get { return result.hasBottomp0Coordx; }
    }
    public double Bottomp0Coordx {
      get { return result.Bottomp0Coordx; }
      set { SetBottomp0Coordx(value); }
    }
    public Builder SetBottomp0Coordx(double value) {
      PrepareBuilder();
      result.hasBottomp0Coordx = true;
      result.bottomp0Coordx_ = value;
      return this;
    }
    public Builder ClearBottomp0Coordx() {
      PrepareBuilder();
      result.hasBottomp0Coordx = false;
      result.bottomp0Coordx_ = 0D;
      return this;
    }
    
    public bool HasBottomp0Coordy {
      get { return result.hasBottomp0Coordy; }
    }
    public double Bottomp0Coordy {
      get { return result.Bottomp0Coordy; }
      set { SetBottomp0Coordy(value); }
    }
    public Builder SetBottomp0Coordy(double value) {
      PrepareBuilder();
      result.hasBottomp0Coordy = true;
      result.bottomp0Coordy_ = value;
      return this;
    }
    public Builder ClearBottomp0Coordy() {
      PrepareBuilder();
      result.hasBottomp0Coordy = false;
      result.bottomp0Coordy_ = 0D;
      return this;
    }
    
    public bool HasBottomp0Coordz {
      get { return result.hasBottomp0Coordz; }
    }
    public double Bottomp0Coordz {
      get { return result.Bottomp0Coordz; }
      set { SetBottomp0Coordz(value); }
    }
    public Builder SetBottomp0Coordz(double value) {
      PrepareBuilder();
      result.hasBottomp0Coordz = true;
      result.bottomp0Coordz_ = value;
      return this;
    }
    public Builder ClearBottomp0Coordz() {
      PrepareBuilder();
      result.hasBottomp0Coordz = false;
      result.bottomp0Coordz_ = 0D;
      return this;
    }
    
    public bool HasTopp0Coordx {
      get { return result.hasTopp0Coordx; }
    }
    public double Topp0Coordx {
      get { return result.Topp0Coordx; }
      set { SetTopp0Coordx(value); }
    }
    public Builder SetTopp0Coordx(double value) {
      PrepareBuilder();
      result.hasTopp0Coordx = true;
      result.topp0Coordx_ = value;
      return this;
    }
    public Builder ClearTopp0Coordx() {
      PrepareBuilder();
      result.hasTopp0Coordx = false;
      result.topp0Coordx_ = 0D;
      return this;
    }
    
    public bool HasTopp0Coordy {
      get { return result.hasTopp0Coordy; }
    }
    public double Topp0Coordy {
      get { return result.Topp0Coordy; }
      set { SetTopp0Coordy(value); }
    }
    public Builder SetTopp0Coordy(double value) {
      PrepareBuilder();
      result.hasTopp0Coordy = true;
      result.topp0Coordy_ = value;
      return this;
    }
    public Builder ClearTopp0Coordy() {
      PrepareBuilder();
      result.hasTopp0Coordy = false;
      result.topp0Coordy_ = 0D;
      return this;
    }
    
    public bool HasTopp0Coordz {
      get { return result.hasTopp0Coordz; }
    }
    public double Topp0Coordz {
      get { return result.Topp0Coordz; }
      set { SetTopp0Coordz(value); }
    }
    public Builder SetTopp0Coordz(double value) {
      PrepareBuilder();
      result.hasTopp0Coordz = true;
      result.topp0Coordz_ = value;
      return this;
    }
    public Builder ClearTopp0Coordz() {
      PrepareBuilder();
      result.hasTopp0Coordz = false;
      result.topp0Coordz_ = 0D;
      return this;
    }
  }
  static stairstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class landingstrc : pb::GeneratedMessage<landingstrc, landingstrc.Builder> {
  private landingstrc() { }
  private static readonly landingstrc defaultInstance = new landingstrc().MakeReadOnly();
  private static readonly string[] _landingstrcFieldNames = new string[] { "bottomleftcornerx", "bottomleftcornery", "bottomleftcornerz", "bottomrightcornerx", "bottomrightcornery", "bottomrightcornerz", "stairsrunid", "topleftcornerx", "topleftcornery", "topleftcornerz", "toprightcornerx", "toprightcornery", "toprightcornerz" };
  private static readonly uint[] _landingstrcFieldTags = new uint[] { 9, 17, 25, 57, 65, 73, 106, 33, 41, 49, 81, 89, 97 };
  public static landingstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override landingstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override landingstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_landingstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<landingstrc, landingstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_landingstrc__FieldAccessorTable; }
  }
  
  public const int BottomleftcornerxFieldNumber = 1;
  private bool hasBottomleftcornerx;
  private double bottomleftcornerx_;
  public bool HasBottomleftcornerx {
    get { return hasBottomleftcornerx; }
  }
  public double Bottomleftcornerx {
    get { return bottomleftcornerx_; }
  }
  
  public const int BottomleftcorneryFieldNumber = 2;
  private bool hasBottomleftcornery;
  private double bottomleftcornery_;
  public bool HasBottomleftcornery {
    get { return hasBottomleftcornery; }
  }
  public double Bottomleftcornery {
    get { return bottomleftcornery_; }
  }
  
  public const int BottomleftcornerzFieldNumber = 3;
  private bool hasBottomleftcornerz;
  private double bottomleftcornerz_;
  public bool HasBottomleftcornerz {
    get { return hasBottomleftcornerz; }
  }
  public double Bottomleftcornerz {
    get { return bottomleftcornerz_; }
  }
  
  public const int TopleftcornerxFieldNumber = 4;
  private bool hasTopleftcornerx;
  private double topleftcornerx_;
  public bool HasTopleftcornerx {
    get { return hasTopleftcornerx; }
  }
  public double Topleftcornerx {
    get { return topleftcornerx_; }
  }
  
  public const int TopleftcorneryFieldNumber = 5;
  private bool hasTopleftcornery;
  private double topleftcornery_;
  public bool HasTopleftcornery {
    get { return hasTopleftcornery; }
  }
  public double Topleftcornery {
    get { return topleftcornery_; }
  }
  
  public const int TopleftcornerzFieldNumber = 6;
  private bool hasTopleftcornerz;
  private double topleftcornerz_;
  public bool HasTopleftcornerz {
    get { return hasTopleftcornerz; }
  }
  public double Topleftcornerz {
    get { return topleftcornerz_; }
  }
  
  public const int BottomrightcornerxFieldNumber = 7;
  private bool hasBottomrightcornerx;
  private double bottomrightcornerx_;
  public bool HasBottomrightcornerx {
    get { return hasBottomrightcornerx; }
  }
  public double Bottomrightcornerx {
    get { return bottomrightcornerx_; }
  }
  
  public const int BottomrightcorneryFieldNumber = 8;
  private bool hasBottomrightcornery;
  private double bottomrightcornery_;
  public bool HasBottomrightcornery {
    get { return hasBottomrightcornery; }
  }
  public double Bottomrightcornery {
    get { return bottomrightcornery_; }
  }
  
  public const int BottomrightcornerzFieldNumber = 9;
  private bool hasBottomrightcornerz;
  private double bottomrightcornerz_;
  public bool HasBottomrightcornerz {
    get { return hasBottomrightcornerz; }
  }
  public double Bottomrightcornerz {
    get { return bottomrightcornerz_; }
  }
  
  public const int ToprightcornerxFieldNumber = 10;
  private bool hasToprightcornerx;
  private double toprightcornerx_;
  public bool HasToprightcornerx {
    get { return hasToprightcornerx; }
  }
  public double Toprightcornerx {
    get { return toprightcornerx_; }
  }
  
  public const int ToprightcorneryFieldNumber = 11;
  private bool hasToprightcornery;
  private double toprightcornery_;
  public bool HasToprightcornery {
    get { return hasToprightcornery; }
  }
  public double Toprightcornery {
    get { return toprightcornery_; }
  }
  
  public const int ToprightcornerzFieldNumber = 12;
  private bool hasToprightcornerz;
  private double toprightcornerz_;
  public bool HasToprightcornerz {
    get { return hasToprightcornerz; }
  }
  public double Toprightcornerz {
    get { return toprightcornerz_; }
  }
  
  public const int StairsrunidFieldNumber = 13;
  private bool hasStairsrunid;
  private global::idstrc stairsrunid_;
  public bool HasStairsrunid {
    get { return hasStairsrunid; }
  }
  public global::idstrc Stairsrunid {
    get { return stairsrunid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBottomleftcornerx) return false;
      if (!hasBottomleftcornery) return false;
      if (!hasBottomleftcornerz) return false;
      if (!hasTopleftcornerx) return false;
      if (!hasTopleftcornery) return false;
      if (!hasTopleftcornerz) return false;
      if (!hasBottomrightcornerx) return false;
      if (!hasBottomrightcornery) return false;
      if (!hasBottomrightcornerz) return false;
      if (!hasToprightcornerx) return false;
      if (!hasToprightcornery) return false;
      if (!hasToprightcornerz) return false;
      if (!hasStairsrunid) return false;
      if (!Stairsrunid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _landingstrcFieldNames;
    if (hasBottomleftcornerx) {
      output.WriteDouble(1, field_names[0], Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      output.WriteDouble(2, field_names[1], Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      output.WriteDouble(3, field_names[2], Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      output.WriteDouble(4, field_names[7], Topleftcornerx);
    }
    if (hasTopleftcornery) {
      output.WriteDouble(5, field_names[8], Topleftcornery);
    }
    if (hasTopleftcornerz) {
      output.WriteDouble(6, field_names[9], Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      output.WriteDouble(7, field_names[3], Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      output.WriteDouble(8, field_names[4], Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      output.WriteDouble(9, field_names[5], Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      output.WriteDouble(10, field_names[10], Toprightcornerx);
    }
    if (hasToprightcornery) {
      output.WriteDouble(11, field_names[11], Toprightcornery);
    }
    if (hasToprightcornerz) {
      output.WriteDouble(12, field_names[12], Toprightcornerz);
    }
    if (hasStairsrunid) {
      output.WriteMessage(13, field_names[6], Stairsrunid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBottomleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Topleftcornerx);
    }
    if (hasTopleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, Topleftcornery);
    }
    if (hasTopleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(10, Toprightcornerx);
    }
    if (hasToprightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(11, Toprightcornery);
    }
    if (hasToprightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(12, Toprightcornerz);
    }
    if (hasStairsrunid) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, Stairsrunid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static landingstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static landingstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static landingstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static landingstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static landingstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static landingstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static landingstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static landingstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static landingstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static landingstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private landingstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(landingstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<landingstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(landingstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private landingstrc result;
    
    private landingstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        landingstrc original = result;
        result = new landingstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override landingstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::landingstrc.Descriptor; }
    }
    
    public override landingstrc DefaultInstanceForType {
      get { return global::landingstrc.DefaultInstance; }
    }
    
    public override landingstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is landingstrc) {
        return MergeFrom((landingstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(landingstrc other) {
      if (other == global::landingstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBottomleftcornerx) {
        Bottomleftcornerx = other.Bottomleftcornerx;
      }
      if (other.HasBottomleftcornery) {
        Bottomleftcornery = other.Bottomleftcornery;
      }
      if (other.HasBottomleftcornerz) {
        Bottomleftcornerz = other.Bottomleftcornerz;
      }
      if (other.HasTopleftcornerx) {
        Topleftcornerx = other.Topleftcornerx;
      }
      if (other.HasTopleftcornery) {
        Topleftcornery = other.Topleftcornery;
      }
      if (other.HasTopleftcornerz) {
        Topleftcornerz = other.Topleftcornerz;
      }
      if (other.HasBottomrightcornerx) {
        Bottomrightcornerx = other.Bottomrightcornerx;
      }
      if (other.HasBottomrightcornery) {
        Bottomrightcornery = other.Bottomrightcornery;
      }
      if (other.HasBottomrightcornerz) {
        Bottomrightcornerz = other.Bottomrightcornerz;
      }
      if (other.HasToprightcornerx) {
        Toprightcornerx = other.Toprightcornerx;
      }
      if (other.HasToprightcornery) {
        Toprightcornery = other.Toprightcornery;
      }
      if (other.HasToprightcornerz) {
        Toprightcornerz = other.Toprightcornerz;
      }
      if (other.HasStairsrunid) {
        MergeStairsrunid(other.Stairsrunid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_landingstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _landingstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasBottomleftcornerx = input.ReadDouble(ref result.bottomleftcornerx_);
            break;
          }
          case 17: {
            result.hasBottomleftcornery = input.ReadDouble(ref result.bottomleftcornery_);
            break;
          }
          case 25: {
            result.hasBottomleftcornerz = input.ReadDouble(ref result.bottomleftcornerz_);
            break;
          }
          case 33: {
            result.hasTopleftcornerx = input.ReadDouble(ref result.topleftcornerx_);
            break;
          }
          case 41: {
            result.hasTopleftcornery = input.ReadDouble(ref result.topleftcornery_);
            break;
          }
          case 49: {
            result.hasTopleftcornerz = input.ReadDouble(ref result.topleftcornerz_);
            break;
          }
          case 57: {
            result.hasBottomrightcornerx = input.ReadDouble(ref result.bottomrightcornerx_);
            break;
          }
          case 65: {
            result.hasBottomrightcornery = input.ReadDouble(ref result.bottomrightcornery_);
            break;
          }
          case 73: {
            result.hasBottomrightcornerz = input.ReadDouble(ref result.bottomrightcornerz_);
            break;
          }
          case 81: {
            result.hasToprightcornerx = input.ReadDouble(ref result.toprightcornerx_);
            break;
          }
          case 89: {
            result.hasToprightcornery = input.ReadDouble(ref result.toprightcornery_);
            break;
          }
          case 97: {
            result.hasToprightcornerz = input.ReadDouble(ref result.toprightcornerz_);
            break;
          }
          case 106: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasStairsrunid) {
              subBuilder.MergeFrom(Stairsrunid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Stairsrunid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBottomleftcornerx {
      get { return result.hasBottomleftcornerx; }
    }
    public double Bottomleftcornerx {
      get { return result.Bottomleftcornerx; }
      set { SetBottomleftcornerx(value); }
    }
    public Builder SetBottomleftcornerx(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerx = true;
      result.bottomleftcornerx_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerx() {
      PrepareBuilder();
      result.hasBottomleftcornerx = false;
      result.bottomleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornery {
      get { return result.hasBottomleftcornery; }
    }
    public double Bottomleftcornery {
      get { return result.Bottomleftcornery; }
      set { SetBottomleftcornery(value); }
    }
    public Builder SetBottomleftcornery(double value) {
      PrepareBuilder();
      result.hasBottomleftcornery = true;
      result.bottomleftcornery_ = value;
      return this;
    }
    public Builder ClearBottomleftcornery() {
      PrepareBuilder();
      result.hasBottomleftcornery = false;
      result.bottomleftcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornerz {
      get { return result.hasBottomleftcornerz; }
    }
    public double Bottomleftcornerz {
      get { return result.Bottomleftcornerz; }
      set { SetBottomleftcornerz(value); }
    }
    public Builder SetBottomleftcornerz(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerz = true;
      result.bottomleftcornerz_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerz() {
      PrepareBuilder();
      result.hasBottomleftcornerz = false;
      result.bottomleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerx {
      get { return result.hasTopleftcornerx; }
    }
    public double Topleftcornerx {
      get { return result.Topleftcornerx; }
      set { SetTopleftcornerx(value); }
    }
    public Builder SetTopleftcornerx(double value) {
      PrepareBuilder();
      result.hasTopleftcornerx = true;
      result.topleftcornerx_ = value;
      return this;
    }
    public Builder ClearTopleftcornerx() {
      PrepareBuilder();
      result.hasTopleftcornerx = false;
      result.topleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornery {
      get { return result.hasTopleftcornery; }
    }
    public double Topleftcornery {
      get { return result.Topleftcornery; }
      set { SetTopleftcornery(value); }
    }
    public Builder SetTopleftcornery(double value) {
      PrepareBuilder();
      result.hasTopleftcornery = true;
      result.topleftcornery_ = value;
      return this;
    }
    public Builder ClearTopleftcornery() {
      PrepareBuilder();
      result.hasTopleftcornery = false;
      result.topleftcornery_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerz {
      get { return result.hasTopleftcornerz; }
    }
    public double Topleftcornerz {
      get { return result.Topleftcornerz; }
      set { SetTopleftcornerz(value); }
    }
    public Builder SetTopleftcornerz(double value) {
      PrepareBuilder();
      result.hasTopleftcornerz = true;
      result.topleftcornerz_ = value;
      return this;
    }
    public Builder ClearTopleftcornerz() {
      PrepareBuilder();
      result.hasTopleftcornerz = false;
      result.topleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerx {
      get { return result.hasBottomrightcornerx; }
    }
    public double Bottomrightcornerx {
      get { return result.Bottomrightcornerx; }
      set { SetBottomrightcornerx(value); }
    }
    public Builder SetBottomrightcornerx(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerx = true;
      result.bottomrightcornerx_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerx() {
      PrepareBuilder();
      result.hasBottomrightcornerx = false;
      result.bottomrightcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornery {
      get { return result.hasBottomrightcornery; }
    }
    public double Bottomrightcornery {
      get { return result.Bottomrightcornery; }
      set { SetBottomrightcornery(value); }
    }
    public Builder SetBottomrightcornery(double value) {
      PrepareBuilder();
      result.hasBottomrightcornery = true;
      result.bottomrightcornery_ = value;
      return this;
    }
    public Builder ClearBottomrightcornery() {
      PrepareBuilder();
      result.hasBottomrightcornery = false;
      result.bottomrightcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerz {
      get { return result.hasBottomrightcornerz; }
    }
    public double Bottomrightcornerz {
      get { return result.Bottomrightcornerz; }
      set { SetBottomrightcornerz(value); }
    }
    public Builder SetBottomrightcornerz(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerz = true;
      result.bottomrightcornerz_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerz() {
      PrepareBuilder();
      result.hasBottomrightcornerz = false;
      result.bottomrightcornerz_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerx {
      get { return result.hasToprightcornerx; }
    }
    public double Toprightcornerx {
      get { return result.Toprightcornerx; }
      set { SetToprightcornerx(value); }
    }
    public Builder SetToprightcornerx(double value) {
      PrepareBuilder();
      result.hasToprightcornerx = true;
      result.toprightcornerx_ = value;
      return this;
    }
    public Builder ClearToprightcornerx() {
      PrepareBuilder();
      result.hasToprightcornerx = false;
      result.toprightcornerx_ = 0D;
      return this;
    }
    
    public bool HasToprightcornery {
      get { return result.hasToprightcornery; }
    }
    public double Toprightcornery {
      get { return result.Toprightcornery; }
      set { SetToprightcornery(value); }
    }
    public Builder SetToprightcornery(double value) {
      PrepareBuilder();
      result.hasToprightcornery = true;
      result.toprightcornery_ = value;
      return this;
    }
    public Builder ClearToprightcornery() {
      PrepareBuilder();
      result.hasToprightcornery = false;
      result.toprightcornery_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerz {
      get { return result.hasToprightcornerz; }
    }
    public double Toprightcornerz {
      get { return result.Toprightcornerz; }
      set { SetToprightcornerz(value); }
    }
    public Builder SetToprightcornerz(double value) {
      PrepareBuilder();
      result.hasToprightcornerz = true;
      result.toprightcornerz_ = value;
      return this;
    }
    public Builder ClearToprightcornerz() {
      PrepareBuilder();
      result.hasToprightcornerz = false;
      result.toprightcornerz_ = 0D;
      return this;
    }
    
    public bool HasStairsrunid {
     get { return result.hasStairsrunid; }
    }
    public global::idstrc Stairsrunid {
      get { return result.Stairsrunid; }
      set { SetStairsrunid(value); }
    }
    public Builder SetStairsrunid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStairsrunid = true;
      result.stairsrunid_ = value;
      return this;
    }
    public Builder SetStairsrunid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStairsrunid = true;
      result.stairsrunid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStairsrunid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStairsrunid &&
          result.stairsrunid_ != global::idstrc.DefaultInstance) {
          result.stairsrunid_ = global::idstrc.CreateBuilder(result.stairsrunid_).MergeFrom(value).BuildPartial();
      } else {
        result.stairsrunid_ = value;
      }
      result.hasStairsrunid = true;
      return this;
    }
    public Builder ClearStairsrunid() {
      PrepareBuilder();
      result.hasStairsrunid = false;
      result.stairsrunid_ = null;
      return this;
    }
  }
  static landingstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class slabwallstrc : pb::GeneratedMessage<slabwallstrc, slabwallstrc.Builder> {
  private slabwallstrc() { }
  private static readonly slabwallstrc defaultInstance = new slabwallstrc().MakeReadOnly();
  private static readonly string[] _slabwallstrcFieldNames = new string[] { "bottomleftcornerx", "bottomleftcornery", "bottomleftcornerz", "bottomrightcornerx", "bottomrightcornery", "bottomrightcornerz", "levelId", "topleftcornerx", "topleftcornery", "topleftcornerz", "toprightcornerx", "toprightcornery", "toprightcornerz" };
  private static readonly uint[] _slabwallstrcFieldTags = new uint[] { 9, 17, 25, 57, 65, 73, 106, 33, 41, 49, 81, 89, 97 };
  public static slabwallstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override slabwallstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override slabwallstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_slabwallstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<slabwallstrc, slabwallstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_slabwallstrc__FieldAccessorTable; }
  }
  
  public const int BottomleftcornerxFieldNumber = 1;
  private bool hasBottomleftcornerx;
  private double bottomleftcornerx_;
  public bool HasBottomleftcornerx {
    get { return hasBottomleftcornerx; }
  }
  public double Bottomleftcornerx {
    get { return bottomleftcornerx_; }
  }
  
  public const int BottomleftcorneryFieldNumber = 2;
  private bool hasBottomleftcornery;
  private double bottomleftcornery_;
  public bool HasBottomleftcornery {
    get { return hasBottomleftcornery; }
  }
  public double Bottomleftcornery {
    get { return bottomleftcornery_; }
  }
  
  public const int BottomleftcornerzFieldNumber = 3;
  private bool hasBottomleftcornerz;
  private double bottomleftcornerz_;
  public bool HasBottomleftcornerz {
    get { return hasBottomleftcornerz; }
  }
  public double Bottomleftcornerz {
    get { return bottomleftcornerz_; }
  }
  
  public const int TopleftcornerxFieldNumber = 4;
  private bool hasTopleftcornerx;
  private double topleftcornerx_;
  public bool HasTopleftcornerx {
    get { return hasTopleftcornerx; }
  }
  public double Topleftcornerx {
    get { return topleftcornerx_; }
  }
  
  public const int TopleftcorneryFieldNumber = 5;
  private bool hasTopleftcornery;
  private double topleftcornery_;
  public bool HasTopleftcornery {
    get { return hasTopleftcornery; }
  }
  public double Topleftcornery {
    get { return topleftcornery_; }
  }
  
  public const int TopleftcornerzFieldNumber = 6;
  private bool hasTopleftcornerz;
  private double topleftcornerz_;
  public bool HasTopleftcornerz {
    get { return hasTopleftcornerz; }
  }
  public double Topleftcornerz {
    get { return topleftcornerz_; }
  }
  
  public const int BottomrightcornerxFieldNumber = 7;
  private bool hasBottomrightcornerx;
  private double bottomrightcornerx_;
  public bool HasBottomrightcornerx {
    get { return hasBottomrightcornerx; }
  }
  public double Bottomrightcornerx {
    get { return bottomrightcornerx_; }
  }
  
  public const int BottomrightcorneryFieldNumber = 8;
  private bool hasBottomrightcornery;
  private double bottomrightcornery_;
  public bool HasBottomrightcornery {
    get { return hasBottomrightcornery; }
  }
  public double Bottomrightcornery {
    get { return bottomrightcornery_; }
  }
  
  public const int BottomrightcornerzFieldNumber = 9;
  private bool hasBottomrightcornerz;
  private double bottomrightcornerz_;
  public bool HasBottomrightcornerz {
    get { return hasBottomrightcornerz; }
  }
  public double Bottomrightcornerz {
    get { return bottomrightcornerz_; }
  }
  
  public const int ToprightcornerxFieldNumber = 10;
  private bool hasToprightcornerx;
  private double toprightcornerx_;
  public bool HasToprightcornerx {
    get { return hasToprightcornerx; }
  }
  public double Toprightcornerx {
    get { return toprightcornerx_; }
  }
  
  public const int ToprightcorneryFieldNumber = 11;
  private bool hasToprightcornery;
  private double toprightcornery_;
  public bool HasToprightcornery {
    get { return hasToprightcornery; }
  }
  public double Toprightcornery {
    get { return toprightcornery_; }
  }
  
  public const int ToprightcornerzFieldNumber = 12;
  private bool hasToprightcornerz;
  private double toprightcornerz_;
  public bool HasToprightcornerz {
    get { return hasToprightcornerz; }
  }
  public double Toprightcornerz {
    get { return toprightcornerz_; }
  }
  
  public const int LevelIdFieldNumber = 13;
  private bool hasLevelId;
  private global::idstrc levelId_;
  public bool HasLevelId {
    get { return hasLevelId; }
  }
  public global::idstrc LevelId {
    get { return levelId_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBottomleftcornerx) return false;
      if (!hasBottomleftcornery) return false;
      if (!hasBottomleftcornerz) return false;
      if (!hasTopleftcornerx) return false;
      if (!hasTopleftcornery) return false;
      if (!hasTopleftcornerz) return false;
      if (!hasBottomrightcornerx) return false;
      if (!hasBottomrightcornery) return false;
      if (!hasBottomrightcornerz) return false;
      if (!hasToprightcornerx) return false;
      if (!hasToprightcornery) return false;
      if (!hasToprightcornerz) return false;
      if (!hasLevelId) return false;
      if (!LevelId.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _slabwallstrcFieldNames;
    if (hasBottomleftcornerx) {
      output.WriteDouble(1, field_names[0], Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      output.WriteDouble(2, field_names[1], Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      output.WriteDouble(3, field_names[2], Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      output.WriteDouble(4, field_names[7], Topleftcornerx);
    }
    if (hasTopleftcornery) {
      output.WriteDouble(5, field_names[8], Topleftcornery);
    }
    if (hasTopleftcornerz) {
      output.WriteDouble(6, field_names[9], Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      output.WriteDouble(7, field_names[3], Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      output.WriteDouble(8, field_names[4], Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      output.WriteDouble(9, field_names[5], Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      output.WriteDouble(10, field_names[10], Toprightcornerx);
    }
    if (hasToprightcornery) {
      output.WriteDouble(11, field_names[11], Toprightcornery);
    }
    if (hasToprightcornerz) {
      output.WriteDouble(12, field_names[12], Toprightcornerz);
    }
    if (hasLevelId) {
      output.WriteMessage(13, field_names[6], LevelId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBottomleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Topleftcornerx);
    }
    if (hasTopleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, Topleftcornery);
    }
    if (hasTopleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(10, Toprightcornerx);
    }
    if (hasToprightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(11, Toprightcornery);
    }
    if (hasToprightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(12, Toprightcornerz);
    }
    if (hasLevelId) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, LevelId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static slabwallstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static slabwallstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static slabwallstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static slabwallstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static slabwallstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private slabwallstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(slabwallstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<slabwallstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(slabwallstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private slabwallstrc result;
    
    private slabwallstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        slabwallstrc original = result;
        result = new slabwallstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override slabwallstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::slabwallstrc.Descriptor; }
    }
    
    public override slabwallstrc DefaultInstanceForType {
      get { return global::slabwallstrc.DefaultInstance; }
    }
    
    public override slabwallstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is slabwallstrc) {
        return MergeFrom((slabwallstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(slabwallstrc other) {
      if (other == global::slabwallstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBottomleftcornerx) {
        Bottomleftcornerx = other.Bottomleftcornerx;
      }
      if (other.HasBottomleftcornery) {
        Bottomleftcornery = other.Bottomleftcornery;
      }
      if (other.HasBottomleftcornerz) {
        Bottomleftcornerz = other.Bottomleftcornerz;
      }
      if (other.HasTopleftcornerx) {
        Topleftcornerx = other.Topleftcornerx;
      }
      if (other.HasTopleftcornery) {
        Topleftcornery = other.Topleftcornery;
      }
      if (other.HasTopleftcornerz) {
        Topleftcornerz = other.Topleftcornerz;
      }
      if (other.HasBottomrightcornerx) {
        Bottomrightcornerx = other.Bottomrightcornerx;
      }
      if (other.HasBottomrightcornery) {
        Bottomrightcornery = other.Bottomrightcornery;
      }
      if (other.HasBottomrightcornerz) {
        Bottomrightcornerz = other.Bottomrightcornerz;
      }
      if (other.HasToprightcornerx) {
        Toprightcornerx = other.Toprightcornerx;
      }
      if (other.HasToprightcornery) {
        Toprightcornery = other.Toprightcornery;
      }
      if (other.HasToprightcornerz) {
        Toprightcornerz = other.Toprightcornerz;
      }
      if (other.HasLevelId) {
        MergeLevelId(other.LevelId);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_slabwallstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _slabwallstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasBottomleftcornerx = input.ReadDouble(ref result.bottomleftcornerx_);
            break;
          }
          case 17: {
            result.hasBottomleftcornery = input.ReadDouble(ref result.bottomleftcornery_);
            break;
          }
          case 25: {
            result.hasBottomleftcornerz = input.ReadDouble(ref result.bottomleftcornerz_);
            break;
          }
          case 33: {
            result.hasTopleftcornerx = input.ReadDouble(ref result.topleftcornerx_);
            break;
          }
          case 41: {
            result.hasTopleftcornery = input.ReadDouble(ref result.topleftcornery_);
            break;
          }
          case 49: {
            result.hasTopleftcornerz = input.ReadDouble(ref result.topleftcornerz_);
            break;
          }
          case 57: {
            result.hasBottomrightcornerx = input.ReadDouble(ref result.bottomrightcornerx_);
            break;
          }
          case 65: {
            result.hasBottomrightcornery = input.ReadDouble(ref result.bottomrightcornery_);
            break;
          }
          case 73: {
            result.hasBottomrightcornerz = input.ReadDouble(ref result.bottomrightcornerz_);
            break;
          }
          case 81: {
            result.hasToprightcornerx = input.ReadDouble(ref result.toprightcornerx_);
            break;
          }
          case 89: {
            result.hasToprightcornery = input.ReadDouble(ref result.toprightcornery_);
            break;
          }
          case 97: {
            result.hasToprightcornerz = input.ReadDouble(ref result.toprightcornerz_);
            break;
          }
          case 106: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelId) {
              subBuilder.MergeFrom(LevelId);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LevelId = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBottomleftcornerx {
      get { return result.hasBottomleftcornerx; }
    }
    public double Bottomleftcornerx {
      get { return result.Bottomleftcornerx; }
      set { SetBottomleftcornerx(value); }
    }
    public Builder SetBottomleftcornerx(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerx = true;
      result.bottomleftcornerx_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerx() {
      PrepareBuilder();
      result.hasBottomleftcornerx = false;
      result.bottomleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornery {
      get { return result.hasBottomleftcornery; }
    }
    public double Bottomleftcornery {
      get { return result.Bottomleftcornery; }
      set { SetBottomleftcornery(value); }
    }
    public Builder SetBottomleftcornery(double value) {
      PrepareBuilder();
      result.hasBottomleftcornery = true;
      result.bottomleftcornery_ = value;
      return this;
    }
    public Builder ClearBottomleftcornery() {
      PrepareBuilder();
      result.hasBottomleftcornery = false;
      result.bottomleftcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornerz {
      get { return result.hasBottomleftcornerz; }
    }
    public double Bottomleftcornerz {
      get { return result.Bottomleftcornerz; }
      set { SetBottomleftcornerz(value); }
    }
    public Builder SetBottomleftcornerz(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerz = true;
      result.bottomleftcornerz_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerz() {
      PrepareBuilder();
      result.hasBottomleftcornerz = false;
      result.bottomleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerx {
      get { return result.hasTopleftcornerx; }
    }
    public double Topleftcornerx {
      get { return result.Topleftcornerx; }
      set { SetTopleftcornerx(value); }
    }
    public Builder SetTopleftcornerx(double value) {
      PrepareBuilder();
      result.hasTopleftcornerx = true;
      result.topleftcornerx_ = value;
      return this;
    }
    public Builder ClearTopleftcornerx() {
      PrepareBuilder();
      result.hasTopleftcornerx = false;
      result.topleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornery {
      get { return result.hasTopleftcornery; }
    }
    public double Topleftcornery {
      get { return result.Topleftcornery; }
      set { SetTopleftcornery(value); }
    }
    public Builder SetTopleftcornery(double value) {
      PrepareBuilder();
      result.hasTopleftcornery = true;
      result.topleftcornery_ = value;
      return this;
    }
    public Builder ClearTopleftcornery() {
      PrepareBuilder();
      result.hasTopleftcornery = false;
      result.topleftcornery_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerz {
      get { return result.hasTopleftcornerz; }
    }
    public double Topleftcornerz {
      get { return result.Topleftcornerz; }
      set { SetTopleftcornerz(value); }
    }
    public Builder SetTopleftcornerz(double value) {
      PrepareBuilder();
      result.hasTopleftcornerz = true;
      result.topleftcornerz_ = value;
      return this;
    }
    public Builder ClearTopleftcornerz() {
      PrepareBuilder();
      result.hasTopleftcornerz = false;
      result.topleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerx {
      get { return result.hasBottomrightcornerx; }
    }
    public double Bottomrightcornerx {
      get { return result.Bottomrightcornerx; }
      set { SetBottomrightcornerx(value); }
    }
    public Builder SetBottomrightcornerx(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerx = true;
      result.bottomrightcornerx_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerx() {
      PrepareBuilder();
      result.hasBottomrightcornerx = false;
      result.bottomrightcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornery {
      get { return result.hasBottomrightcornery; }
    }
    public double Bottomrightcornery {
      get { return result.Bottomrightcornery; }
      set { SetBottomrightcornery(value); }
    }
    public Builder SetBottomrightcornery(double value) {
      PrepareBuilder();
      result.hasBottomrightcornery = true;
      result.bottomrightcornery_ = value;
      return this;
    }
    public Builder ClearBottomrightcornery() {
      PrepareBuilder();
      result.hasBottomrightcornery = false;
      result.bottomrightcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerz {
      get { return result.hasBottomrightcornerz; }
    }
    public double Bottomrightcornerz {
      get { return result.Bottomrightcornerz; }
      set { SetBottomrightcornerz(value); }
    }
    public Builder SetBottomrightcornerz(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerz = true;
      result.bottomrightcornerz_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerz() {
      PrepareBuilder();
      result.hasBottomrightcornerz = false;
      result.bottomrightcornerz_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerx {
      get { return result.hasToprightcornerx; }
    }
    public double Toprightcornerx {
      get { return result.Toprightcornerx; }
      set { SetToprightcornerx(value); }
    }
    public Builder SetToprightcornerx(double value) {
      PrepareBuilder();
      result.hasToprightcornerx = true;
      result.toprightcornerx_ = value;
      return this;
    }
    public Builder ClearToprightcornerx() {
      PrepareBuilder();
      result.hasToprightcornerx = false;
      result.toprightcornerx_ = 0D;
      return this;
    }
    
    public bool HasToprightcornery {
      get { return result.hasToprightcornery; }
    }
    public double Toprightcornery {
      get { return result.Toprightcornery; }
      set { SetToprightcornery(value); }
    }
    public Builder SetToprightcornery(double value) {
      PrepareBuilder();
      result.hasToprightcornery = true;
      result.toprightcornery_ = value;
      return this;
    }
    public Builder ClearToprightcornery() {
      PrepareBuilder();
      result.hasToprightcornery = false;
      result.toprightcornery_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerz {
      get { return result.hasToprightcornerz; }
    }
    public double Toprightcornerz {
      get { return result.Toprightcornerz; }
      set { SetToprightcornerz(value); }
    }
    public Builder SetToprightcornerz(double value) {
      PrepareBuilder();
      result.hasToprightcornerz = true;
      result.toprightcornerz_ = value;
      return this;
    }
    public Builder ClearToprightcornerz() {
      PrepareBuilder();
      result.hasToprightcornerz = false;
      result.toprightcornerz_ = 0D;
      return this;
    }
    
    public bool HasLevelId {
     get { return result.hasLevelId; }
    }
    public global::idstrc LevelId {
      get { return result.LevelId; }
      set { SetLevelId(value); }
    }
    public Builder SetLevelId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelId = true;
      result.levelId_ = value;
      return this;
    }
    public Builder SetLevelId(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelId = true;
      result.levelId_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelId &&
          result.levelId_ != global::idstrc.DefaultInstance) {
          result.levelId_ = global::idstrc.CreateBuilder(result.levelId_).MergeFrom(value).BuildPartial();
      } else {
        result.levelId_ = value;
      }
      result.hasLevelId = true;
      return this;
    }
    public Builder ClearLevelId() {
      PrepareBuilder();
      result.hasLevelId = false;
      result.levelId_ = null;
      return this;
    }
  }
  static slabwallstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class masswallstrc : pb::GeneratedMessage<masswallstrc, masswallstrc.Builder> {
  private masswallstrc() { }
  private static readonly masswallstrc defaultInstance = new masswallstrc().MakeReadOnly();
  private static readonly string[] _masswallstrcFieldNames = new string[] { "bottomleftcornerx", "bottomleftcornery", "bottomleftcornerz", "bottomrightcornerx", "bottomrightcornery", "bottomrightcornerz", "height", "levelId", "topleftcornerx", "topleftcornery", "topleftcornerz", "toprightcornerx", "toprightcornery", "toprightcornerz" };
  private static readonly uint[] _masswallstrcFieldTags = new uint[] { 9, 17, 25, 57, 65, 73, 105, 114, 33, 41, 49, 81, 89, 97 };
  public static masswallstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override masswallstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override masswallstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_masswallstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<masswallstrc, masswallstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_masswallstrc__FieldAccessorTable; }
  }
  
  public const int BottomleftcornerxFieldNumber = 1;
  private bool hasBottomleftcornerx;
  private double bottomleftcornerx_;
  public bool HasBottomleftcornerx {
    get { return hasBottomleftcornerx; }
  }
  public double Bottomleftcornerx {
    get { return bottomleftcornerx_; }
  }
  
  public const int BottomleftcorneryFieldNumber = 2;
  private bool hasBottomleftcornery;
  private double bottomleftcornery_;
  public bool HasBottomleftcornery {
    get { return hasBottomleftcornery; }
  }
  public double Bottomleftcornery {
    get { return bottomleftcornery_; }
  }
  
  public const int BottomleftcornerzFieldNumber = 3;
  private bool hasBottomleftcornerz;
  private double bottomleftcornerz_;
  public bool HasBottomleftcornerz {
    get { return hasBottomleftcornerz; }
  }
  public double Bottomleftcornerz {
    get { return bottomleftcornerz_; }
  }
  
  public const int TopleftcornerxFieldNumber = 4;
  private bool hasTopleftcornerx;
  private double topleftcornerx_;
  public bool HasTopleftcornerx {
    get { return hasTopleftcornerx; }
  }
  public double Topleftcornerx {
    get { return topleftcornerx_; }
  }
  
  public const int TopleftcorneryFieldNumber = 5;
  private bool hasTopleftcornery;
  private double topleftcornery_;
  public bool HasTopleftcornery {
    get { return hasTopleftcornery; }
  }
  public double Topleftcornery {
    get { return topleftcornery_; }
  }
  
  public const int TopleftcornerzFieldNumber = 6;
  private bool hasTopleftcornerz;
  private double topleftcornerz_;
  public bool HasTopleftcornerz {
    get { return hasTopleftcornerz; }
  }
  public double Topleftcornerz {
    get { return topleftcornerz_; }
  }
  
  public const int BottomrightcornerxFieldNumber = 7;
  private bool hasBottomrightcornerx;
  private double bottomrightcornerx_;
  public bool HasBottomrightcornerx {
    get { return hasBottomrightcornerx; }
  }
  public double Bottomrightcornerx {
    get { return bottomrightcornerx_; }
  }
  
  public const int BottomrightcorneryFieldNumber = 8;
  private bool hasBottomrightcornery;
  private double bottomrightcornery_;
  public bool HasBottomrightcornery {
    get { return hasBottomrightcornery; }
  }
  public double Bottomrightcornery {
    get { return bottomrightcornery_; }
  }
  
  public const int BottomrightcornerzFieldNumber = 9;
  private bool hasBottomrightcornerz;
  private double bottomrightcornerz_;
  public bool HasBottomrightcornerz {
    get { return hasBottomrightcornerz; }
  }
  public double Bottomrightcornerz {
    get { return bottomrightcornerz_; }
  }
  
  public const int ToprightcornerxFieldNumber = 10;
  private bool hasToprightcornerx;
  private double toprightcornerx_;
  public bool HasToprightcornerx {
    get { return hasToprightcornerx; }
  }
  public double Toprightcornerx {
    get { return toprightcornerx_; }
  }
  
  public const int ToprightcorneryFieldNumber = 11;
  private bool hasToprightcornery;
  private double toprightcornery_;
  public bool HasToprightcornery {
    get { return hasToprightcornery; }
  }
  public double Toprightcornery {
    get { return toprightcornery_; }
  }
  
  public const int ToprightcornerzFieldNumber = 12;
  private bool hasToprightcornerz;
  private double toprightcornerz_;
  public bool HasToprightcornerz {
    get { return hasToprightcornerz; }
  }
  public double Toprightcornerz {
    get { return toprightcornerz_; }
  }
  
  public const int HeightFieldNumber = 13;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public const int LevelIdFieldNumber = 14;
  private bool hasLevelId;
  private global::idstrc levelId_;
  public bool HasLevelId {
    get { return hasLevelId; }
  }
  public global::idstrc LevelId {
    get { return levelId_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBottomleftcornerx) return false;
      if (!hasBottomleftcornery) return false;
      if (!hasBottomleftcornerz) return false;
      if (!hasTopleftcornerx) return false;
      if (!hasTopleftcornery) return false;
      if (!hasTopleftcornerz) return false;
      if (!hasBottomrightcornerx) return false;
      if (!hasBottomrightcornery) return false;
      if (!hasBottomrightcornerz) return false;
      if (!hasToprightcornerx) return false;
      if (!hasToprightcornery) return false;
      if (!hasToprightcornerz) return false;
      if (!hasHeight) return false;
      if (!hasLevelId) return false;
      if (!LevelId.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _masswallstrcFieldNames;
    if (hasBottomleftcornerx) {
      output.WriteDouble(1, field_names[0], Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      output.WriteDouble(2, field_names[1], Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      output.WriteDouble(3, field_names[2], Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      output.WriteDouble(4, field_names[8], Topleftcornerx);
    }
    if (hasTopleftcornery) {
      output.WriteDouble(5, field_names[9], Topleftcornery);
    }
    if (hasTopleftcornerz) {
      output.WriteDouble(6, field_names[10], Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      output.WriteDouble(7, field_names[3], Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      output.WriteDouble(8, field_names[4], Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      output.WriteDouble(9, field_names[5], Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      output.WriteDouble(10, field_names[11], Toprightcornerx);
    }
    if (hasToprightcornery) {
      output.WriteDouble(11, field_names[12], Toprightcornery);
    }
    if (hasToprightcornerz) {
      output.WriteDouble(12, field_names[13], Toprightcornerz);
    }
    if (hasHeight) {
      output.WriteDouble(13, field_names[6], Height);
    }
    if (hasLevelId) {
      output.WriteMessage(14, field_names[7], LevelId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBottomleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(1, Bottomleftcornerx);
    }
    if (hasBottomleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Bottomleftcornery);
    }
    if (hasBottomleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Bottomleftcornerz);
    }
    if (hasTopleftcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Topleftcornerx);
    }
    if (hasTopleftcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, Topleftcornery);
    }
    if (hasTopleftcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, Topleftcornerz);
    }
    if (hasBottomrightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, Bottomrightcornerx);
    }
    if (hasBottomrightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, Bottomrightcornery);
    }
    if (hasBottomrightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Bottomrightcornerz);
    }
    if (hasToprightcornerx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(10, Toprightcornerx);
    }
    if (hasToprightcornery) {
      size += pb::CodedOutputStream.ComputeDoubleSize(11, Toprightcornery);
    }
    if (hasToprightcornerz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(12, Toprightcornerz);
    }
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(13, Height);
    }
    if (hasLevelId) {
      size += pb::CodedOutputStream.ComputeMessageSize(14, LevelId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static masswallstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static masswallstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static masswallstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static masswallstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static masswallstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static masswallstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static masswallstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static masswallstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static masswallstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static masswallstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private masswallstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(masswallstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<masswallstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(masswallstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private masswallstrc result;
    
    private masswallstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        masswallstrc original = result;
        result = new masswallstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override masswallstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::masswallstrc.Descriptor; }
    }
    
    public override masswallstrc DefaultInstanceForType {
      get { return global::masswallstrc.DefaultInstance; }
    }
    
    public override masswallstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is masswallstrc) {
        return MergeFrom((masswallstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(masswallstrc other) {
      if (other == global::masswallstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBottomleftcornerx) {
        Bottomleftcornerx = other.Bottomleftcornerx;
      }
      if (other.HasBottomleftcornery) {
        Bottomleftcornery = other.Bottomleftcornery;
      }
      if (other.HasBottomleftcornerz) {
        Bottomleftcornerz = other.Bottomleftcornerz;
      }
      if (other.HasTopleftcornerx) {
        Topleftcornerx = other.Topleftcornerx;
      }
      if (other.HasTopleftcornery) {
        Topleftcornery = other.Topleftcornery;
      }
      if (other.HasTopleftcornerz) {
        Topleftcornerz = other.Topleftcornerz;
      }
      if (other.HasBottomrightcornerx) {
        Bottomrightcornerx = other.Bottomrightcornerx;
      }
      if (other.HasBottomrightcornery) {
        Bottomrightcornery = other.Bottomrightcornery;
      }
      if (other.HasBottomrightcornerz) {
        Bottomrightcornerz = other.Bottomrightcornerz;
      }
      if (other.HasToprightcornerx) {
        Toprightcornerx = other.Toprightcornerx;
      }
      if (other.HasToprightcornery) {
        Toprightcornery = other.Toprightcornery;
      }
      if (other.HasToprightcornerz) {
        Toprightcornerz = other.Toprightcornerz;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLevelId) {
        MergeLevelId(other.LevelId);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_masswallstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _masswallstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasBottomleftcornerx = input.ReadDouble(ref result.bottomleftcornerx_);
            break;
          }
          case 17: {
            result.hasBottomleftcornery = input.ReadDouble(ref result.bottomleftcornery_);
            break;
          }
          case 25: {
            result.hasBottomleftcornerz = input.ReadDouble(ref result.bottomleftcornerz_);
            break;
          }
          case 33: {
            result.hasTopleftcornerx = input.ReadDouble(ref result.topleftcornerx_);
            break;
          }
          case 41: {
            result.hasTopleftcornery = input.ReadDouble(ref result.topleftcornery_);
            break;
          }
          case 49: {
            result.hasTopleftcornerz = input.ReadDouble(ref result.topleftcornerz_);
            break;
          }
          case 57: {
            result.hasBottomrightcornerx = input.ReadDouble(ref result.bottomrightcornerx_);
            break;
          }
          case 65: {
            result.hasBottomrightcornery = input.ReadDouble(ref result.bottomrightcornery_);
            break;
          }
          case 73: {
            result.hasBottomrightcornerz = input.ReadDouble(ref result.bottomrightcornerz_);
            break;
          }
          case 81: {
            result.hasToprightcornerx = input.ReadDouble(ref result.toprightcornerx_);
            break;
          }
          case 89: {
            result.hasToprightcornery = input.ReadDouble(ref result.toprightcornery_);
            break;
          }
          case 97: {
            result.hasToprightcornerz = input.ReadDouble(ref result.toprightcornerz_);
            break;
          }
          case 105: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
          case 114: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelId) {
              subBuilder.MergeFrom(LevelId);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LevelId = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBottomleftcornerx {
      get { return result.hasBottomleftcornerx; }
    }
    public double Bottomleftcornerx {
      get { return result.Bottomleftcornerx; }
      set { SetBottomleftcornerx(value); }
    }
    public Builder SetBottomleftcornerx(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerx = true;
      result.bottomleftcornerx_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerx() {
      PrepareBuilder();
      result.hasBottomleftcornerx = false;
      result.bottomleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornery {
      get { return result.hasBottomleftcornery; }
    }
    public double Bottomleftcornery {
      get { return result.Bottomleftcornery; }
      set { SetBottomleftcornery(value); }
    }
    public Builder SetBottomleftcornery(double value) {
      PrepareBuilder();
      result.hasBottomleftcornery = true;
      result.bottomleftcornery_ = value;
      return this;
    }
    public Builder ClearBottomleftcornery() {
      PrepareBuilder();
      result.hasBottomleftcornery = false;
      result.bottomleftcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomleftcornerz {
      get { return result.hasBottomleftcornerz; }
    }
    public double Bottomleftcornerz {
      get { return result.Bottomleftcornerz; }
      set { SetBottomleftcornerz(value); }
    }
    public Builder SetBottomleftcornerz(double value) {
      PrepareBuilder();
      result.hasBottomleftcornerz = true;
      result.bottomleftcornerz_ = value;
      return this;
    }
    public Builder ClearBottomleftcornerz() {
      PrepareBuilder();
      result.hasBottomleftcornerz = false;
      result.bottomleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerx {
      get { return result.hasTopleftcornerx; }
    }
    public double Topleftcornerx {
      get { return result.Topleftcornerx; }
      set { SetTopleftcornerx(value); }
    }
    public Builder SetTopleftcornerx(double value) {
      PrepareBuilder();
      result.hasTopleftcornerx = true;
      result.topleftcornerx_ = value;
      return this;
    }
    public Builder ClearTopleftcornerx() {
      PrepareBuilder();
      result.hasTopleftcornerx = false;
      result.topleftcornerx_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornery {
      get { return result.hasTopleftcornery; }
    }
    public double Topleftcornery {
      get { return result.Topleftcornery; }
      set { SetTopleftcornery(value); }
    }
    public Builder SetTopleftcornery(double value) {
      PrepareBuilder();
      result.hasTopleftcornery = true;
      result.topleftcornery_ = value;
      return this;
    }
    public Builder ClearTopleftcornery() {
      PrepareBuilder();
      result.hasTopleftcornery = false;
      result.topleftcornery_ = 0D;
      return this;
    }
    
    public bool HasTopleftcornerz {
      get { return result.hasTopleftcornerz; }
    }
    public double Topleftcornerz {
      get { return result.Topleftcornerz; }
      set { SetTopleftcornerz(value); }
    }
    public Builder SetTopleftcornerz(double value) {
      PrepareBuilder();
      result.hasTopleftcornerz = true;
      result.topleftcornerz_ = value;
      return this;
    }
    public Builder ClearTopleftcornerz() {
      PrepareBuilder();
      result.hasTopleftcornerz = false;
      result.topleftcornerz_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerx {
      get { return result.hasBottomrightcornerx; }
    }
    public double Bottomrightcornerx {
      get { return result.Bottomrightcornerx; }
      set { SetBottomrightcornerx(value); }
    }
    public Builder SetBottomrightcornerx(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerx = true;
      result.bottomrightcornerx_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerx() {
      PrepareBuilder();
      result.hasBottomrightcornerx = false;
      result.bottomrightcornerx_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornery {
      get { return result.hasBottomrightcornery; }
    }
    public double Bottomrightcornery {
      get { return result.Bottomrightcornery; }
      set { SetBottomrightcornery(value); }
    }
    public Builder SetBottomrightcornery(double value) {
      PrepareBuilder();
      result.hasBottomrightcornery = true;
      result.bottomrightcornery_ = value;
      return this;
    }
    public Builder ClearBottomrightcornery() {
      PrepareBuilder();
      result.hasBottomrightcornery = false;
      result.bottomrightcornery_ = 0D;
      return this;
    }
    
    public bool HasBottomrightcornerz {
      get { return result.hasBottomrightcornerz; }
    }
    public double Bottomrightcornerz {
      get { return result.Bottomrightcornerz; }
      set { SetBottomrightcornerz(value); }
    }
    public Builder SetBottomrightcornerz(double value) {
      PrepareBuilder();
      result.hasBottomrightcornerz = true;
      result.bottomrightcornerz_ = value;
      return this;
    }
    public Builder ClearBottomrightcornerz() {
      PrepareBuilder();
      result.hasBottomrightcornerz = false;
      result.bottomrightcornerz_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerx {
      get { return result.hasToprightcornerx; }
    }
    public double Toprightcornerx {
      get { return result.Toprightcornerx; }
      set { SetToprightcornerx(value); }
    }
    public Builder SetToprightcornerx(double value) {
      PrepareBuilder();
      result.hasToprightcornerx = true;
      result.toprightcornerx_ = value;
      return this;
    }
    public Builder ClearToprightcornerx() {
      PrepareBuilder();
      result.hasToprightcornerx = false;
      result.toprightcornerx_ = 0D;
      return this;
    }
    
    public bool HasToprightcornery {
      get { return result.hasToprightcornery; }
    }
    public double Toprightcornery {
      get { return result.Toprightcornery; }
      set { SetToprightcornery(value); }
    }
    public Builder SetToprightcornery(double value) {
      PrepareBuilder();
      result.hasToprightcornery = true;
      result.toprightcornery_ = value;
      return this;
    }
    public Builder ClearToprightcornery() {
      PrepareBuilder();
      result.hasToprightcornery = false;
      result.toprightcornery_ = 0D;
      return this;
    }
    
    public bool HasToprightcornerz {
      get { return result.hasToprightcornerz; }
    }
    public double Toprightcornerz {
      get { return result.Toprightcornerz; }
      set { SetToprightcornerz(value); }
    }
    public Builder SetToprightcornerz(double value) {
      PrepareBuilder();
      result.hasToprightcornerz = true;
      result.toprightcornerz_ = value;
      return this;
    }
    public Builder ClearToprightcornerz() {
      PrepareBuilder();
      result.hasToprightcornerz = false;
      result.toprightcornerz_ = 0D;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
    
    public bool HasLevelId {
     get { return result.hasLevelId; }
    }
    public global::idstrc LevelId {
      get { return result.LevelId; }
      set { SetLevelId(value); }
    }
    public Builder SetLevelId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelId = true;
      result.levelId_ = value;
      return this;
    }
    public Builder SetLevelId(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelId = true;
      result.levelId_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelId(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelId &&
          result.levelId_ != global::idstrc.DefaultInstance) {
          result.levelId_ = global::idstrc.CreateBuilder(result.levelId_).MergeFrom(value).BuildPartial();
      } else {
        result.levelId_ = value;
      }
      result.hasLevelId = true;
      return this;
    }
    public Builder ClearLevelId() {
      PrepareBuilder();
      result.hasLevelId = false;
      result.levelId_ = null;
      return this;
    }
  }
  static masswallstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class masssweepstrc : pb::GeneratedMessage<masssweepstrc, masssweepstrc.Builder> {
  private masssweepstrc() { }
  private static readonly masssweepstrc defaultInstance = new masssweepstrc().MakeReadOnly();
  private static readonly string[] _masssweepstrcFieldNames = new string[] { "path", "profile1", "profile2" };
  private static readonly uint[] _masssweepstrcFieldTags = new uint[] { 17, 9, 25 };
  public static masssweepstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override masssweepstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override masssweepstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_masssweepstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<masssweepstrc, masssweepstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_masssweepstrc__FieldAccessorTable; }
  }
  
  public const int Profile1FieldNumber = 1;
  private pbc::PopsicleList<double> profile1_ = new pbc::PopsicleList<double>();
  public scg::IList<double> Profile1List {
    get { return pbc::Lists.AsReadOnly(profile1_); }
  }
  public int Profile1Count {
    get { return profile1_.Count; }
  }
  public double GetProfile1(int index) {
    return profile1_[index];
  }
  
  public const int PathFieldNumber = 2;
  private pbc::PopsicleList<double> path_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PathList {
    get { return pbc::Lists.AsReadOnly(path_); }
  }
  public int PathCount {
    get { return path_.Count; }
  }
  public double GetPath(int index) {
    return path_[index];
  }
  
  public const int Profile2FieldNumber = 3;
  private pbc::PopsicleList<double> profile2_ = new pbc::PopsicleList<double>();
  public scg::IList<double> Profile2List {
    get { return pbc::Lists.AsReadOnly(profile2_); }
  }
  public int Profile2Count {
    get { return profile2_.Count; }
  }
  public double GetProfile2(int index) {
    return profile2_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _masssweepstrcFieldNames;
    if (profile1_.Count > 0) {
      output.WriteDoubleArray(1, field_names[1], profile1_);
    }
    if (path_.Count > 0) {
      output.WriteDoubleArray(2, field_names[0], path_);
    }
    if (profile2_.Count > 0) {
      output.WriteDoubleArray(3, field_names[2], profile2_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * profile1_.Count;
      size += dataSize;
      size += 1 * profile1_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 8 * path_.Count;
      size += dataSize;
      size += 1 * path_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 8 * profile2_.Count;
      size += dataSize;
      size += 1 * profile2_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static masssweepstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static masssweepstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static masssweepstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static masssweepstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static masssweepstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private masssweepstrc MakeReadOnly() {
    profile1_.MakeReadOnly();
    path_.MakeReadOnly();
    profile2_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(masssweepstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<masssweepstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(masssweepstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private masssweepstrc result;
    
    private masssweepstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        masssweepstrc original = result;
        result = new masssweepstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override masssweepstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::masssweepstrc.Descriptor; }
    }
    
    public override masssweepstrc DefaultInstanceForType {
      get { return global::masssweepstrc.DefaultInstance; }
    }
    
    public override masssweepstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is masssweepstrc) {
        return MergeFrom((masssweepstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(masssweepstrc other) {
      if (other == global::masssweepstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.profile1_.Count != 0) {
        result.profile1_.Add(other.profile1_);
      }
      if (other.path_.Count != 0) {
        result.path_.Add(other.path_);
      }
      if (other.profile2_.Count != 0) {
        result.profile2_.Add(other.profile2_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_masssweepstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _masssweepstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.profile1_);
            break;
          }
          case 18:
          case 17: {
            input.ReadDoubleArray(tag, field_name, result.path_);
            break;
          }
          case 26:
          case 25: {
            input.ReadDoubleArray(tag, field_name, result.profile2_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> Profile1List {
      get { return PrepareBuilder().profile1_; }
    }
    public int Profile1Count {
      get { return result.Profile1Count; }
    }
    public double GetProfile1(int index) {
      return result.GetProfile1(index);
    }
    public Builder SetProfile1(int index, double value) {
      PrepareBuilder();
      result.profile1_[index] = value;
      return this;
    }
    public Builder AddProfile1(double value) {
      PrepareBuilder();
      result.profile1_.Add(value);
      return this;
    }
    public Builder AddRangeProfile1(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.profile1_.Add(values);
      return this;
    }
    public Builder ClearProfile1() {
      PrepareBuilder();
      result.profile1_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<double> PathList {
      get { return PrepareBuilder().path_; }
    }
    public int PathCount {
      get { return result.PathCount; }
    }
    public double GetPath(int index) {
      return result.GetPath(index);
    }
    public Builder SetPath(int index, double value) {
      PrepareBuilder();
      result.path_[index] = value;
      return this;
    }
    public Builder AddPath(double value) {
      PrepareBuilder();
      result.path_.Add(value);
      return this;
    }
    public Builder AddRangePath(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.path_.Add(values);
      return this;
    }
    public Builder ClearPath() {
      PrepareBuilder();
      result.path_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<double> Profile2List {
      get { return PrepareBuilder().profile2_; }
    }
    public int Profile2Count {
      get { return result.Profile2Count; }
    }
    public double GetProfile2(int index) {
      return result.GetProfile2(index);
    }
    public Builder SetProfile2(int index, double value) {
      PrepareBuilder();
      result.profile2_[index] = value;
      return this;
    }
    public Builder AddProfile2(double value) {
      PrepareBuilder();
      result.profile2_.Add(value);
      return this;
    }
    public Builder AddRangeProfile2(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.profile2_.Add(values);
      return this;
    }
    public Builder ClearProfile2() {
      PrepareBuilder();
      result.profile2_.Clear();
      return this;
    }
  }
  static masssweepstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class wallsfromslabsstrc : pb::GeneratedMessage<wallsfromslabsstrc, wallsfromslabsstrc.Builder> {
  private wallsfromslabsstrc() { }
  private static readonly wallsfromslabsstrc defaultInstance = new wallsfromslabsstrc().MakeReadOnly();
  private static readonly string[] _wallsfromslabsstrcFieldNames = new string[] { "blevel", "height", "slabid" };
  private static readonly uint[] _wallsfromslabsstrcFieldTags = new uint[] { 18, 25, 10 };
  public static wallsfromslabsstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override wallsfromslabsstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override wallsfromslabsstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_wallsfromslabsstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<wallsfromslabsstrc, wallsfromslabsstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_wallsfromslabsstrc__FieldAccessorTable; }
  }
  
  public const int SlabidFieldNumber = 1;
  private bool hasSlabid;
  private global::idstrc slabid_;
  public bool HasSlabid {
    get { return hasSlabid; }
  }
  public global::idstrc Slabid {
    get { return slabid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int BlevelFieldNumber = 2;
  private bool hasBlevel;
  private global::idstrc blevel_;
  public bool HasBlevel {
    get { return hasBlevel; }
  }
  public global::idstrc Blevel {
    get { return blevel_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int HeightFieldNumber = 3;
  private bool hasHeight;
  private double height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public double Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSlabid) return false;
      if (!hasBlevel) return false;
      if (!hasHeight) return false;
      if (!Slabid.IsInitialized) return false;
      if (!Blevel.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _wallsfromslabsstrcFieldNames;
    if (hasSlabid) {
      output.WriteMessage(1, field_names[2], Slabid);
    }
    if (hasBlevel) {
      output.WriteMessage(2, field_names[0], Blevel);
    }
    if (hasHeight) {
      output.WriteDouble(3, field_names[1], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSlabid) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Slabid);
    }
    if (hasBlevel) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Blevel);
    }
    if (hasHeight) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Height);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static wallsfromslabsstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static wallsfromslabsstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static wallsfromslabsstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private wallsfromslabsstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(wallsfromslabsstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<wallsfromslabsstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(wallsfromslabsstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private wallsfromslabsstrc result;
    
    private wallsfromslabsstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        wallsfromslabsstrc original = result;
        result = new wallsfromslabsstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override wallsfromslabsstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::wallsfromslabsstrc.Descriptor; }
    }
    
    public override wallsfromslabsstrc DefaultInstanceForType {
      get { return global::wallsfromslabsstrc.DefaultInstance; }
    }
    
    public override wallsfromslabsstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is wallsfromslabsstrc) {
        return MergeFrom((wallsfromslabsstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(wallsfromslabsstrc other) {
      if (other == global::wallsfromslabsstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSlabid) {
        MergeSlabid(other.Slabid);
      }
      if (other.HasBlevel) {
        MergeBlevel(other.Blevel);
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_wallsfromslabsstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _wallsfromslabsstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasSlabid) {
              subBuilder.MergeFrom(Slabid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Slabid = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasBlevel) {
              subBuilder.MergeFrom(Blevel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Blevel = subBuilder.BuildPartial();
            break;
          }
          case 25: {
            result.hasHeight = input.ReadDouble(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSlabid {
     get { return result.hasSlabid; }
    }
    public global::idstrc Slabid {
      get { return result.Slabid; }
      set { SetSlabid(value); }
    }
    public Builder SetSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = value;
      return this;
    }
    public Builder SetSlabid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSlabid &&
          result.slabid_ != global::idstrc.DefaultInstance) {
          result.slabid_ = global::idstrc.CreateBuilder(result.slabid_).MergeFrom(value).BuildPartial();
      } else {
        result.slabid_ = value;
      }
      result.hasSlabid = true;
      return this;
    }
    public Builder ClearSlabid() {
      PrepareBuilder();
      result.hasSlabid = false;
      result.slabid_ = null;
      return this;
    }
    
    public bool HasBlevel {
     get { return result.hasBlevel; }
    }
    public global::idstrc Blevel {
      get { return result.Blevel; }
      set { SetBlevel(value); }
    }
    public Builder SetBlevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBlevel = true;
      result.blevel_ = value;
      return this;
    }
    public Builder SetBlevel(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBlevel = true;
      result.blevel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBlevel(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBlevel &&
          result.blevel_ != global::idstrc.DefaultInstance) {
          result.blevel_ = global::idstrc.CreateBuilder(result.blevel_).MergeFrom(value).BuildPartial();
      } else {
        result.blevel_ = value;
      }
      result.hasBlevel = true;
      return this;
    }
    public Builder ClearBlevel() {
      PrepareBuilder();
      result.hasBlevel = false;
      result.blevel_ = null;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public double Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(double value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0D;
      return this;
    }
  }
  static wallsfromslabsstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class holeslabstrc : pb::GeneratedMessage<holeslabstrc, holeslabstrc.Builder> {
  private holeslabstrc() { }
  private static readonly holeslabstrc defaultInstance = new holeslabstrc().MakeReadOnly();
  private static readonly string[] _holeslabstrcFieldNames = new string[] { "pts", "slabid" };
  private static readonly uint[] _holeslabstrcFieldTags = new uint[] { 17, 10 };
  public static holeslabstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override holeslabstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override holeslabstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_holeslabstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<holeslabstrc, holeslabstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_holeslabstrc__FieldAccessorTable; }
  }
  
  public const int SlabidFieldNumber = 1;
  private bool hasSlabid;
  private global::idstrc slabid_;
  public bool HasSlabid {
    get { return hasSlabid; }
  }
  public global::idstrc Slabid {
    get { return slabid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int PtsFieldNumber = 2;
  private pbc::PopsicleList<double> pts_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PtsList {
    get { return pbc::Lists.AsReadOnly(pts_); }
  }
  public int PtsCount {
    get { return pts_.Count; }
  }
  public double GetPts(int index) {
    return pts_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSlabid) return false;
      if (!Slabid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _holeslabstrcFieldNames;
    if (hasSlabid) {
      output.WriteMessage(1, field_names[1], Slabid);
    }
    if (pts_.Count > 0) {
      output.WriteDoubleArray(2, field_names[0], pts_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSlabid) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Slabid);
    }
    {
      int dataSize = 0;
      dataSize = 8 * pts_.Count;
      size += dataSize;
      size += 1 * pts_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static holeslabstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static holeslabstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static holeslabstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static holeslabstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static holeslabstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private holeslabstrc MakeReadOnly() {
    pts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(holeslabstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<holeslabstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(holeslabstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private holeslabstrc result;
    
    private holeslabstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        holeslabstrc original = result;
        result = new holeslabstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override holeslabstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::holeslabstrc.Descriptor; }
    }
    
    public override holeslabstrc DefaultInstanceForType {
      get { return global::holeslabstrc.DefaultInstance; }
    }
    
    public override holeslabstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is holeslabstrc) {
        return MergeFrom((holeslabstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(holeslabstrc other) {
      if (other == global::holeslabstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSlabid) {
        MergeSlabid(other.Slabid);
      }
      if (other.pts_.Count != 0) {
        result.pts_.Add(other.pts_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_holeslabstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _holeslabstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasSlabid) {
              subBuilder.MergeFrom(Slabid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Slabid = subBuilder.BuildPartial();
            break;
          }
          case 18:
          case 17: {
            input.ReadDoubleArray(tag, field_name, result.pts_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSlabid {
     get { return result.hasSlabid; }
    }
    public global::idstrc Slabid {
      get { return result.Slabid; }
      set { SetSlabid(value); }
    }
    public Builder SetSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = value;
      return this;
    }
    public Builder SetSlabid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSlabid &&
          result.slabid_ != global::idstrc.DefaultInstance) {
          result.slabid_ = global::idstrc.CreateBuilder(result.slabid_).MergeFrom(value).BuildPartial();
      } else {
        result.slabid_ = value;
      }
      result.hasSlabid = true;
      return this;
    }
    public Builder ClearSlabid() {
      PrepareBuilder();
      result.hasSlabid = false;
      result.slabid_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<double> PtsList {
      get { return PrepareBuilder().pts_; }
    }
    public int PtsCount {
      get { return result.PtsCount; }
    }
    public double GetPts(int index) {
      return result.GetPts(index);
    }
    public Builder SetPts(int index, double value) {
      PrepareBuilder();
      result.pts_[index] = value;
      return this;
    }
    public Builder AddPts(double value) {
      PrepareBuilder();
      result.pts_.Add(value);
      return this;
    }
    public Builder AddRangePts(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.pts_.Add(values);
      return this;
    }
    public Builder ClearPts() {
      PrepareBuilder();
      result.pts_.Clear();
      return this;
    }
  }
  static holeslabstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class railingsstrc : pb::GeneratedMessage<railingsstrc, railingsstrc.Builder> {
  private railingsstrc() { }
  private static readonly railingsstrc defaultInstance = new railingsstrc().MakeReadOnly();
  private static readonly string[] _railingsstrcFieldNames = new string[] { "slabid" };
  private static readonly uint[] _railingsstrcFieldTags = new uint[] { 10 };
  public static railingsstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override railingsstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override railingsstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_railingsstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<railingsstrc, railingsstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_railingsstrc__FieldAccessorTable; }
  }
  
  public const int SlabidFieldNumber = 1;
  private bool hasSlabid;
  private global::idstrc slabid_;
  public bool HasSlabid {
    get { return hasSlabid; }
  }
  public global::idstrc Slabid {
    get { return slabid_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSlabid) return false;
      if (!Slabid.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _railingsstrcFieldNames;
    if (hasSlabid) {
      output.WriteMessage(1, field_names[0], Slabid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSlabid) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Slabid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static railingsstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static railingsstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static railingsstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static railingsstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static railingsstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static railingsstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static railingsstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static railingsstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static railingsstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static railingsstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private railingsstrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(railingsstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<railingsstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(railingsstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private railingsstrc result;
    
    private railingsstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        railingsstrc original = result;
        result = new railingsstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override railingsstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::railingsstrc.Descriptor; }
    }
    
    public override railingsstrc DefaultInstanceForType {
      get { return global::railingsstrc.DefaultInstance; }
    }
    
    public override railingsstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is railingsstrc) {
        return MergeFrom((railingsstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(railingsstrc other) {
      if (other == global::railingsstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSlabid) {
        MergeSlabid(other.Slabid);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_railingsstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _railingsstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasSlabid) {
              subBuilder.MergeFrom(Slabid);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Slabid = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSlabid {
     get { return result.hasSlabid; }
    }
    public global::idstrc Slabid {
      get { return result.Slabid; }
      set { SetSlabid(value); }
    }
    public Builder SetSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = value;
      return this;
    }
    public Builder SetSlabid(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSlabid = true;
      result.slabid_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSlabid(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSlabid &&
          result.slabid_ != global::idstrc.DefaultInstance) {
          result.slabid_ = global::idstrc.CreateBuilder(result.slabid_).MergeFrom(value).BuildPartial();
      } else {
        result.slabid_ = value;
      }
      result.hasSlabid = true;
      return this;
    }
    public Builder ClearSlabid() {
      PrepareBuilder();
      result.hasSlabid = false;
      result.slabid_ = null;
      return this;
    }
  }
  static railingsstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class toposurfacestrc : pb::GeneratedMessage<toposurfacestrc, toposurfacestrc.Builder> {
  private toposurfacestrc() { }
  private static readonly toposurfacestrc defaultInstance = new toposurfacestrc().MakeReadOnly();
  private static readonly string[] _toposurfacestrcFieldNames = new string[] { "pts" };
  private static readonly uint[] _toposurfacestrcFieldTags = new uint[] { 9 };
  public static toposurfacestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override toposurfacestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override toposurfacestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_toposurfacestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<toposurfacestrc, toposurfacestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_toposurfacestrc__FieldAccessorTable; }
  }
  
  public const int PtsFieldNumber = 1;
  private pbc::PopsicleList<double> pts_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PtsList {
    get { return pbc::Lists.AsReadOnly(pts_); }
  }
  public int PtsCount {
    get { return pts_.Count; }
  }
  public double GetPts(int index) {
    return pts_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _toposurfacestrcFieldNames;
    if (pts_.Count > 0) {
      output.WriteDoubleArray(1, field_names[0], pts_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * pts_.Count;
      size += dataSize;
      size += 1 * pts_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static toposurfacestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static toposurfacestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static toposurfacestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static toposurfacestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private toposurfacestrc MakeReadOnly() {
    pts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(toposurfacestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<toposurfacestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(toposurfacestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private toposurfacestrc result;
    
    private toposurfacestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        toposurfacestrc original = result;
        result = new toposurfacestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override toposurfacestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::toposurfacestrc.Descriptor; }
    }
    
    public override toposurfacestrc DefaultInstanceForType {
      get { return global::toposurfacestrc.DefaultInstance; }
    }
    
    public override toposurfacestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is toposurfacestrc) {
        return MergeFrom((toposurfacestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(toposurfacestrc other) {
      if (other == global::toposurfacestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.pts_.Count != 0) {
        result.pts_.Add(other.pts_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_toposurfacestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _toposurfacestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.pts_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> PtsList {
      get { return PrepareBuilder().pts_; }
    }
    public int PtsCount {
      get { return result.PtsCount; }
    }
    public double GetPts(int index) {
      return result.GetPts(index);
    }
    public Builder SetPts(int index, double value) {
      PrepareBuilder();
      result.pts_[index] = value;
      return this;
    }
    public Builder AddPts(double value) {
      PrepareBuilder();
      result.pts_.Add(value);
      return this;
    }
    public Builder AddRangePts(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.pts_.Add(values);
      return this;
    }
    public Builder ClearPts() {
      PrepareBuilder();
      result.pts_.Clear();
      return this;
    }
  }
  static toposurfacestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class buildingpadstrc : pb::GeneratedMessage<buildingpadstrc, buildingpadstrc.Builder> {
  private buildingpadstrc() { }
  private static readonly buildingpadstrc defaultInstance = new buildingpadstrc().MakeReadOnly();
  private static readonly string[] _buildingpadstrcFieldNames = new string[] { "levelID", "pts" };
  private static readonly uint[] _buildingpadstrcFieldTags = new uint[] { 18, 9 };
  public static buildingpadstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override buildingpadstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override buildingpadstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_buildingpadstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<buildingpadstrc, buildingpadstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_buildingpadstrc__FieldAccessorTable; }
  }
  
  public const int PtsFieldNumber = 1;
  private pbc::PopsicleList<double> pts_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PtsList {
    get { return pbc::Lists.AsReadOnly(pts_); }
  }
  public int PtsCount {
    get { return pts_.Count; }
  }
  public double GetPts(int index) {
    return pts_[index];
  }
  
  public const int LevelIDFieldNumber = 2;
  private bool hasLevelID;
  private global::idstrc levelID_;
  public bool HasLevelID {
    get { return hasLevelID; }
  }
  public global::idstrc LevelID {
    get { return levelID_ ?? global::idstrc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasLevelID) return false;
      if (!LevelID.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _buildingpadstrcFieldNames;
    if (pts_.Count > 0) {
      output.WriteDoubleArray(1, field_names[1], pts_);
    }
    if (hasLevelID) {
      output.WriteMessage(2, field_names[0], LevelID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * pts_.Count;
      size += dataSize;
      size += 1 * pts_.Count;
    }
    if (hasLevelID) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, LevelID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static buildingpadstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static buildingpadstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static buildingpadstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static buildingpadstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private buildingpadstrc MakeReadOnly() {
    pts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(buildingpadstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<buildingpadstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(buildingpadstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private buildingpadstrc result;
    
    private buildingpadstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        buildingpadstrc original = result;
        result = new buildingpadstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override buildingpadstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::buildingpadstrc.Descriptor; }
    }
    
    public override buildingpadstrc DefaultInstanceForType {
      get { return global::buildingpadstrc.DefaultInstance; }
    }
    
    public override buildingpadstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is buildingpadstrc) {
        return MergeFrom((buildingpadstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(buildingpadstrc other) {
      if (other == global::buildingpadstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.pts_.Count != 0) {
        result.pts_.Add(other.pts_);
      }
      if (other.HasLevelID) {
        MergeLevelID(other.LevelID);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_buildingpadstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _buildingpadstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.pts_);
            break;
          }
          case 18: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasLevelID) {
              subBuilder.MergeFrom(LevelID);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LevelID = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> PtsList {
      get { return PrepareBuilder().pts_; }
    }
    public int PtsCount {
      get { return result.PtsCount; }
    }
    public double GetPts(int index) {
      return result.GetPts(index);
    }
    public Builder SetPts(int index, double value) {
      PrepareBuilder();
      result.pts_[index] = value;
      return this;
    }
    public Builder AddPts(double value) {
      PrepareBuilder();
      result.pts_.Add(value);
      return this;
    }
    public Builder AddRangePts(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.pts_.Add(values);
      return this;
    }
    public Builder ClearPts() {
      PrepareBuilder();
      result.pts_.Clear();
      return this;
    }
    
    public bool HasLevelID {
     get { return result.hasLevelID; }
    }
    public global::idstrc LevelID {
      get { return result.LevelID; }
      set { SetLevelID(value); }
    }
    public Builder SetLevelID(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLevelID = true;
      result.levelID_ = value;
      return this;
    }
    public Builder SetLevelID(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLevelID = true;
      result.levelID_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLevelID(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLevelID &&
          result.levelID_ != global::idstrc.DefaultInstance) {
          result.levelID_ = global::idstrc.CreateBuilder(result.levelID_).MergeFrom(value).BuildPartial();
      } else {
        result.levelID_ = value;
      }
      result.hasLevelID = true;
      return this;
    }
    public Builder ClearLevelID() {
      PrepareBuilder();
      result.hasLevelID = false;
      result.levelID_ = null;
      return this;
    }
  }
  static buildingpadstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class extrusionstrc : pb::GeneratedMessage<extrusionstrc, extrusionstrc.Builder> {
  private extrusionstrc() { }
  private static readonly extrusionstrc defaultInstance = new extrusionstrc().MakeReadOnly();
  private static readonly string[] _extrusionstrcFieldNames = new string[] { "elevation", "pts" };
  private static readonly uint[] _extrusionstrcFieldTags = new uint[] { 17, 9 };
  public static extrusionstrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override extrusionstrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override extrusionstrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_extrusionstrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<extrusionstrc, extrusionstrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_extrusionstrc__FieldAccessorTable; }
  }
  
  public const int PtsFieldNumber = 1;
  private pbc::PopsicleList<double> pts_ = new pbc::PopsicleList<double>();
  public scg::IList<double> PtsList {
    get { return pbc::Lists.AsReadOnly(pts_); }
  }
  public int PtsCount {
    get { return pts_.Count; }
  }
  public double GetPts(int index) {
    return pts_[index];
  }
  
  public const int ElevationFieldNumber = 2;
  private bool hasElevation;
  private double elevation_;
  public bool HasElevation {
    get { return hasElevation; }
  }
  public double Elevation {
    get { return elevation_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasElevation) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _extrusionstrcFieldNames;
    if (pts_.Count > 0) {
      output.WriteDoubleArray(1, field_names[1], pts_);
    }
    if (hasElevation) {
      output.WriteDouble(2, field_names[0], Elevation);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * pts_.Count;
      size += dataSize;
      size += 1 * pts_.Count;
    }
    if (hasElevation) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Elevation);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static extrusionstrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static extrusionstrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static extrusionstrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static extrusionstrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static extrusionstrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private extrusionstrc MakeReadOnly() {
    pts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(extrusionstrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<extrusionstrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(extrusionstrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private extrusionstrc result;
    
    private extrusionstrc PrepareBuilder() {
      if (resultIsReadOnly) {
        extrusionstrc original = result;
        result = new extrusionstrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override extrusionstrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::extrusionstrc.Descriptor; }
    }
    
    public override extrusionstrc DefaultInstanceForType {
      get { return global::extrusionstrc.DefaultInstance; }
    }
    
    public override extrusionstrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is extrusionstrc) {
        return MergeFrom((extrusionstrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(extrusionstrc other) {
      if (other == global::extrusionstrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.pts_.Count != 0) {
        result.pts_.Add(other.pts_);
      }
      if (other.HasElevation) {
        Elevation = other.Elevation;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_extrusionstrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _extrusionstrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 9: {
            input.ReadDoubleArray(tag, field_name, result.pts_);
            break;
          }
          case 17: {
            result.hasElevation = input.ReadDouble(ref result.elevation_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<double> PtsList {
      get { return PrepareBuilder().pts_; }
    }
    public int PtsCount {
      get { return result.PtsCount; }
    }
    public double GetPts(int index) {
      return result.GetPts(index);
    }
    public Builder SetPts(int index, double value) {
      PrepareBuilder();
      result.pts_[index] = value;
      return this;
    }
    public Builder AddPts(double value) {
      PrepareBuilder();
      result.pts_.Add(value);
      return this;
    }
    public Builder AddRangePts(scg::IEnumerable<double> values) {
      PrepareBuilder();
      result.pts_.Add(values);
      return this;
    }
    public Builder ClearPts() {
      PrepareBuilder();
      result.pts_.Clear();
      return this;
    }
    
    public bool HasElevation {
      get { return result.hasElevation; }
    }
    public double Elevation {
      get { return result.Elevation; }
      set { SetElevation(value); }
    }
    public Builder SetElevation(double value) {
      PrepareBuilder();
      result.hasElevation = true;
      result.elevation_ = value;
      return this;
    }
    public Builder ClearElevation() {
      PrepareBuilder();
      result.hasElevation = false;
      result.elevation_ = 0D;
      return this;
    }
  }
  static extrusionstrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class movestrc : pb::GeneratedMessage<movestrc, movestrc.Builder> {
  private movestrc() { }
  private static readonly movestrc defaultInstance = new movestrc().MakeReadOnly();
  private static readonly string[] _movestrcFieldNames = new string[] { "element", "vectorx", "vectory", "vectorz" };
  private static readonly uint[] _movestrcFieldTags = new uint[] { 10, 17, 25, 33 };
  public static movestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override movestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override movestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_movestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<movestrc, movestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_movestrc__FieldAccessorTable; }
  }
  
  public const int ElementFieldNumber = 1;
  private bool hasElement;
  private global::idstrc element_;
  public bool HasElement {
    get { return hasElement; }
  }
  public global::idstrc Element {
    get { return element_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int VectorxFieldNumber = 2;
  private bool hasVectorx;
  private double vectorx_;
  public bool HasVectorx {
    get { return hasVectorx; }
  }
  public double Vectorx {
    get { return vectorx_; }
  }
  
  public const int VectoryFieldNumber = 3;
  private bool hasVectory;
  private double vectory_;
  public bool HasVectory {
    get { return hasVectory; }
  }
  public double Vectory {
    get { return vectory_; }
  }
  
  public const int VectorzFieldNumber = 4;
  private bool hasVectorz;
  private double vectorz_;
  public bool HasVectorz {
    get { return hasVectorz; }
  }
  public double Vectorz {
    get { return vectorz_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasElement) return false;
      if (!hasVectorx) return false;
      if (!hasVectory) return false;
      if (!hasVectorz) return false;
      if (!Element.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _movestrcFieldNames;
    if (hasElement) {
      output.WriteMessage(1, field_names[0], Element);
    }
    if (hasVectorx) {
      output.WriteDouble(2, field_names[1], Vectorx);
    }
    if (hasVectory) {
      output.WriteDouble(3, field_names[2], Vectory);
    }
    if (hasVectorz) {
      output.WriteDouble(4, field_names[3], Vectorz);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasElement) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Element);
    }
    if (hasVectorx) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Vectorx);
    }
    if (hasVectory) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Vectory);
    }
    if (hasVectorz) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, Vectorz);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static movestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static movestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static movestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static movestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static movestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static movestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static movestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static movestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static movestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static movestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private movestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(movestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<movestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(movestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private movestrc result;
    
    private movestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        movestrc original = result;
        result = new movestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override movestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::movestrc.Descriptor; }
    }
    
    public override movestrc DefaultInstanceForType {
      get { return global::movestrc.DefaultInstance; }
    }
    
    public override movestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is movestrc) {
        return MergeFrom((movestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(movestrc other) {
      if (other == global::movestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasElement) {
        MergeElement(other.Element);
      }
      if (other.HasVectorx) {
        Vectorx = other.Vectorx;
      }
      if (other.HasVectory) {
        Vectory = other.Vectory;
      }
      if (other.HasVectorz) {
        Vectorz = other.Vectorz;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_movestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _movestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasElement) {
              subBuilder.MergeFrom(Element);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Element = subBuilder.BuildPartial();
            break;
          }
          case 17: {
            result.hasVectorx = input.ReadDouble(ref result.vectorx_);
            break;
          }
          case 25: {
            result.hasVectory = input.ReadDouble(ref result.vectory_);
            break;
          }
          case 33: {
            result.hasVectorz = input.ReadDouble(ref result.vectorz_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasElement {
     get { return result.hasElement; }
    }
    public global::idstrc Element {
      get { return result.Element; }
      set { SetElement(value); }
    }
    public Builder SetElement(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasElement = true;
      result.element_ = value;
      return this;
    }
    public Builder SetElement(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasElement = true;
      result.element_ = builderForValue.Build();
      return this;
    }
    public Builder MergeElement(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasElement &&
          result.element_ != global::idstrc.DefaultInstance) {
          result.element_ = global::idstrc.CreateBuilder(result.element_).MergeFrom(value).BuildPartial();
      } else {
        result.element_ = value;
      }
      result.hasElement = true;
      return this;
    }
    public Builder ClearElement() {
      PrepareBuilder();
      result.hasElement = false;
      result.element_ = null;
      return this;
    }
    
    public bool HasVectorx {
      get { return result.hasVectorx; }
    }
    public double Vectorx {
      get { return result.Vectorx; }
      set { SetVectorx(value); }
    }
    public Builder SetVectorx(double value) {
      PrepareBuilder();
      result.hasVectorx = true;
      result.vectorx_ = value;
      return this;
    }
    public Builder ClearVectorx() {
      PrepareBuilder();
      result.hasVectorx = false;
      result.vectorx_ = 0D;
      return this;
    }
    
    public bool HasVectory {
      get { return result.hasVectory; }
    }
    public double Vectory {
      get { return result.Vectory; }
      set { SetVectory(value); }
    }
    public Builder SetVectory(double value) {
      PrepareBuilder();
      result.hasVectory = true;
      result.vectory_ = value;
      return this;
    }
    public Builder ClearVectory() {
      PrepareBuilder();
      result.hasVectory = false;
      result.vectory_ = 0D;
      return this;
    }
    
    public bool HasVectorz {
      get { return result.hasVectorz; }
    }
    public double Vectorz {
      get { return result.Vectorz; }
      set { SetVectorz(value); }
    }
    public Builder SetVectorz(double value) {
      PrepareBuilder();
      result.hasVectorz = true;
      result.vectorz_ = value;
      return this;
    }
    public Builder ClearVectorz() {
      PrepareBuilder();
      result.hasVectorz = false;
      result.vectorz_ = 0D;
      return this;
    }
  }
  static movestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class rotatestrc : pb::GeneratedMessage<rotatestrc, rotatestrc.Builder> {
  private rotatestrc() { }
  private static readonly rotatestrc defaultInstance = new rotatestrc().MakeReadOnly();
  private static readonly string[] _rotatestrcFieldNames = new string[] { "angle", "element", "p0x", "p0y", "p0z", "p1x", "p1y", "p1z" };
  private static readonly uint[] _rotatestrcFieldTags = new uint[] { 17, 10, 25, 33, 41, 49, 57, 65 };
  public static rotatestrc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override rotatestrc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override rotatestrc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PbContracts.internal__static_rotatestrc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<rotatestrc, rotatestrc.Builder> InternalFieldAccessors {
    get { return global::PbContracts.internal__static_rotatestrc__FieldAccessorTable; }
  }
  
  public const int ElementFieldNumber = 1;
  private bool hasElement;
  private global::idstrc element_;
  public bool HasElement {
    get { return hasElement; }
  }
  public global::idstrc Element {
    get { return element_ ?? global::idstrc.DefaultInstance; }
  }
  
  public const int AngleFieldNumber = 2;
  private bool hasAngle;
  private double angle_;
  public bool HasAngle {
    get { return hasAngle; }
  }
  public double Angle {
    get { return angle_; }
  }
  
  public const int P0XFieldNumber = 3;
  private bool hasP0X;
  private double p0X_;
  public bool HasP0X {
    get { return hasP0X; }
  }
  public double P0X {
    get { return p0X_; }
  }
  
  public const int P0YFieldNumber = 4;
  private bool hasP0Y;
  private double p0Y_;
  public bool HasP0Y {
    get { return hasP0Y; }
  }
  public double P0Y {
    get { return p0Y_; }
  }
  
  public const int P0ZFieldNumber = 5;
  private bool hasP0Z;
  private double p0Z_;
  public bool HasP0Z {
    get { return hasP0Z; }
  }
  public double P0Z {
    get { return p0Z_; }
  }
  
  public const int P1XFieldNumber = 6;
  private bool hasP1X;
  private double p1X_;
  public bool HasP1X {
    get { return hasP1X; }
  }
  public double P1X {
    get { return p1X_; }
  }
  
  public const int P1YFieldNumber = 7;
  private bool hasP1Y;
  private double p1Y_;
  public bool HasP1Y {
    get { return hasP1Y; }
  }
  public double P1Y {
    get { return p1Y_; }
  }
  
  public const int P1ZFieldNumber = 8;
  private bool hasP1Z;
  private double p1Z_;
  public bool HasP1Z {
    get { return hasP1Z; }
  }
  public double P1Z {
    get { return p1Z_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasElement) return false;
      if (!hasAngle) return false;
      if (!hasP0X) return false;
      if (!hasP0Y) return false;
      if (!hasP0Z) return false;
      if (!hasP1X) return false;
      if (!hasP1Y) return false;
      if (!hasP1Z) return false;
      if (!Element.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _rotatestrcFieldNames;
    if (hasElement) {
      output.WriteMessage(1, field_names[1], Element);
    }
    if (hasAngle) {
      output.WriteDouble(2, field_names[0], Angle);
    }
    if (hasP0X) {
      output.WriteDouble(3, field_names[2], P0X);
    }
    if (hasP0Y) {
      output.WriteDouble(4, field_names[3], P0Y);
    }
    if (hasP0Z) {
      output.WriteDouble(5, field_names[4], P0Z);
    }
    if (hasP1X) {
      output.WriteDouble(6, field_names[5], P1X);
    }
    if (hasP1Y) {
      output.WriteDouble(7, field_names[6], P1Y);
    }
    if (hasP1Z) {
      output.WriteDouble(8, field_names[7], P1Z);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasElement) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Element);
    }
    if (hasAngle) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Angle);
    }
    if (hasP0X) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, P0X);
    }
    if (hasP0Y) {
      size += pb::CodedOutputStream.ComputeDoubleSize(4, P0Y);
    }
    if (hasP0Z) {
      size += pb::CodedOutputStream.ComputeDoubleSize(5, P0Z);
    }
    if (hasP1X) {
      size += pb::CodedOutputStream.ComputeDoubleSize(6, P1X);
    }
    if (hasP1Y) {
      size += pb::CodedOutputStream.ComputeDoubleSize(7, P1Y);
    }
    if (hasP1Z) {
      size += pb::CodedOutputStream.ComputeDoubleSize(8, P1Z);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static rotatestrc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static rotatestrc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static rotatestrc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static rotatestrc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static rotatestrc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static rotatestrc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static rotatestrc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static rotatestrc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static rotatestrc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static rotatestrc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private rotatestrc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(rotatestrc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<rotatestrc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(rotatestrc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private rotatestrc result;
    
    private rotatestrc PrepareBuilder() {
      if (resultIsReadOnly) {
        rotatestrc original = result;
        result = new rotatestrc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override rotatestrc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::rotatestrc.Descriptor; }
    }
    
    public override rotatestrc DefaultInstanceForType {
      get { return global::rotatestrc.DefaultInstance; }
    }
    
    public override rotatestrc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is rotatestrc) {
        return MergeFrom((rotatestrc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(rotatestrc other) {
      if (other == global::rotatestrc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasElement) {
        MergeElement(other.Element);
      }
      if (other.HasAngle) {
        Angle = other.Angle;
      }
      if (other.HasP0X) {
        P0X = other.P0X;
      }
      if (other.HasP0Y) {
        P0Y = other.P0Y;
      }
      if (other.HasP0Z) {
        P0Z = other.P0Z;
      }
      if (other.HasP1X) {
        P1X = other.P1X;
      }
      if (other.HasP1Y) {
        P1Y = other.P1Y;
      }
      if (other.HasP1Z) {
        P1Z = other.P1Z;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_rotatestrcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _rotatestrcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::idstrc.Builder subBuilder = global::idstrc.CreateBuilder();
            if (result.hasElement) {
              subBuilder.MergeFrom(Element);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Element = subBuilder.BuildPartial();
            break;
          }
          case 17: {
            result.hasAngle = input.ReadDouble(ref result.angle_);
            break;
          }
          case 25: {
            result.hasP0X = input.ReadDouble(ref result.p0X_);
            break;
          }
          case 33: {
            result.hasP0Y = input.ReadDouble(ref result.p0Y_);
            break;
          }
          case 41: {
            result.hasP0Z = input.ReadDouble(ref result.p0Z_);
            break;
          }
          case 49: {
            result.hasP1X = input.ReadDouble(ref result.p1X_);
            break;
          }
          case 57: {
            result.hasP1Y = input.ReadDouble(ref result.p1Y_);
            break;
          }
          case 65: {
            result.hasP1Z = input.ReadDouble(ref result.p1Z_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasElement {
     get { return result.hasElement; }
    }
    public global::idstrc Element {
      get { return result.Element; }
      set { SetElement(value); }
    }
    public Builder SetElement(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasElement = true;
      result.element_ = value;
      return this;
    }
    public Builder SetElement(global::idstrc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasElement = true;
      result.element_ = builderForValue.Build();
      return this;
    }
    public Builder MergeElement(global::idstrc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasElement &&
          result.element_ != global::idstrc.DefaultInstance) {
          result.element_ = global::idstrc.CreateBuilder(result.element_).MergeFrom(value).BuildPartial();
      } else {
        result.element_ = value;
      }
      result.hasElement = true;
      return this;
    }
    public Builder ClearElement() {
      PrepareBuilder();
      result.hasElement = false;
      result.element_ = null;
      return this;
    }
    
    public bool HasAngle {
      get { return result.hasAngle; }
    }
    public double Angle {
      get { return result.Angle; }
      set { SetAngle(value); }
    }
    public Builder SetAngle(double value) {
      PrepareBuilder();
      result.hasAngle = true;
      result.angle_ = value;
      return this;
    }
    public Builder ClearAngle() {
      PrepareBuilder();
      result.hasAngle = false;
      result.angle_ = 0D;
      return this;
    }
    
    public bool HasP0X {
      get { return result.hasP0X; }
    }
    public double P0X {
      get { return result.P0X; }
      set { SetP0X(value); }
    }
    public Builder SetP0X(double value) {
      PrepareBuilder();
      result.hasP0X = true;
      result.p0X_ = value;
      return this;
    }
    public Builder ClearP0X() {
      PrepareBuilder();
      result.hasP0X = false;
      result.p0X_ = 0D;
      return this;
    }
    
    public bool HasP0Y {
      get { return result.hasP0Y; }
    }
    public double P0Y {
      get { return result.P0Y; }
      set { SetP0Y(value); }
    }
    public Builder SetP0Y(double value) {
      PrepareBuilder();
      result.hasP0Y = true;
      result.p0Y_ = value;
      return this;
    }
    public Builder ClearP0Y() {
      PrepareBuilder();
      result.hasP0Y = false;
      result.p0Y_ = 0D;
      return this;
    }
    
    public bool HasP0Z {
      get { return result.hasP0Z; }
    }
    public double P0Z {
      get { return result.P0Z; }
      set { SetP0Z(value); }
    }
    public Builder SetP0Z(double value) {
      PrepareBuilder();
      result.hasP0Z = true;
      result.p0Z_ = value;
      return this;
    }
    public Builder ClearP0Z() {
      PrepareBuilder();
      result.hasP0Z = false;
      result.p0Z_ = 0D;
      return this;
    }
    
    public bool HasP1X {
      get { return result.hasP1X; }
    }
    public double P1X {
      get { return result.P1X; }
      set { SetP1X(value); }
    }
    public Builder SetP1X(double value) {
      PrepareBuilder();
      result.hasP1X = true;
      result.p1X_ = value;
      return this;
    }
    public Builder ClearP1X() {
      PrepareBuilder();
      result.hasP1X = false;
      result.p1X_ = 0D;
      return this;
    }
    
    public bool HasP1Y {
      get { return result.hasP1Y; }
    }
    public double P1Y {
      get { return result.P1Y; }
      set { SetP1Y(value); }
    }
    public Builder SetP1Y(double value) {
      PrepareBuilder();
      result.hasP1Y = true;
      result.p1Y_ = value;
      return this;
    }
    public Builder ClearP1Y() {
      PrepareBuilder();
      result.hasP1Y = false;
      result.p1Y_ = 0D;
      return this;
    }
    
    public bool HasP1Z {
      get { return result.hasP1Z; }
    }
    public double P1Z {
      get { return result.P1Z; }
      set { SetP1Z(value); }
    }
    public Builder SetP1Z(double value) {
      PrepareBuilder();
      result.hasP1Z = true;
      result.p1Z_ = value;
      return this;
    }
    public Builder ClearP1Z() {
      PrepareBuilder();
      result.hasP1Z = false;
      result.p1Z_ = 0D;
      return this;
    }
  }
  static rotatestrc() {
    object.ReferenceEquals(global::PbContracts.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
